!(function() {
  let t;
  !(function() {
    let e = !1;
      const i = /xyz/.test(function() {
        window.postMessage("xyz");
      })
        ? /\b_super\b/
        : /.*/;
    return (
      (t = function() {}),
      (t.extend = function(t) {
        function s() {
          !e && this.init && this.init.apply(this, arguments);
        }
        const r = this.prototype;
        e = !0;
        const n = new this();
        e = !1;
        for (const o in t)
          n[o] =
            typeof t[o] === "function" &&
            typeof r[o] === "function" &&
            i.test(t[o])
              ? (function(t, e) {
                  return function() {
                    const i = this._super;
                    this._super = r[t];
                    const s = e.apply(this, arguments);
                    return (this._super = i), s;
                  };
                })(o, t[o])
              : t[o];
        return (
          (s.prototype = n),
          (s.prototype.constructor = s),
          (s.extend = arguments.callee),
          s
        );
      }),
      t
    );
  })(),
    (function() {
      function t(t, e) {
        e = e || { bubbles: !1, cancelable: !1, detail: void 0 };
        const i = document.createEvent("CustomEvent");
        return i.initCustomEvent(t, e.bubbles, e.cancelable, e.detail), i;
      }
      (t.prototype = window.Event.prototype), (window.CustomEvent = t);
    })(),
    (function() {
      for (
        var t = 0, e = ["ms", "moz", "webkit", "o"], i = 0;
        i < e.length && !window.requestAnimationFrame;
        ++i
      )
        (window.requestAnimationFrame = window[`${e[i]  }RequestAnimationFrame`]),
          (window.cancelAnimationFrame =
            window[`${e[i]  }CancelAnimationFrame`] ||
            window[`${e[i]  }CancelRequestAnimationFrame`]);
      window.requestAnimationFrame ||
        (window.requestAnimationFrame = function(e, i) {
          const s = new Date().getTime();
            const r = Math.max(0, 16 - (s - t));
            const n = window.setTimeout(function() {
              e(s + r);
            }, r);
          return (t = s + r), n;
        }),
        window.cancelAnimationFrame ||
          (window.cancelAnimationFrame = function(t) {
            clearTimeout(t);
          });
    })(),
    (function() {
      Array.isArray ||
        (Array.isArray = function(t) {
          return Object.prototype.toString.call(t) === "[object Array]";
        });
    })();
  const e = function(t) {
      return (
        !(
          typeof t !== "object" ||
          t.nodeType ||
          (t !== null && t === t.window)
        ) &&
        !(
          t.constructor &&
          !Object.prototype.hasOwnProperty.call(
            t.constructor.prototype,
            "isPrototypeOf",
          )
        )
      );
    };
    var i = function(t) {
      let s; let r; let n;
      for (r = 1; r < arguments.length; r++) {
        s = arguments[r];
        for (n in s)
          s.hasOwnProperty(n) &&
            (s[n] && e(s[n])
              ? (t.hasOwnProperty(n) || (t[n] = {}), i(t[n], s[n]))
              : (t[n] = s[n]));
      }
      return t;
    };
    const s = function(t, e) {
      if (t && typeof t === "object") {
        let i;
        if (
          Array.isArray(t) ||
          (typeof t.length === "number" && t.length > 0 && t.length - 1 in t)
        ) {
          for (i = 0; i < t.length; i++) if (e(i, t[i]) === !1) return;
        } else if (Object.keys) {
          const s = Object.keys(t);
          for (i = 0; i < s.length; i++) if (e(s[i], t[s[i]]) === !1) return;
        } else
          for (i in t) if (t.hasOwnProperty(i) && e(i, t[i]) === !1) return;
      }
    };
    const r = function(t, e) {
      const i = document.createEvent("HTMLEvents");
      i.initEvent(e, !0, !0), t.dispatchEvent(i);
    };
    var n = function(t, e) {
      if (!(t instanceof Element))
        throw new Error("element should be an instance of Element");
      (e = i({}, n.defaults.options, e || {})),
        (this.element = t),
        (this.options = e),
        this.init();
    };
  (n.prototype = {
    constructor: n,
    init() {
      const t = this;
      this.ready = !1;
      const e = n.defaults.themes[this.options.theme || n.defaults.theme];
      if (!e) throw `Unknown theme ${  this.options.theme || n.defaults.theme}`;
      (this.schema = this.options.schema),
        (this.theme = new e()),
        (this.template = this.options.template),
        (this.refs = this.options.refs || {}),
        (this.uuid = 0),
        (this.__data = {});
      const i = n.defaults.iconlibs[this.options.iconlib || n.defaults.iconlib];
      i && (this.iconlib = new i()),
        (this.root_container = this.theme.getContainer()),
        this.element.appendChild(this.root_container),
        (this.translate = this.options.translate || n.defaults.translate),
        this._loadExternalRefs(this.schema, function() {
          t._getDefinitions(t.schema), (t.validator = new n.Validator(t));
          const e = t.getEditorClass(t.schema);
          (t.root = t.createEditor(e, {
            jsoneditor: t,
            schema: t.schema,
            required: !0,
            container: t.root_container,
          })),
            t.root.preBuild(),
            t.root.build(),
            t.root.postBuild(),
            t.options.startval && t.root.setValue(t.options.startval),
            (t.validation_results = t.validator.validate(t.root.getValue())),
            t.root.showValidationErrors(t.validation_results),
            (t.ready = !0),
            window.requestAnimationFrame(function() {
              t.ready &&
                ((t.validation_results = t.validator.validate(
                  t.root.getValue(),
                )),
                t.root.showValidationErrors(t.validation_results),
                t.trigger("ready"),
                t.trigger("change"));
            });
        });
    },
    getValue() {
      if (!this.ready)
        throw "JSON Editor not ready yet.  Listen for 'ready' event before getting the value";
      return this.root.getValue();
    },
    setValue(t) {
      if (!this.ready)
        throw "JSON Editor not ready yet.  Listen for 'ready' event before setting the value";
      return this.root.setValue(t), this;
    },
    validate(t) {
      if (!this.ready)
        throw "JSON Editor not ready yet.  Listen for 'ready' event before validating";
      return arguments.length === 1
        ? this.validator.validate(t)
        : this.validation_results;
    },
    destroy() {
      this.destroyed ||
        (this.ready &&
          ((this.schema = null),
          (this.options = null),
          this.root.destroy(),
          (this.root = null),
          (this.root_container = null),
          (this.validator = null),
          (this.validation_results = null),
          (this.theme = null),
          (this.iconlib = null),
          (this.template = null),
          (this.__data = null),
          (this.ready = !1),
          (this.element.innerHTML = ""),
          (this.destroyed = !0)));
    },
    on(t, e) {
      return (
        (this.callbacks = this.callbacks || {}),
        (this.callbacks[t] = this.callbacks[t] || []),
        this.callbacks[t].push(e),
        this
      );
    },
    off(t, e) {
      if (t && e) {
        (this.callbacks = this.callbacks || {}),
          (this.callbacks[t] = this.callbacks[t] || []);
        for (var i = [], s = 0; s < this.callbacks[t].length; s++)
          this.callbacks[t][s] !== e && i.push(this.callbacks[t][s]);
        this.callbacks[t] = i;
      } else
        t
          ? ((this.callbacks = this.callbacks || {}), (this.callbacks[t] = []))
          : (this.callbacks = {});
      return this;
    },
    trigger(t) {
      if (this.callbacks && this.callbacks[t] && this.callbacks[t].length)
        for (let e = 0; e < this.callbacks[t].length; e++)
          this.callbacks[t][e]();
      return this;
    },
    setOption(t, e) {
      if (t !== "show_errors")
        throw `Option ${ 
          t 
          } must be set during instantiation and cannot be changed later`;
      return (this.options.show_errors = e), this.onChange(), this;
    },
    getEditorClass(t) {
      let e;
      if (
        ((t = this.expandSchema(t)),
        s(n.defaults.resolvers, function(i, s) {
          const r = s(t);
          return r && n.defaults.editors[r] ? ((e = r), !1) : void 0;
        }),
        !e)
      )
        throw `Unknown editor for schema ${  JSON.stringify(t)}`;
      if (!n.defaults.editors[e]) throw `Unknown editor ${  e}`;
      return n.defaults.editors[e];
    },
    createEditor(t, e) {
      return (e = i({}, t.options || {}, e)), new t(e);
    },
    onChange() {
      if (this.ready && !this.firing_change) {
        this.firing_change = !0;
        const t = this;
        return (
          window.requestAnimationFrame(function() {
            (t.firing_change = !1),
              t.ready &&
                ((t.validation_results = t.validator.validate(
                  t.root.getValue(),
                )),
                t.options.show_errors !== "never"
                  ? t.root.showValidationErrors(t.validation_results)
                  : t.root.showValidationErrors([]),
                t.trigger("change"));
          }),
          this
        );
      }
    },
    compileTemplate(t, e) {
      e = e || n.defaults.template;
      let i;
      if (typeof e === "string") {
        if (!n.defaults.templates[e]) throw `Unknown template engine ${  e}`;
        if (((i = n.defaults.templates[e]()), !i))
          throw `Template engine ${  e  } missing required library.`;
      } else i = e;
      if (!i) throw "No template engine set";
      if (!i.compile) throw "Invalid template engine set";
      return i.compile(t);
    },
    _data(t, e, i) {
      if (arguments.length !== 3)
        return t.hasAttribute(`data-jsoneditor-${  e}`)
          ? this.__data[t.getAttribute(`data-jsoneditor-${  e}`)]
          : null;
      let s;
      t.hasAttribute(`data-jsoneditor-${  e}`)
        ? (s = t.getAttribute(`data-jsoneditor-${  e}`))
        : ((s = this.uuid++), t.setAttribute(`data-jsoneditor-${  e}`, s)),
        (this.__data[s] = i);
    },
    registerEditor(t) {
      return (
        (this.editors = this.editors || {}), (this.editors[t.path] = t), this
      );
    },
    unregisterEditor(t) {
      return (
        (this.editors = this.editors || {}), (this.editors[t.path] = null), this
      );
    },
    getEditor(t) {
      return this.editors ? this.editors[t] : void 0;
    },
    watch(t, e) {
      return (
        (this.watchlist = this.watchlist || {}),
        (this.watchlist[t] = this.watchlist[t] || []),
        this.watchlist[t].push(e),
        this
      );
    },
    unwatch(t, e) {
      if (!this.watchlist || !this.watchlist[t]) return this;
      if (!e) return (this.watchlist[t] = null), this;
      for (var i = [], s = 0; s < this.watchlist[t].length; s++)
        this.watchlist[t][s] !== e && i.push(this.watchlist[t][s]);
      return (this.watchlist[t] = i.length ? i : null), this;
    },
    notifyWatchers(t) {
      if (!this.watchlist || !this.watchlist[t]) return this;
      for (let e = 0; e < this.watchlist[t].length; e++) this.watchlist[t][e]();
    },
    isEnabled() {
      return !this.root || this.root.isEnabled();
    },
    enable() {
      this.root.enable();
    },
    disable() {
      this.root.disable();
    },
    _getDefinitions(t, e) {
      if (((e = e || "#/definitions/"), t.definitions))
        for (const i in t.definitions)
          t.definitions.hasOwnProperty(i) &&
            ((this.refs[e + i] = t.definitions[i]),
            t.definitions[i].definitions &&
              this._getDefinitions(t.definitions[i], `${e + i  }/definitions/`));
    },
    _getExternalRefs(t) {
      const e = {};
        const i = function(t) {
          for (const i in t) t.hasOwnProperty(i) && (e[i] = !0);
        };
      t.$ref &&
        typeof t.$ref !== "object" &&
        t.$ref.substr(0, 1) !== "#" &&
        !this.refs[t.$ref] &&
        (e[t.$ref] = !0);
      for (const s in t)
        if (t.hasOwnProperty(s))
          if (t[s] && typeof t[s] === "object" && Array.isArray(t[s]))
            for (let r = 0; r < t[s].length; r++)
              typeof t[s][r] === "object" && i(this._getExternalRefs(t[s][r]));
          else
            t[s] && typeof t[s] === "object" && i(this._getExternalRefs(t[s]));
      return e;
    },
    _loadExternalRefs(t, e) {
      const i = this;
        const r = this._getExternalRefs(t);
        let n = 0;
        let o = 0;
        let a = !1;
      s(r, function(t) {
        if (!i.refs[t]) {
          if (!i.options.ajax)
            throw `Must set ajax option to true to load external ref ${  t}`;
          (i.refs[t] = "loading"), o++;
          const s = new XMLHttpRequest();
          s.open("GET", t, !0),
            (s.onreadystatechange = function() {
              if (s.readyState == 4) {
                if (s.status !== 200)
                  throw (window.console.log(s),
                  `Failed to fetch ref via ajax- ${  t}`);
                let r;
                try {
                  r = JSON.parse(s.responseText);
                } catch (h) {
                  throw (window.console.log(h),
                  `Failed to parse external ref ${  t}`);
                }
                if (!r || typeof r !== "object")
                  throw `External ref does not contain a valid schema - ${  t}`;
                (i.refs[t] = r),
                  i._loadExternalRefs(r, function() {
                    n++, n >= o && !a && ((a = !0), e());
                  });
              }
            }),
            s.send();
        }
      }),
        o || e();
    },
    expandRefs(t) {
      for (t = i({}, t); t.$ref; ) {
        let e = t.$ref;
        delete t.$ref,
          this.refs[e] || (e = decodeURIComponent(e)),
          (t = this.extendSchemas(t, this.refs[e]));
      }
      return t;
    },
    expandSchema(t) {
      let e;
        const r = this;
        let n = i({}, t);
      if (
        (typeof t.type === "object" &&
          (Array.isArray(t.type)
            ? s(t.type, function(e, i) {
                typeof i === "object" && (t.type[e] = r.expandSchema(i));
              })
            : (t.type = r.expandSchema(t.type))),
        typeof t.disallow === "object" &&
          (Array.isArray(t.disallow)
            ? s(t.disallow, function(e, i) {
                typeof i === "object" && (t.disallow[e] = r.expandSchema(i));
              })
            : (t.disallow = r.expandSchema(t.disallow))),
        t.anyOf &&
          s(t.anyOf, function(e, i) {
            t.anyOf[e] = r.expandSchema(i);
          }),
        t.dependencies &&
          s(t.dependencies, function(e, i) {
            typeof i !== "object" ||
              Array.isArray(i) ||
              (t.dependencies[e] = r.expandSchema(i));
          }),
        t.not && (t.not = this.expandSchema(t.not)),
        t.allOf)
      ) {
        for (e = 0; e < t.allOf.length; e++)
          n = this.extendSchemas(n, this.expandSchema(t.allOf[e]));
        delete n.allOf;
      }
      if (t.extends) {
        if (Array.isArray(t.extends))
          for (e = 0; e < t.extends.length; e++)
            n = this.extendSchemas(n, this.expandSchema(t.extends[e]));
        else n = this.extendSchemas(n, this.expandSchema(t.extends));
        delete n.extends;
      }
      if (t.oneOf) {
        const o = i({}, n);
        for (delete o.oneOf, e = 0; e < t.oneOf.length; e++)
          n.oneOf[e] = this.extendSchemas(this.expandSchema(t.oneOf[e]), o);
      }
      return this.expandRefs(n);
    },
    extendSchemas(t, e) {
      (t = i({}, t)), (e = i({}, e));
      const r = this;
        const n = {};
      return (
        s(t, function(t, i) {
          typeof e[t] !== "undefined"
            ? t === "required" && typeof i === "object" && Array.isArray(i)
              ? (n.required = i.concat(e[t]).reduce(function(t, e) {
                  return t.indexOf(e) < 0 && t.push(e), t;
                }, []))
              : t !== "type" || (typeof i !== "string" && !Array.isArray(i))
              ? typeof i === "object" && Array.isArray(i)
                ? (n[t] = i.filter(function(i) {
                    return e[t].indexOf(i) !== -1;
                  }))
                : typeof i === "object" && i !== null
                ? (n[t] = r.extendSchemas(i, e[t]))
                : (n[t] = i)
              : (typeof i === "string" && (i = [i]),
                typeof e.type === "string" && (e.type = [e.type]),
                (n.type = i.filter(function(t) {
                  return e.type.indexOf(t) !== -1;
                })),
                n.type.length === 1 &&
                  typeof n.type[0] === "string" &&
                  (n.type = n.type[0]))
            : (n[t] = i);
        }),
        s(e, function(e, i) {
          typeof t[e] === "undefined" && (n[e] = i);
        }),
        n
      );
    },
  }),
    (n.defaults = {
      themes: {},
      templates: {},
      iconlibs: {},
      editors: {},
      languages: {},
      resolvers: [],
      custom_validators: [],
    }),
    (n.Validator = t.extend({
      init(t, e) {
        (this.jsoneditor = t),
          (this.schema = e || this.jsoneditor.schema),
          (this.options = {}),
          (this.translate = this.jsoneditor.translate || n.defaults.translate);
      },
      validate(t) {
        return this._validateSchema(this.schema, t);
      },
      _validateSchema(t, e, r) {
        let o;
          let a;
          let h;
          const l = this;
          let d = [];
          const u = JSON.stringify(e);
        if (
          ((r = r || "root"),
          (t = i({}, this.jsoneditor.expandRefs(t))),
          t.required && t.required === !0)
        ) {
          if (typeof e === "undefined")
            return (
              d.push({
                path: r,
                property: "required",
                message: this.translate("error_notset"),
              }),
              d
            );
        } else if (typeof e === "undefined") {
          if (!this.jsoneditor.options.required_by_default) return d;
          d.push({
            path: r,
            property: "required",
            message: this.translate("error_notset"),
          });
        }
        if (t.enum) {
          for (o = !1, a = 0; a < t.enum.length; a++)
            u === JSON.stringify(t.enum[a]) && (o = !0);
          o ||
            d.push({
              path: r,
              property: "enum",
              message: this.translate("error_enum"),
            });
        }
        if (t.extends)
          for (a = 0; a < t.extends.length; a++)
            d = d.concat(this._validateSchema(t.extends[a], e, r));
        if (t.allOf)
          for (a = 0; a < t.allOf.length; a++)
            d = d.concat(this._validateSchema(t.allOf[a], e, r));
        if (t.anyOf) {
          for (o = !1, a = 0; a < t.anyOf.length; a++)
            if (!this._validateSchema(t.anyOf[a], e, r).length) {
              o = !0;
              break;
            }
          o ||
            d.push({
              path: r,
              property: "anyOf",
              message: this.translate("error_anyOf"),
            });
        }
        if (t.oneOf) {
          o = 0;
          let p = [];
          for (a = 0; a < t.oneOf.length; a++) {
            const c = this._validateSchema(t.oneOf[a], e, r);
            for (c.length || o++, h = 0; h < c.length; h++)
              c[h].path = `${r  }.oneOf[${  a  }]${  c[h].path.substr(r.length)}`;
            p = p.concat(c);
          }
          o !== 1 &&
            (d.push({
              path: r,
              property: "oneOf",
              message: this.translate("error_oneOf", [o]),
            }),
            (d = d.concat(p)));
        }
        if (
          (t.not &&
            (this._validateSchema(t.not, e, r).length ||
              d.push({
                path: r,
                property: "not",
                message: this.translate("error_not"),
              })),
          t.type)
        )
          if (Array.isArray(t.type)) {
            for (o = !1, a = 0; a < t.type.length; a++)
              if (this._checkType(t.type[a], e)) {
                o = !0;
                break;
              }
            o ||
              d.push({
                path: r,
                property: "type",
                message: this.translate("error_type_union"),
              });
          } else
            this._checkType(t.type, e) ||
              d.push({
                path: r,
                property: "type",
                message: this.translate("error_type", [t.type]),
              });
        if (t.disallow)
          if (Array.isArray(t.disallow)) {
            for (o = !0, a = 0; a < t.disallow.length; a++)
              if (this._checkType(t.disallow[a], e)) {
                o = !1;
                break;
              }
            o ||
              d.push({
                path: r,
                property: "disallow",
                message: this.translate("error_disallow_union"),
              });
          } else
            this._checkType(t.disallow, e) &&
              d.push({
                path: r,
                property: "disallow",
                message: this.translate("error_disallow", [t.disallow]),
              });
        if (typeof e === "number")
          (t.multipleOf || t.divisibleBy) &&
            ((o = e / (t.multipleOf || t.divisibleBy)),
            o !== Math.floor(o) &&
              d.push({
                path: r,
                property: t.multipleOf ? "multipleOf" : "divisibleBy",
                message: this.translate("error_multipleOf", [
                  t.multipleOf || t.divisibleBy,
                ]),
              })),
            t.hasOwnProperty("maximum") &&
              (t.exclusiveMaximum && e >= t.maximum
                ? d.push({
                    path: r,
                    property: "maximum",
                    message: this.translate("error_maximum_excl", [t.maximum]),
                  })
                : !t.exclusiveMaximum &&
                  e > t.maximum &&
                  d.push({
                    path: r,
                    property: "maximum",
                    message: this.translate("error_maximum_incl", [t.maximum]),
                  })),
            t.hasOwnProperty("minimum") &&
              (t.exclusiveMinimum && e <= t.minimum
                ? d.push({
                    path: r,
                    property: "minimum",
                    message: this.translate("error_minimum_excl", [t.minimum]),
                  })
                : !t.exclusiveMinimum &&
                  e < t.minimum &&
                  d.push({
                    path: r,
                    property: "minimum",
                    message: this.translate("error_minimum_incl", [t.minimum]),
                  }));
        else if (typeof e === "string")
          t.maxLength &&
            (`${e  }`).length > t.maxLength &&
            d.push({
              path: r,
              property: "maxLength",
              message: this.translate("error_maxLength", [t.maxLength]),
            }),
            t.minLength &&
              (`${e  }`).length < t.minLength &&
              d.push({
                path: r,
                property: "minLength",
                message: this.translate(
                  t.minLength === 1 ? "error_notempty" : "error_minLength",
                  [t.minLength],
                ),
              }),
            t.pattern &&
              (new RegExp(t.pattern).test(e) ||
                d.push({
                  path: r,
                  property: "pattern",
                  message: this.translate("error_pattern"),
                }));
        else if (typeof e === "object" && e !== null && Array.isArray(e)) {
          if (t.items)
            if (Array.isArray(t.items))
              for (a = 0; a < e.length; a++)
                if (t.items[a])
                  d = d.concat(
                    this._validateSchema(t.items[a], e[a], `${r  }.${  a}`),
                  );
                else {
                  if (t.additionalItems === !0) break;
                  if (!t.additionalItems) {
                    if (t.additionalItems === !1) {
                      d.push({
                        path: r,
                        property: "additionalItems",
                        message: this.translate("error_additionalItems"),
                      });
                      break;
                    }
                    break;
                  }
                  d = d.concat(
                    this._validateSchema(t.additionalItems, e[a], `${r  }.${  a}`),
                  );
                }
            else
              for (a = 0; a < e.length; a++)
                d = d.concat(this._validateSchema(t.items, e[a], `${r  }.${  a}`));
          if (
            (t.maxItems &&
              e.length > t.maxItems &&
              d.push({
                path: r,
                property: "maxItems",
                message: this.translate("error_maxItems", [t.maxItems]),
              }),
            t.minItems &&
              e.length < t.minItems &&
              d.push({
                path: r,
                property: "minItems",
                message: this.translate("error_minItems", [t.minItems]),
              }),
            t.uniqueItems)
          ) {
            const m = {};
            for (a = 0; a < e.length; a++) {
              if (((o = JSON.stringify(e[a])), m[o])) {
                d.push({
                  path: r,
                  property: "uniqueItems",
                  message: this.translate("error_uniqueItems"),
                });
                break;
              }
              m[o] = !0;
            }
          }
        } else if (typeof e === "object" && e !== null) {
          if (t.maxProperties) {
            o = 0;
            for (a in e) e.hasOwnProperty(a) && o++;
            o > t.maxProperties &&
              d.push({
                path: r,
                property: "maxProperties",
                message: this.translate("error_maxProperties", [
                  t.maxProperties,
                ]),
              });
          }
          if (t.minProperties) {
            o = 0;
            for (a in e) e.hasOwnProperty(a) && o++;
            o < t.minProperties &&
              d.push({
                path: r,
                property: "minProperties",
                message: this.translate("error_minProperties", [
                  t.minProperties,
                ]),
              });
          }
          if (t.required && Array.isArray(t.required))
            for (a = 0; a < t.required.length; a++)
              typeof e[t.required[a]] === "undefined" &&
                d.push({
                  path: r,
                  property: "required",
                  message: this.translate("error_required", [t.required[a]]),
                });
          const f = {};
          if (t.properties)
            for (a in t.properties)
              t.properties.hasOwnProperty(a) &&
                ((f[a] = !0),
                (d = d.concat(
                  this._validateSchema(t.properties[a], e[a], `${r  }.${  a}`),
                )));
          if (t.patternProperties)
            for (a in t.patternProperties)
              if (t.patternProperties.hasOwnProperty(a)) {
                const g = new RegExp(a);
                for (h in e)
                  e.hasOwnProperty(h) &&
                    g.test(h) &&
                    ((f[h] = !0),
                    (d = d.concat(
                      this._validateSchema(
                        t.patternProperties[a],
                        e[h],
                        `${r  }.${  h}`,
                      ),
                    )));
              }
          if (
            (typeof t.additionalProperties !== "undefined" ||
              !this.jsoneditor.options.no_additional_properties ||
              t.oneOf ||
              t.anyOf ||
              (t.additionalProperties = !1),
            typeof t.additionalProperties !== "undefined")
          )
            for (a in e)
              if (e.hasOwnProperty(a) && !f[a]) {
                if (!t.additionalProperties) {
                  d.push({
                    path: r,
                    property: "additionalProperties",
                    message: this.translate("error_additional_properties", [a]),
                  });
                  break;
                }
                if (t.additionalProperties === !0) break;
                d = d.concat(
                  this._validateSchema(
                    t.additionalProperties,
                    e[a],
                    `${r  }.${  a}`,
                  ),
                );
              }
          if (t.dependencies)
            for (a in t.dependencies)
              if (
                t.dependencies.hasOwnProperty(a) &&
                typeof e[a] !== "undefined"
              )
                if (Array.isArray(t.dependencies[a]))
                  for (h = 0; h < t.dependencies[a].length; h++)
                    typeof e[t.dependencies[a][h]] === "undefined" &&
                      d.push({
                        path: r,
                        property: "dependencies",
                        message: this.translate("error_dependency", [
                          t.dependencies[a][h],
                        ]),
                      });
                else
                  d = d.concat(this._validateSchema(t.dependencies[a], e, r));
        }
        return (
          s(n.defaults.custom_validators, function(i, s) {
            d = d.concat(s.call(l, t, e, r));
          }),
          d
        );
      },
      _checkType(t, e) {
        return typeof t === "string"
          ? t === "string"
            ? typeof e === "string"
            : t === "number"
            ? typeof e === "number"
            : t === "integer"
            ? typeof e === "number" && e === Math.floor(e)
            : t === "boolean"
            ? typeof e === "boolean"
            : t === "array"
            ? Array.isArray(e)
            : t === "object"
            ? e !== null && !Array.isArray(e) && typeof e === "object"
            : t !== "null" || e === null
          : !this._validateSchema(t, e).length;
      },
    })),
    (n.AbstractEditor = t.extend({
      onChildEditorChange(t) {
        this.onChange(!0);
      },
      notify() {
        this.jsoneditor.notifyWatchers(this.path);
      },
      change() {
        this.parent
          ? this.parent.onChildEditorChange(this)
          : this.jsoneditor.onChange();
      },
      onChange(t) {
        this.notify(),
          this.watch_listener && this.watch_listener(),
          t && this.change();
      },
      register() {
        this.jsoneditor.registerEditor(this), this.onChange();
      },
      unregister() {
        this.jsoneditor && this.jsoneditor.unregisterEditor(this);
      },
      getNumColumns() {
        return 12;
      },
      init(t) {
        (this.jsoneditor = t.jsoneditor),
          (this.theme = this.jsoneditor.theme),
          (this.template_engine = this.jsoneditor.template),
          (this.iconlib = this.jsoneditor.iconlib),
          (this.original_schema = t.schema),
          (this.schema = this.jsoneditor.expandSchema(this.original_schema)),
          (this.options = i({}, this.options || {}, t.schema.options || {}, t)),
          t.path || this.schema.id || (this.schema.id = "root"),
          (this.path = t.path || "root"),
          (this.formname =
            t.formname || this.path.replace(/\.([^.]+)/g, "[$1]")),
          this.jsoneditor.options.form_name_root &&
            (this.formname = this.formname.replace(
              /^root\[/,
              `${this.jsoneditor.options.form_name_root  }[`,
            )),
          (this.key = this.path.split(".").pop()),
          (this.parent = t.parent),
          (this.link_watchers = []),
          t.container && this.setContainer(t.container);
      },
      setContainer(t) {
        (this.container = t),
          this.schema.id &&
            this.container.setAttribute("data-schemaid", this.schema.id),
          this.schema.type &&
            typeof this.schema.type === "string" &&
            this.container.setAttribute("data-schematype", this.schema.type),
          this.container.setAttribute("data-schemapath", this.path);
      },
      preBuild() {},
      build() {},
      postBuild() {
        this.setupWatchListeners(),
          this.addLinks(),
          this.setValue(this.getDefault(), !0),
          this.updateHeaderText(),
          this.register(),
          this.onWatchedFieldChange();
      },
      setupWatchListeners() {
        const t = this;
        if (
          ((this.watched = {}),
          this.schema.vars && (this.schema.watch = this.schema.vars),
          (this.watched_values = {}),
          (this.watch_listener = function() {
            t.refreshWatchedFieldValues() && t.onWatchedFieldChange();
          }),
          this.register(),
          this.schema.hasOwnProperty("watch"))
        ) {
          let e; let i; let s; let r; let n;
          for (const o in this.schema.watch)
            if (this.schema.watch.hasOwnProperty(o)) {
              if (
                ((e = this.schema.watch[o]),
                Array.isArray(e)
                  ? (i = [e[0]].concat(e[1].split(".")))
                  : ((i = e.split(".")),
                    t.theme.closest(
                      t.container,
                      `[data-schemaid="${  i[0]  }"]`,
                    ) || i.unshift("#")),
                (s = i.shift()),
                s === "#" && (s = t.jsoneditor.schema.id || "root"),
                (r = t.theme.closest(
                  t.container,
                  `[data-schemaid="${  s  }"]`,
                )),
                !r)
              )
                throw `Could not find ancestor node with id ${  s}`;
              (n = `${r.getAttribute("data-schemapath")  }.${  i.join(".")}`),
                t.jsoneditor.watch(n, t.watch_listener),
                (t.watched[o] = n);
            }
        }
        this.schema.headerTemplate &&
          (this.header_template = this.jsoneditor.compileTemplate(
            this.schema.headerTemplate,
            this.template_engine,
          ));
      },
      addLinks() {
        if (
          !this.no_link_holder &&
          ((this.link_holder = this.theme.getLinksHolder()),
          this.container.appendChild(this.link_holder),
          this.schema.links)
        )
          for (let t = 0; t < this.schema.links.length; t++)
            this.addLink(this.getLink(this.schema.links[t]));
      },
      getButton(t, e, i) {
        const s = `json-editor-btn-${  e}`;
        (e = this.iconlib ? this.iconlib.getIcon(e) : null),
          !e && i && ((t = i), (i = null));
        const r = this.theme.getButton(t, e, i);
        return (r.className += ` ${  s  } `), r;
      },
      setButtonText(t, e, i, s) {
        return (
          (i = this.iconlib ? this.iconlib.getIcon(i) : null),
          !i && s && ((e = s), (s = null)),
          this.theme.setButtonText(t, e, i, s)
        );
      },
      addLink(t) {
        this.link_holder && this.link_holder.appendChild(t);
      },
      getLink(t) {
        let e;
          let i;
          const s = t.mediaType || "application/javascript";
          const r = s.split("/")[0];
          const n = this.jsoneditor.compileTemplate(t.href, this.template_engine);
        if (r === "image") {
          (e = this.theme.getBlockLinkHolder()),
            (i = document.createElement("a")),
            i.setAttribute("target", "_blank");
          const o = document.createElement("img");
          this.theme.createImageLink(e, i, o),
            this.link_watchers.push(function(e) {
              const s = n(e);
              i.setAttribute("href", s),
                i.setAttribute("title", t.rel || s),
                o.setAttribute("src", s);
            });
        } else if (["audio", "video"].indexOf(r) >= 0) {
          (e = this.theme.getBlockLinkHolder()),
            (i = this.theme.getBlockLink()),
            i.setAttribute("target", "_blank");
          const a = document.createElement(r);
          a.setAttribute("controls", "controls"),
            this.theme.createMediaLink(e, i, a),
            this.link_watchers.push(function(e) {
              const s = n(e);
              i.setAttribute("href", s),
                (i.textContent = t.rel || s),
                a.setAttribute("src", s);
            });
        } else
          (e = this.theme.getBlockLink()),
            e.setAttribute("target", "_blank"),
            (e.textContent = t.rel),
            this.link_watchers.push(function(i) {
              const s = n(i);
              e.setAttribute("href", s), (e.textContent = t.rel || s);
            });
        return e;
      },
      refreshWatchedFieldValues() {
        if (this.watched_values) {
          const t = {};
            let e = !1;
            const i = this;
          if (this.watched) {
            let s; let r;
            for (const n in this.watched)
              this.watched.hasOwnProperty(n) &&
                ((r = i.jsoneditor.getEditor(this.watched[n])),
                (s = r ? r.getValue() : null),
                i.watched_values[n] !== s && (e = !0),
                (t[n] = s));
          }
          return (
            (t.self = this.getValue()),
            this.watched_values.self !== t.self && (e = !0),
            (this.watched_values = t),
            e
          );
        }
      },
      getWatchedFieldValues() {
        return this.watched_values;
      },
      updateHeaderText() {
        if (this.header)
          if (this.header.children.length) {
            for (let t = 0; t < this.header.childNodes.length; t++)
              if (this.header.childNodes[t].nodeType === 3) {
                this.header.childNodes[t].nodeValue = this.getHeaderText();
                break;
              }
          } else this.header.textContent = this.getHeaderText();
      },
      getHeaderText(t) {
        return this.header_text
          ? this.header_text
          : t
          ? this.schema.title
          : this.getTitle();
      },
      onWatchedFieldChange() {
        let t;
        if (this.header_template) {
          t = i(this.getWatchedFieldValues(), {
            key: this.key,
            i: this.key,
            i0: 1 * this.key,
            i1: 1 * this.key + 1,
            title: this.getTitle(),
          });
          const e = this.header_template(t);
          e !== this.header_text &&
            ((this.header_text = e), this.updateHeaderText(), this.notify());
        }
        if (this.link_watchers.length) {
          t = this.getWatchedFieldValues();
          for (let s = 0; s < this.link_watchers.length; s++)
            this.link_watchers[s](t);
        }
      },
      setValue(t) {
        this.value = t;
      },
      getValue() {
        return this.value;
      },
      refreshValue() {},
      getChildEditors() {
        return !1;
      },
      destroy() {
        const t = this;
        this.unregister(this),
          s(this.watched, function(e, i) {
            t.jsoneditor.unwatch(i, t.watch_listener);
          }),
          (this.watched = null),
          (this.watched_values = null),
          (this.watch_listener = null),
          (this.header_text = null),
          (this.header_template = null),
          (this.value = null),
          this.container &&
            this.container.parentNode &&
            this.container.parentNode.removeChild(this.container),
          (this.container = null),
          (this.jsoneditor = null),
          (this.schema = null),
          (this.path = null),
          (this.key = null),
          (this.parent = null);
      },
      getDefault() {
        if (this.schema.default) return this.schema.default;
        if (this.schema.enum) return this.schema.enum[0];
        let t = this.schema.type || this.schema.oneOf;
        if (
          (t && Array.isArray(t) && (t = t[0]),
          t && typeof t === "object" && (t = t.type),
          t && Array.isArray(t) && (t = t[0]),
          typeof t === "string")
        ) {
          if (t === "number") return 0;
          if (t === "boolean") return !1;
          if (t === "integer") return 0;
          if (t === "string") return "";
          if (t === "object") return {};
          if (t === "array") return [];
        }
        return null;
      },
      getTitle() {
        return this.schema.title || this.key;
      },
      enable() {
        this.disabled = !1;
      },
      disable() {
        this.disabled = !0;
      },
      isEnabled() {
        return !this.disabled;
      },
      isRequired() {
        return typeof this.schema.required === "boolean"
          ? this.schema.required
          : this.parent &&
            this.parent.schema &&
            Array.isArray(this.parent.schema.required)
          ? this.parent.schema.required.indexOf(this.key) > -1
          : !!this.jsoneditor.options.required_by_default;
      },
      getDisplayText(t) {
        const e = [];
          const i = {};
        s(t, function(t, e) {
          e.title && ((i[e.title] = i[e.title] || 0), i[e.title]++),
            e.description &&
              ((i[e.description] = i[e.description] || 0), i[e.description]++),
            e.format && ((i[e.format] = i[e.format] || 0), i[e.format]++),
            e.type && ((i[e.type] = i[e.type] || 0), i[e.type]++);
        }),
          s(t, function(t, s) {
            let r;
            (r =
              typeof s === "string"
                ? s
                : s.title && i[s.title] <= 1
                ? s.title
                : s.format && i[s.format] <= 1
                ? s.format
                : s.type && i[s.type] <= 1
                ? s.type
                : s.description && i[s.description] <= 1
                ? s.descripton
                : s.title
                ? s.title
                : s.format
                ? s.format
                : s.type
                ? s.type
                : s.description
                ? s.description
                : JSON.stringify(s).length < 50
                ? JSON.stringify(s)
                : "type"),
              e.push(r);
          });
        const r = {};
        return (
          s(e, function(t, s) {
            (r[s] = r[s] || 0), r[s]++, i[s] > 1 && (e[t] = `${s  } ${  r[s]}`);
          }),
          e
        );
      },
      getOption(t) {
        try {
          throw "getOption is deprecated";
        } catch (e) {
          window.console.error(e);
        }
        return this.options[t];
      },
      showValidationErrors(t) {},
    })),
    (n.defaults.editors.null = n.AbstractEditor.extend({
      getValue() {
        return null;
      },
      setValue() {
        this.onChange();
      },
      getNumColumns() {
        return 2;
      },
    })),
    (n.defaults.editors.string = n.AbstractEditor.extend({
      register() {
        this._super(),
          this.input && this.input.setAttribute("name", this.formname);
      },
      unregister() {
        this._super(), this.input && this.input.removeAttribute("name");
      },
      setValue(t, e, i) {
        if (
          (!this.template || i) &&
          (t === null || typeof t === "undefined"
            ? (t = "")
            : typeof t === "object"
            ? (t = JSON.stringify(t))
            : typeof t !== "string" && (t = `${  t}`),
          t !== this.serialized)
        ) {
          const s = this.sanitize(t);
          if (this.input.value !== s) {
            (this.input.value = s),
              this.sceditor_instance
                ? this.sceditor_instance.val(s)
                : this.epiceditor
                ? this.epiceditor.importFile(null, s)
                : this.ace_editor && this.ace_editor.setValue(s);
            const r = i || this.getValue() !== t;
            this.refreshValue(),
              e
                ? (this.is_dirty = !1)
                : this.jsoneditor.options.show_errors === "change" &&
                  (this.is_dirty = !0),
              this.adjust_height && this.adjust_height(this.input),
              this.onChange(r);
          }
        }
      },
      getNumColumns() {
        let t;
          const e = Math.ceil(
            Math.max(
              this.getTitle().length,
              this.schema.maxLength || 0,
              this.schema.minLength || 0,
            ) / 5,
          );
        return (
          (t =
            this.input_type === "textarea"
              ? 6
              : ["text", "email"].indexOf(this.input_type) >= 0
              ? 4
              : 2),
          Math.min(12, Math.max(e, t))
        );
      },
      build() {
        const t = this;
        if (
          (this.options.compact ||
            (this.header = this.label = this.theme.getFormInputLabel(
              this.getTitle(),
              this.isRequired(),
            )),
          this.schema.description &&
            (this.description = this.theme.getFormInputDescription(
              this.schema.description,
            )),
          (this.format = this.schema.format),
          !this.format &&
            this.schema.media &&
            this.schema.media.type &&
            (this.format = this.schema.media.type.replace(
              /(^(application|text)\/(x-)?(script\.)?)|(-source$)/g,
              "",
            )),
          !this.format &&
            this.options.default_format &&
            (this.format = this.options.default_format),
          this.options.format && (this.format = this.options.format),
          this.format)
        )
          if (this.format === "textarea")
            (this.input_type = "textarea"),
              (this.input = this.theme.getTextareaInput());
          else if (this.format === "range") {
            this.input_type = "range";
            let e = this.schema.minimum || 0;
              let i = this.schema.maximum || Math.max(100, e + 1);
              let s = 1;
            this.schema.multipleOf &&
              (e % this.schema.multipleOf &&
                (e =
                  Math.ceil(e / this.schema.multipleOf) *
                  this.schema.multipleOf),
              i % this.schema.multipleOf &&
                (i =
                  Math.floor(i / this.schema.multipleOf) *
                  this.schema.multipleOf),
              (s = this.schema.multipleOf)),
              (this.input = this.theme.getRangeInput(e, i, s));
          } else
            [
              "actionscript",
              "batchfile",
              "bbcode",
              "c",
              "c++",
              "cpp",
              "coffee",
              "csharp",
              "css",
              "dart",
              "django",
              "ejs",
              "erlang",
              "golang",
              "handlebars",
              "haskell",
              "haxe",
              "html",
              "ini",
              "jade",
              "java",
              "javascript",
              "json",
              "less",
              "lisp",
              "lua",
              "makefile",
              "markdown",
              "matlab",
              "mysql",
              "objectivec",
              "pascal",
              "perl",
              "pgsql",
              "php",
              "python",
              "r",
              "ruby",
              "sass",
              "scala",
              "scss",
              "smarty",
              "sql",
              "stylus",
              "svg",
              "twig",
              "vbscript",
              "xml",
              "yaml",
            ].indexOf(this.format) >= 0
              ? ((this.input_type = this.format),
                (this.source_code = !0),
                (this.input = this.theme.getTextareaInput()))
              : ((this.input_type = this.format),
                (this.input = this.theme.getFormInputField(this.input_type)));
        else
          (this.input_type = "text"),
            (this.input = this.theme.getFormInputField(this.input_type));
        typeof this.schema.maxLength !== "undefined" &&
          this.input.setAttribute("maxlength", this.schema.maxLength),
          typeof this.schema.pattern !== "undefined"
            ? this.input.setAttribute("pattern", this.schema.pattern)
            : typeof this.schema.minLength !== "undefined" &&
              this.input.setAttribute(
                "pattern",
                `.{${  this.schema.minLength  },}`,
              ),
          this.options.compact
            ? (this.container.className += " compact")
            : this.options.input_width &&
              (this.input.style.width = this.options.input_width),
          (this.schema.readOnly ||
            this.schema.readonly ||
            this.schema.template) &&
            ((this.always_disabled = !0), (this.input.disabled = !0)),
          this.input.addEventListener("change", function(e) {
            if ((e.preventDefault(), e.stopPropagation(), t.schema.template))
              return void (this.value = t.value);
            const i = this.value;
              const s = t.sanitize(i);
            i !== s && (this.value = s),
              (t.is_dirty = !0),
              t.refreshValue(),
              t.onChange(!0);
          }),
          this.options.input_height &&
            (this.input.style.height = this.options.input_height),
          this.options.expand_height &&
            ((this.adjust_height = function(t) {
              if (t) {
                let e;
                  let i = t.offsetHeight;
                if (t.offsetHeight < t.scrollHeight)
                  for (
                    e = 0;
                    t.offsetHeight < t.scrollHeight + 3 && !(e > 100);

                  )
                    e++, i++, (t.style.height = `${i  }px`);
                else {
                  for (
                    e = 0;
                    t.offsetHeight >= t.scrollHeight + 3 && !(e > 100);

                  )
                    e++, i--, (t.style.height = `${i  }px`);
                  t.style.height = `${i + 1  }px`;
                }
              }
            }),
            this.input.addEventListener("keyup", function(e) {
              t.adjust_height(this);
            }),
            this.input.addEventListener("change", function(e) {
              t.adjust_height(this);
            }),
            this.adjust_height()),
          this.format &&
            this.input.setAttribute("data-schemaformat", this.format),
          (this.control = this.theme.getFormControl(
            this.label,
            this.input,
            this.description,
          )),
          this.container.appendChild(this.control),
          window.requestAnimationFrame(function() {
            t.input.parentNode && t.afterInputReady(),
              t.adjust_height && t.adjust_height(t.input);
          }),
          this.schema.template
            ? ((this.template = this.jsoneditor.compileTemplate(
                this.schema.template,
                this.template_engine,
              )),
              this.refreshValue())
            : this.refreshValue();
      },
      enable() {
        this.always_disabled || (this.input.disabled = !1), this._super();
      },
      disable() {
        (this.input.disabled = !0), this._super();
      },
      afterInputReady() {
        let t;
          const e = this;
        if (this.source_code)
          if (
            this.options.wysiwyg &&
            ["html", "bbcode"].indexOf(this.input_type) >= 0 &&
            window.jQuery &&
            window.jQuery.fn &&
            window.jQuery.fn.sceditor
          )
            (t = i(
              {},
              {
                plugins: e.input_type === "html" ? "xhtml" : "bbcode",
                emoticonsEnabled: !1,
                width: "100%",
                height: 300,
              },
              n.plugins.sceditor,
              e.options.sceditor_options || {},
            )),
              window.jQuery(e.input).sceditor(t),
              (e.sceditor_instance = window
                .jQuery(e.input)
                .sceditor("instance")),
              e.sceditor_instance.blur(function() {
                const t = window.jQuery(
                  `<div>${  e.sceditor_instance.val()  }</div>`,
                );
                window
                  .jQuery(
                    "#sceditor-start-marker,#sceditor-end-marker,.sceditor-nlf",
                    t,
                  )
                  .remove(),
                  (e.input.value = t.html()),
                  (e.value = e.input.value),
                  (e.is_dirty = !0),
                  e.onChange(!0);
              });
          else if (this.input_type === "markdown" && window.EpicEditor)
            (this.epiceditor_container = document.createElement("div")),
              this.input.parentNode.insertBefore(
                this.epiceditor_container,
                this.input,
              ),
              (this.input.style.display = "none"),
              (t = i({}, n.plugins.epiceditor, {
                container: this.epiceditor_container,
                clientSideStorage: !1,
              })),
              (this.epiceditor = new window.EpicEditor(t).load()),
              this.epiceditor.importFile(null, this.getValue()),
              this.epiceditor.on("update", function() {
                const t = e.epiceditor.exportFile();
                (e.input.value = t),
                  (e.value = t),
                  (e.is_dirty = !0),
                  e.onChange(!0);
              });
          else if (window.ace) {
            let s = this.input_type;
            (s === "cpp" || s === "c++" || s === "c") && (s = "c_cpp"),
              (this.ace_container = document.createElement("div")),
              (this.ace_container.style.width = "100%"),
              (this.ace_container.style.position = "relative"),
              (this.ace_container.style.height = "400px"),
              this.input.parentNode.insertBefore(
                this.ace_container,
                this.input,
              ),
              (this.input.style.display = "none"),
              (this.ace_editor = window.ace.edit(this.ace_container)),
              this.ace_editor.setValue(this.getValue()),
              n.plugins.ace.theme &&
                this.ace_editor.setTheme(`ace/theme/${  n.plugins.ace.theme}`),
              (s = window.ace.require(`ace/mode/${  s}`)),
              s && this.ace_editor.getSession().setMode(new s.Mode()),
              this.ace_editor.on("change", function() {
                const t = e.ace_editor.getValue();
                (e.input.value = t),
                  e.refreshValue(),
                  (e.is_dirty = !0),
                  e.onChange(!0);
              });
          }
        e.theme.afterInputReady(e.input);
      },
      refreshValue() {
        (this.value = this.input.value),
          typeof this.value !== "string" && (this.value = ""),
          (this.serialized = this.value);
      },
      destroy() {
        this.sceditor_instance
          ? this.sceditor_instance.destroy()
          : this.epiceditor
          ? this.epiceditor.unload()
          : this.ace_editor && this.ace_editor.destroy(),
          (this.template = null),
          this.input &&
            this.input.parentNode &&
            this.input.parentNode.removeChild(this.input),
          this.label &&
            this.label.parentNode &&
            this.label.parentNode.removeChild(this.label),
          this.description &&
            this.description.parentNode &&
            this.description.parentNode.removeChild(this.description),
          this._super();
      },
      sanitize(t) {
        return t;
      },
      onWatchedFieldChange() {
        let t;
        this.template &&
          ((t = this.getWatchedFieldValues()),
          this.setValue(this.template(t), !1, !0)),
          this._super();
      },
      showValidationErrors(t) {
        const e = this;
        if (this.jsoneditor.options.show_errors === "always");
        else if (
          !this.is_dirty &&
          this.previous_error_setting === this.jsoneditor.options.show_errors
        )
          return;
        this.previous_error_setting = this.jsoneditor.options.show_errors;
        const i = [];
        s(t, function(t, s) {
          s.path === e.path && i.push(s.message);
        }),
          i.length
            ? this.theme.addInputError(this.input, `${i.join(". ")  }.`)
            : this.theme.removeInputError(this.input);
      },
    })),
    (n.defaults.editors.number = n.defaults.editors.string.extend({
      sanitize(t) {
        return (`${t  }`).replace(/[^0-9\.\-eE]/g, "");
      },
      getNumColumns() {
        return 2;
      },
      getValue() {
        return 1 * this.value;
      },
    })),
    (n.defaults.editors.integer = n.defaults.editors.number.extend({
      sanitize(t) {
        return (t += ""), t.replace(/[^0-9\-]/g, "");
      },
      getNumColumns() {
        return 2;
      },
    })),
    (n.defaults.editors.object = n.AbstractEditor.extend({
      getDefault() {
        return i({}, this.schema.default || {});
      },
      getChildEditors() {
        return this.editors;
      },
      register() {
        if ((this._super(), this.editors))
          for (const t in this.editors)
            this.editors.hasOwnProperty(t) && this.editors[t].register();
      },
      unregister() {
        if ((this._super(), this.editors))
          for (const t in this.editors)
            this.editors.hasOwnProperty(t) && this.editors[t].unregister();
      },
      getNumColumns() {
        return Math.max(Math.min(12, this.maxwidth), 3);
      },
      enable() {
        if (
          (this.editjson_button && (this.editjson_button.disabled = !1),
          this.addproperty_button && (this.addproperty_button.disabled = !1),
          this._super(),
          this.editors)
        )
          for (const t in this.editors)
            this.editors.hasOwnProperty(t) && this.editors[t].enable();
      },
      disable() {
        if (
          (this.editjson_button && (this.editjson_button.disabled = !0),
          this.addproperty_button && (this.addproperty_button.disabled = !0),
          this.hideEditJSON(),
          this._super(),
          this.editors)
        )
          for (const t in this.editors)
            this.editors.hasOwnProperty(t) && this.editors[t].disable();
      },
      layoutEditors() {
        let t;
          let e;
          const i = this;
        if (this.row_container) {
          (this.property_order = Object.keys(this.editors)),
            (this.property_order = this.property_order.sort(function(t, e) {
              let s = i.editors[t].schema.propertyOrder;
                let r = i.editors[e].schema.propertyOrder;
              return (
                typeof s !== "number" && (s = 1e3),
                typeof r !== "number" && (r = 1e3),
                s - r
              );
            }));
          let r;
          if (this.format === "grid") {
            const n = [];
            for (
              s(this.property_order, function(t, e) {
                const s = i.editors[e];
                if (!s.property_removed) {
                  for (
                    var r = !1,
                      o = s.options.hidden
                        ? 0
                        : s.options.grid_columns || s.getNumColumns(),
                      a = s.options.hidden ? 0 : s.container.offsetHeight,
                      h = 0;
                    h < n.length;
                    h++
                  )
                    n[h].width + o <= 12 &&
                      (!a || (0.5 * n[h].minh < a && 2 * n[h].maxh > a)) &&
                      (r = h);
                  r === !1 &&
                    (n.push({ width: 0, minh: 999999, maxh: 0, editors: [] }),
                    (r = n.length - 1)),
                    n[r].editors.push({ key: e, width: o, height: a }),
                    (n[r].width += o),
                    (n[r].minh = Math.min(n[r].minh, a)),
                    (n[r].maxh = Math.max(n[r].maxh, a));
                }
              }),
                t = 0;
              t < n.length;
              t++
            )
              if (n[t].width < 12) {
                let o = !1;
                  let a = 0;
                for (e = 0; e < n[t].editors.length; e++)
                  o === !1
                    ? (o = e)
                    : n[t].editors[e].width > n[t].editors[o].width && (o = e),
                    (n[t].editors[e].width *= 12 / n[t].width),
                    (n[t].editors[e].width = Math.floor(n[t].editors[e].width)),
                    (a += n[t].editors[e].width);
                a < 12 && (n[t].editors[o].width += 12 - a), (n[t].width = 12);
              }
            if (this.layout === JSON.stringify(n)) return !1;
            for (
              this.layout = JSON.stringify(n),
                r = document.createElement("div"),
                t = 0;
              t < n.length;
              t++
            ) {
              const h = this.theme.getGridRow();
              for (r.appendChild(h), e = 0; e < n[t].editors.length; e++) {
                const l = n[t].editors[e].key;
                  const d = this.editors[l];
                d.options.hidden
                  ? (d.container.style.display = "none")
                  : this.theme.setGridColumnSize(
                      d.container,
                      n[t].editors[e].width,
                    ),
                  h.appendChild(d.container);
              }
            }
          } else
            (r = document.createElement("div")),
              s(this.property_order, function(t, e) {
                const s = i.editors[e];
                if (!s.property_removed) {
                  const n = i.theme.getGridRow();
                  r.appendChild(n),
                    s.options.hidden
                      ? (s.container.style.display = "none")
                      : i.theme.setGridColumnSize(s.container, 12),
                    n.appendChild(s.container);
                }
              });
          (this.row_container.innerHTML = ""),
            this.row_container.appendChild(r);
        }
      },
      getPropertySchema(t) {
        let e = this.schema.properties[t] || {};
        e = i({}, e);
        let s = !!this.schema.properties[t];
        if (this.schema.patternProperties)
          for (const r in this.schema.patternProperties)
            if (this.schema.patternProperties.hasOwnProperty(r)) {
              const n = new RegExp(r);
              n.test(t) &&
                ((e.allOf = e.allOf || []),
                e.allOf.push(this.schema.patternProperties[r]),
                (s = !0));
            }
        return (
          !s &&
            this.schema.additionalProperties &&
            typeof this.schema.additionalProperties === "object" &&
            (e = i({}, this.schema.additionalProperties)),
          e
        );
      },
      preBuild() {
        this._super(), (this.editors = {}), (this.cached_editors = {});
        const t = this;
        if (
          ((this.format =
            this.options.layout ||
            this.options.object_layout ||
            this.schema.format ||
            this.jsoneditor.options.object_layout ||
            "normal"),
          (this.schema.properties = this.schema.properties || {}),
          (this.minwidth = 0),
          (this.maxwidth = 0),
          this.options.table_row)
        )
          s(this.schema.properties, function(e, i) {
            const s = t.jsoneditor.getEditorClass(i);
            (t.editors[e] = t.jsoneditor.createEditor(s, {
              jsoneditor: t.jsoneditor,
              schema: i,
              path: `${t.path  }.${  e}`,
              parent: t,
              compact: !0,
              required: !0,
            })),
              t.editors[e].preBuild();
            const r = t.editors[e].options.hidden
              ? 0
              : t.editors[e].options.grid_columns ||
                t.editors[e].getNumColumns();
            (t.minwidth += r), (t.maxwidth += r);
          }),
            (this.no_link_holder = !0);
        else {
          if (this.options.table) throw "Not supported yet";
          (this.defaultProperties =
            this.schema.defaultProperties ||
            Object.keys(this.schema.properties)),
            (t.maxwidth += 1),
            s(this.defaultProperties, function(e, i) {
              t.addObjectProperty(i, !0),
                t.editors[i] &&
                  ((t.minwidth = Math.max(
                    t.minwidth,
                    t.editors[i].options.grid_columns ||
                      t.editors[i].getNumColumns(),
                  )),
                  (t.maxwidth +=
                    t.editors[i].options.grid_columns ||
                    t.editors[i].getNumColumns()));
            });
        }
        (this.property_order = Object.keys(this.editors)),
          (this.property_order = this.property_order.sort(function(e, i) {
            let s = t.editors[e].schema.propertyOrder;
              let r = t.editors[i].schema.propertyOrder;
            return (
              typeof s !== "number" && (s = 1e3),
              typeof r !== "number" && (r = 1e3),
              s - r
            );
          }));
      },
      build() {
        const t = this;
        if (this.options.table_row)
          (this.editor_holder = this.container),
            s(this.editors, function(e, i) {
              const s = t.theme.getTableCell();
              t.editor_holder.appendChild(s),
                i.setContainer(s),
                i.build(),
                i.postBuild(),
                t.editors[e].options.hidden && (s.style.display = "none"),
                t.editors[e].options.input_width &&
                  (s.style.width = t.editors[e].options.input_width);
            });
        else {
          if (this.options.table) throw "Not supported yet";
          (this.header = document.createElement("span")),
            (this.header.textContent = this.getTitle()),
            (this.title = this.theme.getHeader(this.header)),
            this.container.appendChild(this.title),
            (this.container.style.position = "relative"),
            (this.editjson_holder = this.theme.getModal()),
            (this.editjson_textarea = this.theme.getTextareaInput()),
            (this.editjson_textarea.style.height = "170px"),
            (this.editjson_textarea.style.width = "300px"),
            (this.editjson_textarea.style.display = "block"),
            (this.editjson_save = this.getButton("Save", "save", "Save")),
            this.editjson_save.addEventListener("click", function(e) {
              e.preventDefault(), e.stopPropagation(), t.saveJSON();
            }),
            (this.editjson_cancel = this.getButton(
              "Cancel",
              "cancel",
              "Cancel",
            )),
            this.editjson_cancel.addEventListener("click", function(e) {
              e.preventDefault(), e.stopPropagation(), t.hideEditJSON();
            }),
            this.editjson_holder.appendChild(this.editjson_textarea),
            this.editjson_holder.appendChild(this.editjson_save),
            this.editjson_holder.appendChild(this.editjson_cancel),
            (this.addproperty_holder = this.theme.getModal()),
            (this.addproperty_list = document.createElement("div")),
            (this.addproperty_list.style.width = "295px"),
            (this.addproperty_list.style.maxHeight = "160px"),
            (this.addproperty_list.style.padding = "5px 0"),
            (this.addproperty_list.style.overflowY = "auto"),
            (this.addproperty_list.style.overflowX = "hidden"),
            (this.addproperty_list.style.paddingLeft = "5px"),
            this.addproperty_list.setAttribute("class", "property-selector"),
            (this.addproperty_add = this.getButton("add", "add", "add")),
            (this.addproperty_input = this.theme.getFormInputField("text")),
            this.addproperty_input.setAttribute(
              "placeholder",
              "Property name...",
            ),
            (this.addproperty_input.style.width = "220px"),
            (this.addproperty_input.style.marginBottom = "0"),
            (this.addproperty_input.style.display = "inline-block"),
            this.addproperty_add.addEventListener("click", function(e) {
              if (
                (e.preventDefault(),
                e.stopPropagation(),
                t.addproperty_input.value)
              ) {
                if (t.editors[t.addproperty_input.value])
                  return void window.alert(
                    "there is already a property with that name",
                  );
                t.addObjectProperty(t.addproperty_input.value),
                  t.editors[t.addproperty_input.value] &&
                    t.editors[t.addproperty_input.value].disable(),
                  t.onChange(!0);
              }
            }),
            this.addproperty_holder.appendChild(this.addproperty_list),
            this.addproperty_holder.appendChild(this.addproperty_input),
            this.addproperty_holder.appendChild(this.addproperty_add);
          const e = document.createElement("div");
          (e.style.clear = "both"),
            this.addproperty_holder.appendChild(e),
            this.schema.description &&
              ((this.description = this.theme.getDescription(
                this.schema.description,
              )),
              this.container.appendChild(this.description)),
            (this.error_holder = document.createElement("div")),
            this.container.appendChild(this.error_holder),
            (this.editor_holder = this.theme.getIndentedPanel()),
            (this.editor_holder.style.paddingBottom = "0"),
            this.container.appendChild(this.editor_holder),
            (this.row_container = this.theme.getGridContainer()),
            this.editor_holder.appendChild(this.row_container),
            s(this.editors, function(e, i) {
              const s = t.theme.getGridColumn();
              t.row_container.appendChild(s),
                i.setContainer(s),
                i.build(),
                i.postBuild();
            }),
            (this.title_controls = this.theme.getHeaderButtonHolder()),
            (this.editjson_controls = this.theme.getHeaderButtonHolder()),
            (this.addproperty_controls = this.theme.getHeaderButtonHolder()),
            this.title.appendChild(this.title_controls),
            this.title.appendChild(this.editjson_controls),
            this.title.appendChild(this.addproperty_controls),
            (this.collapsed = !1),
            (this.toggle_button = this.getButton("", "collapse", "Collapse")),
            this.title_controls.appendChild(this.toggle_button),
            this.toggle_button.addEventListener("click", function(e) {
              e.preventDefault(),
                e.stopPropagation(),
                t.collapsed
                  ? ((t.editor_holder.style.display = ""),
                    (t.collapsed = !1),
                    t.setButtonText(
                      t.toggle_button,
                      "",
                      "collapse",
                      "Collapse",
                    ))
                  : ((t.editor_holder.style.display = "none"),
                    (t.collapsed = !0),
                    t.setButtonText(t.toggle_button, "", "expand", "Expand"));
            }),
            this.options.collapsed && r(this.toggle_button, "click"),
            this.schema.options &&
            typeof this.schema.options.disable_collapse !== "undefined"
              ? this.schema.options.disable_collapse &&
                (this.toggle_button.style.display = "none")
              : this.jsoneditor.options.disable_collapse &&
                (this.toggle_button.style.display = "none"),
            (this.editjson_button = this.getButton(
              "JSON",
              "edit",
              "Edit JSON",
            )),
            this.editjson_button.addEventListener("click", function(e) {
              e.preventDefault(), e.stopPropagation(), t.toggleEditJSON();
            }),
            this.editjson_controls.appendChild(this.editjson_button),
            this.editjson_controls.appendChild(this.editjson_holder),
            this.schema.options &&
            typeof this.schema.options.disable_edit_json !== "undefined"
              ? this.schema.options.disable_edit_json &&
                (this.editjson_button.style.display = "none")
              : this.jsoneditor.options.disable_edit_json &&
                (this.editjson_button.style.display = "none"),
            (this.addproperty_button = this.getButton(
              "Properties",
              "edit",
              "Object Properties",
            )),
            this.addproperty_button.addEventListener("click", function(e) {
              e.preventDefault(), e.stopPropagation(), t.toggleAddProperty();
            }),
            this.addproperty_controls.appendChild(this.addproperty_button),
            this.addproperty_controls.appendChild(this.addproperty_holder),
            this.refreshAddProperties();
        }
        this.options.table_row
          ? ((this.editor_holder = this.container),
            s(this.property_order, function(e, i) {
              t.editor_holder.appendChild(t.editors[i].container);
            }))
          : (this.layoutEditors(), this.layoutEditors());
      },
      showEditJSON() {
        this.editjson_holder &&
          (this.hideAddProperty(),
          (this.editjson_holder.style.left =
            `${this.editjson_button.offsetLeft  }px`),
          (this.editjson_holder.style.top =
            `${this.editjson_button.offsetTop +
            this.editjson_button.offsetHeight 
            }px`),
          (this.editjson_textarea.value = JSON.stringify(
            this.getValue(),
            null,
            2,
          )),
          this.disable(),
          (this.editjson_holder.style.display = ""),
          (this.editjson_button.disabled = !1),
          (this.editing_json = !0));
      },
      hideEditJSON() {
        this.editjson_holder &&
          this.editing_json &&
          ((this.editjson_holder.style.display = "none"),
          this.enable(),
          (this.editing_json = !1));
      },
      saveJSON() {
        if (this.editjson_holder)
          try {
            const t = JSON.parse(this.editjson_textarea.value);
            this.setValue(t), this.hideEditJSON();
          } catch (e) {
            throw (window.alert("invalid JSON"), e);
          }
      },
      toggleEditJSON() {
        this.editing_json ? this.hideEditJSON() : this.showEditJSON();
      },
      insertPropertyControlUsingPropertyOrder(t, e, i) {
        let s;
        this.schema.properties[t] &&
          (s = this.schema.properties[t].propertyOrder),
          typeof s !== "number" && (s = 1e3),
          (e.propertyOrder = s);
        for (let r = 0; r < i.childNodes.length; r++) {
          const n = i.childNodes[r];
          if (e.propertyOrder < n.propertyOrder) {
            this.addproperty_list.insertBefore(e, n), (e = null);
            break;
          }
        }
        e && this.addproperty_list.appendChild(e);
      },
      addPropertyCheckbox(t) {
        let e;
          let i;
          let s;
          let r;
          const n = this;
        return (
          (e = n.theme.getCheckbox()),
          (e.style.width = "auto"),
          (s =
            this.schema.properties[t] && this.schema.properties[t].title
              ? this.schema.properties[t].title
              : t),
          (i = n.theme.getCheckboxLabel(s)),
          (r = n.theme.getFormControl(i, e)),
          (r.style.paddingBottom = r.style.marginBottom = r.style.paddingTop = r.style.marginTop = 0),
          (r.style.height = "auto"),
          this.insertPropertyControlUsingPropertyOrder(
            t,
            r,
            this.addproperty_list,
          ),
          (e.checked = t in this.editors),
          e.addEventListener("change", function() {
            e.checked ? n.addObjectProperty(t) : n.removeObjectProperty(t),
              n.onChange(!0);
          }),
          (n.addproperty_checkboxes[t] = e),
          e
        );
      },
      showAddProperty() {
        this.addproperty_holder &&
          (this.hideEditJSON(),
          (this.addproperty_holder.style.left =
            `${this.addproperty_button.offsetLeft  }px`),
          (this.addproperty_holder.style.top =
            `${this.addproperty_button.offsetTop +
            this.addproperty_button.offsetHeight 
            }px`),
          this.disable(),
          (this.adding_property = !0),
          (this.addproperty_button.disabled = !1),
          (this.addproperty_holder.style.display = ""),
          this.refreshAddProperties());
      },
      hideAddProperty() {
        this.addproperty_holder &&
          this.adding_property &&
          ((this.addproperty_holder.style.display = "none"),
          this.enable(),
          (this.adding_property = !1));
      },
      toggleAddProperty() {
        this.adding_property ? this.hideAddProperty() : this.showAddProperty();
      },
      removeObjectProperty(t) {
        this.editors[t] &&
          (this.editors[t].unregister(),
          delete this.editors[t],
          this.refreshValue(),
          this.layoutEditors());
      },
      addObjectProperty(t, e) {
        const i = this;
        if (!this.editors[t]) {
          if (this.cached_editors[t]) {
            if (((this.editors[t] = this.cached_editors[t]), e)) return;
            this.editors[t].register();
          } else {
            if (
              !(
                this.canHaveAdditionalProperties() ||
                (this.schema.properties && this.schema.properties[t])
              )
            )
              return;
            const s = i.getPropertySchema(t);
              const r = i.jsoneditor.getEditorClass(s);
            if (
              ((i.editors[t] = i.jsoneditor.createEditor(r, {
                jsoneditor: i.jsoneditor,
                schema: s,
                path: `${i.path  }.${  t}`,
                parent: i,
              })),
              i.editors[t].preBuild(),
              !e)
            ) {
              const n = i.theme.getChildEditorHolder();
              i.editor_holder.appendChild(n),
                i.editors[t].setContainer(n),
                i.editors[t].build(),
                i.editors[t].postBuild();
            }
            i.cached_editors[t] = i.editors[t];
          }
          e || (i.refreshValue(), i.layoutEditors());
        }
      },
      onChildEditorChange(t) {
        this.refreshValue(), this._super(t);
      },
      canHaveAdditionalProperties() {
        return typeof this.schema.additionalProperties === "boolean"
          ? this.schema.additionalProperties
          : !this.jsoneditor.options.no_additional_properties;
      },
      destroy() {
        s(this.cached_editors, function(t, e) {
          e.destroy();
        }),
          this.editor_holder && (this.editor_holder.innerHTML = ""),
          this.title &&
            this.title.parentNode &&
            this.title.parentNode.removeChild(this.title),
          this.error_holder &&
            this.error_holder.parentNode &&
            this.error_holder.parentNode.removeChild(this.error_holder),
          (this.editors = null),
          (this.cached_editors = null),
          this.editor_holder &&
            this.editor_holder.parentNode &&
            this.editor_holder.parentNode.removeChild(this.editor_holder),
          (this.editor_holder = null),
          this._super();
      },
      getValue() {
        const t = this._super();
        if (
          this.jsoneditor.options.remove_empty_properties ||
          this.options.remove_empty_properties
        )
          for (const e in t) t.hasOwnProperty(e) && (t[e] || delete t[e]);
        return t;
      },
      refreshValue() {
        this.value = {};
        for (const t in this.editors)
          this.editors.hasOwnProperty(t) &&
            (this.value[t] = this.editors[t].getValue());
        this.adding_property && this.refreshAddProperties();
      },
      refreshAddProperties() {
        if (
          this.options.disable_properties ||
          (this.options.disable_properties !== !1 &&
            this.jsoneditor.options.disable_properties)
        )
          return void (this.addproperty_controls.style.display = "none");
        let t;
          let e = !1;
          let i = !1;
          let s = 0;
          let r = !1;
        for (t in this.editors) this.editors.hasOwnProperty(t) && s++;
        (e =
          this.canHaveAdditionalProperties() &&
          !(
            typeof this.schema.maxProperties !== "undefined" &&
            s >= this.schema.maxProperties
          )),
          this.addproperty_checkboxes && (this.addproperty_list.innerHTML = ""),
          (this.addproperty_checkboxes = {});
        for (t in this.cached_editors)
          this.cached_editors.hasOwnProperty(t) &&
            (this.addPropertyCheckbox(t),
            this.isRequired(this.cached_editors[t]) &&
              t in this.editors &&
              (this.addproperty_checkboxes[t].disabled = !0),
            typeof this.schema.minProperties !== "undefined" &&
            s <= this.schema.minProperties
              ? ((this.addproperty_checkboxes[
                  t
                ].disabled = this.addproperty_checkboxes[t].checked),
                this.addproperty_checkboxes[t].checked || (r = !0))
              : t in this.editors
              ? ((r = !0), (i = !0))
              : e || this.schema.properties.hasOwnProperty(t)
              ? ((this.addproperty_checkboxes[t].disabled = !1), (r = !0))
              : (this.addproperty_checkboxes[t].disabled = !0));
        this.canHaveAdditionalProperties() && (r = !0);
        for (t in this.schema.properties)
          this.schema.properties.hasOwnProperty(t) &&
            (this.cached_editors[t] || ((r = !0), this.addPropertyCheckbox(t)));
        r
          ? this.canHaveAdditionalProperties()
            ? e
              ? (this.addproperty_add.disabled = !1)
              : (this.addproperty_add.disabled = !0)
            : ((this.addproperty_add.style.display = "none"),
              (this.addproperty_input.style.display = "none"))
          : (this.hideAddProperty(),
            (this.addproperty_controls.style.display = "none"));
      },
      isRequired(t) {
        return typeof t.schema.required === "boolean"
          ? t.schema.required
          : Array.isArray(this.schema.required)
          ? this.schema.required.indexOf(t.key) > -1
          : !!this.jsoneditor.options.required_by_default;
      },
      setValue(t, e) {
        const i = this;
        (t = t || {}),
          (typeof t !== "object" || Array.isArray(t)) && (t = {}),
          s(this.cached_editors, function(s, r) {
            typeof t[s] !== "undefined"
              ? (i.addObjectProperty(s), r.setValue(t[s], e))
              : e || i.isRequired(r)
              ? r.setValue(r.getDefault(), e)
              : i.removeObjectProperty(s);
          }),
          s(t, function(t, s) {
            i.cached_editors[t] ||
              (i.addObjectProperty(t),
              i.editors[t] && i.editors[t].setValue(s, e));
          }),
          this.refreshValue(),
          this.layoutEditors(),
          this.onChange();
      },
      showValidationErrors(t) {
        const e = this;
          const i = [];
          const r = [];
        s(t, function(t, s) {
          s.path === e.path ? i.push(s) : r.push(s);
        }),
          this.error_holder &&
            (i.length
              ? ((this.error_holder.innerHTML = ""),
                (this.error_holder.style.display = ""),
                s(i, function(t, i) {
                  e.error_holder.appendChild(
                    e.theme.getErrorMessage(i.message),
                  );
                }))
              : (this.error_holder.style.display = "none")),
          this.options.table_row &&
            (i.length
              ? this.theme.addTableRowError(this.container)
              : this.theme.removeTableRowError(this.container)),
          s(this.editors, function(t, e) {
            e.showValidationErrors(r);
          });
      },
    })),
    (n.defaults.editors.array = n.AbstractEditor.extend({
      getDefault() {
        return this.schema.default || [];
      },
      register() {
        if ((this._super(), this.rows))
          for (let t = 0; t < this.rows.length; t++) this.rows[t].register();
      },
      unregister() {
        if ((this._super(), this.rows))
          for (let t = 0; t < this.rows.length; t++) this.rows[t].unregister();
      },
      getNumColumns() {
        const t = this.getItemInfo(0);
        return this.tabs_holder
          ? Math.max(Math.min(12, t.width + 2), 4)
          : t.width;
      },
      enable() {
        if (
          (this.add_row_button && (this.add_row_button.disabled = !1),
          this.remove_all_rows_button &&
            (this.remove_all_rows_button.disabled = !1),
          this.delete_last_row_button &&
            (this.delete_last_row_button.disabled = !1),
          this.rows)
        )
          for (let t = 0; t < this.rows.length; t++)
            this.rows[t].enable(),
              this.rows[t].moveup_button &&
                (this.rows[t].moveup_button.disabled = !1),
              this.rows[t].movedown_button &&
                (this.rows[t].movedown_button.disabled = !1),
              this.rows[t].delete_button &&
                (this.rows[t].delete_button.disabled = !1);
        this._super();
      },
      disable() {
        if (
          (this.add_row_button && (this.add_row_button.disabled = !0),
          this.remove_all_rows_button &&
            (this.remove_all_rows_button.disabled = !0),
          this.delete_last_row_button &&
            (this.delete_last_row_button.disabled = !0),
          this.rows)
        )
          for (let t = 0; t < this.rows.length; t++)
            this.rows[t].disable(),
              this.rows[t].moveup_button &&
                (this.rows[t].moveup_button.disabled = !0),
              this.rows[t].movedown_button &&
                (this.rows[t].movedown_button.disabled = !0),
              this.rows[t].delete_button &&
                (this.rows[t].delete_button.disabled = !0);
        this._super();
      },
      preBuild() {
        this._super(),
          (this.rows = []),
          (this.row_cache = []),
          (this.hide_delete_buttons =
            this.options.disable_array_delete ||
            this.jsoneditor.options.disable_array_delete),
          (this.hide_move_buttons =
            this.options.disable_array_reorder ||
            this.jsoneditor.options.disable_array_reorder),
          (this.hide_add_button =
            this.options.disable_array_add ||
            this.jsoneditor.options.disable_array_add);
      },
      build() {
        this.options.compact
          ? ((this.panel = this.theme.getIndentedPanel()),
            this.container.appendChild(this.panel),
            (this.controls = this.theme.getButtonHolder()),
            this.panel.appendChild(this.controls),
            (this.row_holder = document.createElement("div")),
            this.panel.appendChild(this.row_holder))
          : ((this.header = document.createElement("span")),
            (this.header.textContent = this.getTitle()),
            (this.title = this.theme.getHeader(this.header, this.isRequired())),
            this.container.appendChild(this.title),
            (this.title_controls = this.theme.getHeaderButtonHolder()),
            this.title.appendChild(this.title_controls),
            this.schema.description &&
              ((this.description = this.theme.getDescription(
                this.schema.description,
              )),
              this.container.appendChild(this.description)),
            (this.error_holder = document.createElement("div")),
            this.container.appendChild(this.error_holder),
            this.schema.format === "tabs"
              ? ((this.controls = this.theme.getHeaderButtonHolder()),
                this.title.appendChild(this.controls),
                (this.tabs_holder = this.theme.getTabHolder()),
                this.container.appendChild(this.tabs_holder),
                (this.row_holder = this.theme.getTabContentHolder(
                  this.tabs_holder,
                )),
                (this.active_tab = null))
              : ((this.panel = this.theme.getIndentedPanel()),
                this.container.appendChild(this.panel),
                (this.row_holder = document.createElement("div")),
                this.panel.appendChild(this.row_holder),
                (this.controls = this.theme.getButtonHolder()),
                this.panel.appendChild(this.controls))),
          this.addControls();
      },
      onChildEditorChange(t) {
        this.refreshValue(), this.refreshTabs(!0), this._super(t);
      },
      getItemTitle() {
        if (!this.item_title)
          if (this.schema.items && !Array.isArray(this.schema.items)) {
            const t = this.jsoneditor.expandRefs(this.schema.items);
            this.item_title = t.title || "item";
          } else this.item_title = "item";
        return this.item_title;
      },
      getItemSchema(t) {
        return Array.isArray(this.schema.items)
          ? t >= this.schema.items.length
            ? this.schema.additionalItems === !0
              ? {}
              : this.schema.additionalItems
              ? i({}, this.schema.additionalItems)
              : void 0
            : i({}, this.schema.items[t])
          : this.schema.items
          ? i({}, this.schema.items)
          : {};
      },
      getItemInfo(t) {
        let e = this.getItemSchema(t);
        this.item_info = this.item_info || {};
        const i = JSON.stringify(e);
        return typeof this.item_info[i] !== "undefined"
          ? this.item_info[i]
          : ((e = this.jsoneditor.expandRefs(e)),
            (this.item_info[i] = {
              title: e.title || "item",
              default: e.default,
              width: 12,
              child_editors: e.properties || e.items,
            }),
            this.item_info[i]);
      },
      getElementEditor(t) {
        const e = this.getItemInfo(t);
          let i = this.getItemSchema(t);
        (i = this.jsoneditor.expandRefs(i)),
          (i.title = `${e.title  } ${  t + 1}`);
        let s;
          const r = this.jsoneditor.getEditorClass(i);
        (s = this.tabs_holder
          ? this.theme.getTabContent()
          : e.child_editors
          ? this.theme.getChildEditorHolder()
          : this.theme.getIndentedPanel()),
          this.row_holder.appendChild(s);
        const n = this.jsoneditor.createEditor(r, {
          jsoneditor: this.jsoneditor,
          schema: i,
          container: s,
          path: `${this.path  }.${  t}`,
          parent: this,
          required: !0,
        });
        return (
          n.preBuild(),
          n.build(),
          n.postBuild(),
          n.title_controls ||
            ((n.array_controls = this.theme.getButtonHolder()),
            s.appendChild(n.array_controls)),
          n
        );
      },
      destroy() {
        this.empty(!0),
          this.title &&
            this.title.parentNode &&
            this.title.parentNode.removeChild(this.title),
          this.description &&
            this.description.parentNode &&
            this.description.parentNode.removeChild(this.description),
          this.row_holder &&
            this.row_holder.parentNode &&
            this.row_holder.parentNode.removeChild(this.row_holder),
          this.controls &&
            this.controls.parentNode &&
            this.controls.parentNode.removeChild(this.controls),
          this.panel &&
            this.panel.parentNode &&
            this.panel.parentNode.removeChild(this.panel),
          (this.rows = this.row_cache = this.title = this.description = this.row_holder = this.panel = this.controls = null),
          this._super();
      },
      empty(t) {
        if (this.rows) {
          const e = this;
          s(this.rows, function(i, s) {
            t &&
              (s.tab && s.tab.parentNode && s.tab.parentNode.removeChild(s.tab),
              e.destroyRow(s, !0),
              (e.row_cache[i] = null)),
              (e.rows[i] = null);
          }),
            (e.rows = []),
            t && (e.row_cache = []);
        }
      },
      destroyRow(t, e) {
        const i = t.container;
        e
          ? (t.destroy(),
            i.parentNode && i.parentNode.removeChild(i),
            t.tab && t.tab.parentNode && t.tab.parentNode.removeChild(t.tab))
          : (t.tab && (t.tab.style.display = "none"),
            (i.style.display = "none"),
            t.unregister());
      },
      getMax() {
        return Array.isArray(this.schema.items) &&
          this.schema.additionalItems === !1
          ? Math.min(this.schema.items.length, this.schema.maxItems || 1 / 0)
          : this.schema.maxItems || 1 / 0;
      },
      refreshTabs(t) {
        const e = this;
        s(this.rows, function(i, s) {
          s.tab &&
            (t
              ? (s.tab_text.textContent = s.getHeaderText())
              : s.tab === e.active_tab
              ? (e.theme.markTabActive(s.tab), (s.container.style.display = ""))
              : (e.theme.markTabInactive(s.tab),
                (s.container.style.display = "none")));
        });
      },
      setValue(t, e) {
        (t = t || []), Array.isArray(t) || (t = [t]);
        const i = JSON.stringify(t);
        if (i !== this.serialized) {
          if (this.schema.minItems)
            for (; t.length < this.schema.minItems; )
              t.push(this.getItemInfo(t.length).default);
          this.getMax() &&
            t.length > this.getMax() &&
            (t = t.slice(0, this.getMax()));
          const r = this;
          s(t, function(t, i) {
            r.rows[t]
              ? r.rows[t].setValue(i, e)
              : r.row_cache[t]
              ? ((r.rows[t] = r.row_cache[t]),
                r.rows[t].setValue(i, e),
                (r.rows[t].container.style.display = ""),
                r.rows[t].tab && (r.rows[t].tab.style.display = ""),
                r.rows[t].register())
              : r.addRow(i, e);
          });
          for (let n = t.length; n < r.rows.length; n++)
            r.destroyRow(r.rows[n]), (r.rows[n] = null);
          r.rows = r.rows.slice(0, t.length);
          let o = null;
          s(r.rows, function(t, e) {
            return e.tab === r.active_tab ? ((o = e.tab), !1) : void 0;
          }),
            !o && r.rows.length && (o = r.rows[0].tab),
            (r.active_tab = o),
            r.refreshValue(e),
            r.refreshTabs(!0),
            r.refreshTabs(),
            r.onChange();
        }
      },
      refreshValue(t) {
        const e = this;
          const i = this.value ? this.value.length : 0;
        if (
          ((this.value = []),
          s(this.rows, function(t, i) {
            e.value[t] = i.getValue();
          }),
          i !== this.value.length || t)
        ) {
          const r =
            this.schema.minItems && this.schema.minItems >= this.rows.length;
          s(this.rows, function(t, i) {
            i.movedown_button &&
              (t === e.rows.length - 1
                ? (i.movedown_button.style.display = "none")
                : (i.movedown_button.style.display = "")),
              i.delete_button &&
                (r
                  ? (i.delete_button.style.display = "none")
                  : (i.delete_button.style.display = "")),
              (e.value[t] = i.getValue());
          });
          let n = !1;
          this.value.length
            ? this.value.length === 1
              ? ((this.remove_all_rows_button.style.display = "none"),
                r || this.hide_delete_buttons
                  ? (this.delete_last_row_button.style.display = "none")
                  : ((this.delete_last_row_button.style.display = ""),
                    (n = !0)))
              : r || this.hide_delete_buttons
              ? ((this.delete_last_row_button.style.display = "none"),
                (this.remove_all_rows_button.style.display = "none"))
              : ((this.delete_last_row_button.style.display = ""),
                (this.remove_all_rows_button.style.display = ""),
                (n = !0))
            : ((this.delete_last_row_button.style.display = "none"),
              (this.remove_all_rows_button.style.display = "none")),
            (this.getMax() && this.getMax() <= this.rows.length) ||
            this.hide_add_button
              ? (this.add_row_button.style.display = "none")
              : ((this.add_row_button.style.display = ""), (n = !0)),
            !this.collapsed && n
              ? (this.controls.style.display = "inline-block")
              : (this.controls.style.display = "none");
        }
      },
      addRow(t, e) {
        const i = this;
          const r = this.rows.length;
        (i.rows[r] = this.getElementEditor(r)),
          (i.row_cache[r] = i.rows[r]),
          i.tabs_holder &&
            ((i.rows[r].tab_text = document.createElement("span")),
            (i.rows[r].tab_text.textContent = i.rows[r].getHeaderText()),
            (i.rows[r].tab = i.theme.getTab(i.rows[r].tab_text)),
            i.rows[r].tab.addEventListener("click", function(t) {
              (i.active_tab = i.rows[r].tab),
                i.refreshTabs(),
                t.preventDefault(),
                t.stopPropagation();
            }),
            i.theme.addTab(i.tabs_holder, i.rows[r].tab));
        const n = i.rows[r].title_controls || i.rows[r].array_controls;
        i.hide_delete_buttons ||
          ((i.rows[r].delete_button = this.getButton(
            i.getItemTitle(),
            "delete",
            `Delete ${  i.getItemTitle()}`,
          )),
          (i.rows[r].delete_button.className += " delete"),
          i.rows[r].delete_button.setAttribute("data-i", r),
          i.rows[r].delete_button.addEventListener("click", function(t) {
            t.preventDefault(), t.stopPropagation();
            const e = 1 * this.getAttribute("data-i");
              const r = i.getValue();
              const n = [];
              let o = null;
            s(r, function(t, s) {
              return t === e
                ? void (
                    i.rows[t].tab === i.active_tab &&
                    (i.rows[t + 1]
                      ? (o = i.rows[t].tab)
                      : t && (o = i.rows[t - 1].tab))
                  )
                : void n.push(s);
            }),
              i.setValue(n),
              o && ((i.active_tab = o), i.refreshTabs()),
              i.onChange(!0);
          }),
          n && n.appendChild(i.rows[r].delete_button)),
          r &&
            !i.hide_move_buttons &&
            ((i.rows[r].moveup_button = this.getButton(
              "",
              "moveup",
              "Move up",
            )),
            (i.rows[r].moveup_button.className += " moveup"),
            i.rows[r].moveup_button.setAttribute("data-i", r),
            i.rows[r].moveup_button.addEventListener("click", function(t) {
              t.preventDefault(), t.stopPropagation();
              const e = 1 * this.getAttribute("data-i");
              if (!(e <= 0)) {
                const s = i.getValue();
                  const r = s[e - 1];
                (s[e - 1] = s[e]),
                  (s[e] = r),
                  i.setValue(s),
                  (i.active_tab = i.rows[e - 1].tab),
                  i.refreshTabs(),
                  i.onChange(!0);
              }
            }),
            n && n.appendChild(i.rows[r].moveup_button)),
          i.hide_move_buttons ||
            ((i.rows[r].movedown_button = this.getButton(
              "",
              "movedown",
              "Move down",
            )),
            (i.rows[r].movedown_button.className += " movedown"),
            i.rows[r].movedown_button.setAttribute("data-i", r),
            i.rows[r].movedown_button.addEventListener("click", function(t) {
              t.preventDefault(), t.stopPropagation();
              const e = 1 * this.getAttribute("data-i");
                const s = i.getValue();
              if (!(e >= s.length - 1)) {
                const r = s[e + 1];
                (s[e + 1] = s[e]),
                  (s[e] = r),
                  i.setValue(s),
                  (i.active_tab = i.rows[e + 1].tab),
                  i.refreshTabs(),
                  i.onChange(!0);
              }
            }),
            n && n.appendChild(i.rows[r].movedown_button)),
          t && i.rows[r].setValue(t, e),
          i.refreshTabs();
      },
      addControls() {
        const t = this;
        (this.collapsed = !1),
          (this.toggle_button = this.getButton("", "collapse", "Collapse")),
          this.title_controls.appendChild(this.toggle_button);
        const e = t.row_holder.style.display;
          const i = t.controls.style.display;
        this.toggle_button.addEventListener("click", function(s) {
          s.preventDefault(),
            s.stopPropagation(),
            t.collapsed
              ? ((t.collapsed = !1),
                t.panel && (t.panel.style.display = ""),
                (t.row_holder.style.display = e),
                t.tabs_holder && (t.tabs_holder.style.display = ""),
                (t.controls.style.display = i),
                t.setButtonText(this, "", "collapse", "Collapse"))
              : ((t.collapsed = !0),
                (t.row_holder.style.display = "none"),
                t.tabs_holder && (t.tabs_holder.style.display = "none"),
                (t.controls.style.display = "none"),
                t.panel && (t.panel.style.display = "none"),
                t.setButtonText(this, "", "expand", "Expand"));
        }),
          this.options.collapsed && r(this.toggle_button, "click"),
          this.schema.options &&
          typeof this.schema.options.disable_collapse !== "undefined"
            ? this.schema.options.disable_collapse &&
              (this.toggle_button.style.display = "none")
            : this.jsoneditor.options.disable_collapse &&
              (this.toggle_button.style.display = "none"),
          (this.add_row_button = this.getButton(
            this.getItemTitle(),
            "add",
            `Add ${  this.getItemTitle()}`,
          )),
          this.add_row_button.addEventListener("click", function(e) {
            e.preventDefault(), e.stopPropagation();
            const i = t.rows.length;
            t.row_cache[i]
              ? ((t.rows[i] = t.row_cache[i]),
                t.rows[i].setValue(t.rows[i].getDefault()),
                (t.rows[i].container.style.display = ""),
                t.rows[i].tab && (t.rows[i].tab.style.display = ""),
                t.rows[i].register())
              : t.addRow(),
              (t.active_tab = t.rows[i].tab),
              t.refreshTabs(),
              t.refreshValue(),
              t.onChange(!0);
          }),
          t.controls.appendChild(this.add_row_button),
          (this.delete_last_row_button = this.getButton(
            `Last ${  this.getItemTitle()}`,
            "delete",
            `Delete Last ${  this.getItemTitle()}`,
          )),
          this.delete_last_row_button.addEventListener("click", function(e) {
            e.preventDefault(), e.stopPropagation();
            const i = t.getValue();
              let s = null;
            t.rows.length > 1 &&
              t.rows[t.rows.length - 1].tab === t.active_tab &&
              (s = t.rows[t.rows.length - 2].tab),
              i.pop(),
              t.setValue(i),
              s && ((t.active_tab = s), t.refreshTabs()),
              t.onChange(!0);
          }),
          t.controls.appendChild(this.delete_last_row_button),
          (this.remove_all_rows_button = this.getButton(
            "All",
            "delete",
            "Delete All",
          )),
          this.remove_all_rows_button.addEventListener("click", function(e) {
            e.preventDefault(),
              e.stopPropagation(),
              t.setValue([]),
              t.onChange(!0);
          }),
          t.controls.appendChild(this.remove_all_rows_button),
          t.tabs &&
            ((this.add_row_button.style.width = "100%"),
            (this.add_row_button.style.textAlign = "left"),
            (this.add_row_button.style.marginBottom = "3px"),
            (this.delete_last_row_button.style.width = "100%"),
            (this.delete_last_row_button.style.textAlign = "left"),
            (this.delete_last_row_button.style.marginBottom = "3px"),
            (this.remove_all_rows_button.style.width = "100%"),
            (this.remove_all_rows_button.style.textAlign = "left"),
            (this.remove_all_rows_button.style.marginBottom = "3px"));
      },
      showValidationErrors(t) {
        const e = this;
          const i = [];
          const r = [];
        s(t, function(t, s) {
          s.path === e.path ? i.push(s) : r.push(s);
        }),
          this.error_holder &&
            (i.length
              ? ((this.error_holder.innerHTML = ""),
                (this.error_holder.style.display = ""),
                s(i, function(t, i) {
                  e.error_holder.appendChild(
                    e.theme.getErrorMessage(i.message),
                  );
                }))
              : (this.error_holder.style.display = "none")),
          s(this.rows, function(t, e) {
            e.showValidationErrors(r);
          });
      },
    })),
    (n.defaults.editors.table = n.defaults.editors.array.extend({
      register() {
        if ((this._super(), this.rows))
          for (let t = 0; t < this.rows.length; t++) this.rows[t].register();
      },
      unregister() {
        if ((this._super(), this.rows))
          for (let t = 0; t < this.rows.length; t++) this.rows[t].unregister();
      },
      getNumColumns() {
        return Math.max(Math.min(12, this.width), 3);
      },
      preBuild() {
        const t = this.jsoneditor.expandRefs(this.schema.items || {});
        (this.item_title = t.title || "row"),
          (this.item_default = t.default || null),
          (this.item_has_child_editors = t.properties || t.items),
          (this.width = 12),
          this._super();
      },
      build() {
        const t = this;
        (this.table = this.theme.getTable()),
          this.container.appendChild(this.table),
          (this.thead = this.theme.getTableHead()),
          this.table.appendChild(this.thead),
          (this.header_row = this.theme.getTableRow()),
          this.thead.appendChild(this.header_row),
          (this.row_holder = this.theme.getTableBody()),
          this.table.appendChild(this.row_holder);
        const e = this.getElementEditor(0, !0);
        if (
          ((this.item_default = e.getDefault()),
          (this.width = e.getNumColumns() + 2),
          this.options.compact
            ? ((this.panel = document.createElement("div")),
              this.container.appendChild(this.panel))
            : ((this.title = this.theme.getHeader(
                this.getTitle(),
                this.isRequired(),
              )),
              this.container.appendChild(this.title),
              (this.title_controls = this.theme.getHeaderButtonHolder()),
              this.title.appendChild(this.title_controls),
              this.schema.description &&
                ((this.description = this.theme.getDescription(
                  this.schema.description,
                )),
                this.container.appendChild(this.description)),
              (this.panel = this.theme.getIndentedPanel()),
              this.container.appendChild(this.panel),
              (this.error_holder = document.createElement("div")),
              this.panel.appendChild(this.error_holder)),
          this.panel.appendChild(this.table),
          (this.controls = this.theme.getButtonHolder()),
          this.panel.appendChild(this.controls),
          this.item_has_child_editors)
        )
          for (
            let i = e.getChildEditors(),
              s = e.property_order || Object.keys(i),
              r = 0;
            r < s.length;
            r++
          ) {
            const n = t.theme.getTableHeaderCell(i[s[r]].getTitle());
            i[s[r]].options.hidden && (n.style.display = "none"),
              t.header_row.appendChild(n);
          }
        else
          t.header_row.appendChild(t.theme.getTableHeaderCell(this.item_title));
        e.destroy(),
          (this.row_holder.innerHTML = ""),
          (this.controls_header_cell = t.theme.getTableHeaderCell(" ")),
          t.header_row.appendChild(this.controls_header_cell),
          this.addControls();
      },
      onChildEditorChange(t) {
        this.refreshValue(), this._super();
      },
      getItemDefault() {
        return i({}, { default: this.item_default }).default;
      },
      getItemTitle() {
        return this.item_title;
      },
      getElementEditor(t, e) {
        const s = i({}, this.schema.items);
          const r = this.jsoneditor.getEditorClass(s, this.jsoneditor);
          const n = this.row_holder.appendChild(this.theme.getTableRow());
          let o = n;
        this.item_has_child_editors ||
          ((o = this.theme.getTableCell()), n.appendChild(o));
        const a = this.jsoneditor.createEditor(r, {
          jsoneditor: this.jsoneditor,
          schema: s,
          container: o,
          path: `${this.path  }.${  t}`,
          parent: this,
          compact: !0,
          table_row: !0,
        });
        return (
          a.preBuild(),
          e ||
            (a.build(),
            a.postBuild(),
            (a.controls_cell = n.appendChild(this.theme.getTableCell())),
            (a.row = n),
            (a.table_controls = this.theme.getButtonHolder()),
            a.controls_cell.appendChild(a.table_controls),
            (a.table_controls.style.margin = 0),
            (a.table_controls.style.padding = 0)),
          a
        );
      },
      destroy() {
        (this.innerHTML = ""),
          this.title &&
            this.title.parentNode &&
            this.title.parentNode.removeChild(this.title),
          this.description &&
            this.description.parentNode &&
            this.description.parentNode.removeChild(this.description),
          this.row_holder &&
            this.row_holder.parentNode &&
            this.row_holder.parentNode.removeChild(this.row_holder),
          this.table &&
            this.table.parentNode &&
            this.table.parentNode.removeChild(this.table),
          this.panel &&
            this.panel.parentNode &&
            this.panel.parentNode.removeChild(this.panel),
          (this.rows = this.title = this.description = this.row_holder = this.table = this.panel = null),
          this._super();
      },
      setValue(t, e) {
        if (((t = t || []), this.schema.minItems))
          for (; t.length < this.schema.minItems; )
            t.push(this.getItemDefault());
        this.schema.maxItems &&
          t.length > this.schema.maxItems &&
          (t = t.slice(0, this.schema.maxItems));
        const i = JSON.stringify(t);
        if (i !== this.serialized) {
          let r = !1;
            const n = this;
          s(t, function(t, e) {
            n.rows[t] ? n.rows[t].setValue(e) : (n.addRow(e), (r = !0));
          });
          for (let o = t.length; o < n.rows.length; o++) {
            const a = n.rows[o].container;
            n.item_has_child_editors ||
              n.rows[o].row.parentNode.removeChild(n.rows[o].row),
              n.rows[o].destroy(),
              a.parentNode && a.parentNode.removeChild(a),
              (n.rows[o] = null),
              (r = !0);
          }
          (n.rows = n.rows.slice(0, t.length)),
            n.refreshValue(),
            (r || e) && n.refreshRowButtons(),
            n.onChange();
        }
      },
      refreshRowButtons() {
        const t = this;
          const e = this.schema.minItems && this.schema.minItems >= this.rows.length;
          let i = !1;
        s(this.rows, function(s, r) {
          r.movedown_button &&
            (s === t.rows.length - 1
              ? (r.movedown_button.style.display = "none")
              : ((i = !0), (r.movedown_button.style.display = ""))),
            r.delete_button &&
              (e
                ? (r.delete_button.style.display = "none")
                : ((i = !0), (r.delete_button.style.display = ""))),
            r.moveup_button && (i = !0);
        }),
          s(this.rows, function(t, e) {
            i
              ? (e.controls_cell.style.display = "")
              : (e.controls_cell.style.display = "none");
          }),
          i
            ? (this.controls_header_cell.style.display = "")
            : (this.controls_header_cell.style.display = "none");
        let r = !1;
        this.value.length
          ? this.value.length === 1 || this.hide_delete_buttons
            ? ((this.table.style.display = ""),
              (this.remove_all_rows_button.style.display = "none"),
              e || this.hide_delete_buttons
                ? (this.delete_last_row_button.style.display = "none")
                : ((this.delete_last_row_button.style.display = ""), (r = !0)))
            : ((this.table.style.display = ""),
              e || this.hide_delete_buttons
                ? ((this.delete_last_row_button.style.display = "none"),
                  (this.remove_all_rows_button.style.display = "none"))
                : ((this.delete_last_row_button.style.display = ""),
                  (this.remove_all_rows_button.style.display = ""),
                  (r = !0)))
          : ((this.delete_last_row_button.style.display = "none"),
            (this.remove_all_rows_button.style.display = "none"),
            (this.table.style.display = "none")),
          (this.schema.maxItems && this.schema.maxItems <= this.rows.length) ||
          this.hide_add_button
            ? (this.add_row_button.style.display = "none")
            : ((this.add_row_button.style.display = ""), (r = !0)),
          r
            ? (this.controls.style.display = "")
            : (this.controls.style.display = "none");
      },
      refreshValue() {
        const t = this;
        (this.value = []),
          s(this.rows, function(e, i) {
            t.value[e] = i.getValue();
          }),
          (this.serialized = JSON.stringify(this.value));
      },
      addRow(t) {
        const e = this;
          const i = this.rows.length;
        e.rows[i] = this.getElementEditor(i);
        const r = e.rows[i].table_controls;
        this.hide_delete_buttons ||
          ((e.rows[i].delete_button = this.getButton("", "delete", "Delete")),
          (e.rows[i].delete_button.className += " delete"),
          e.rows[i].delete_button.setAttribute("data-i", i),
          e.rows[i].delete_button.addEventListener("click", function(t) {
            t.preventDefault(), t.stopPropagation();
            const i = 1 * this.getAttribute("data-i");
              const r = e.getValue();
              const n = [];
            s(r, function(t, e) {
              t !== i && n.push(e);
            }),
              e.setValue(n),
              e.onChange(!0);
          }),
          r.appendChild(e.rows[i].delete_button)),
          i &&
            !this.hide_move_buttons &&
            ((e.rows[i].moveup_button = this.getButton(
              "",
              "moveup",
              "Move up",
            )),
            (e.rows[i].moveup_button.className += " moveup"),
            e.rows[i].moveup_button.setAttribute("data-i", i),
            e.rows[i].moveup_button.addEventListener("click", function(t) {
              t.preventDefault(), t.stopPropagation();
              const i = 1 * this.getAttribute("data-i");
              if (!(i <= 0)) {
                const s = e.getValue();
                  const r = s[i - 1];
                (s[i - 1] = s[i]), (s[i] = r), e.setValue(s), e.onChange(!0);
              }
            }),
            r.appendChild(e.rows[i].moveup_button)),
          this.hide_move_buttons ||
            ((e.rows[i].movedown_button = this.getButton(
              "",
              "movedown",
              "Move down",
            )),
            (e.rows[i].movedown_button.className += " movedown"),
            e.rows[i].movedown_button.setAttribute("data-i", i),
            e.rows[i].movedown_button.addEventListener("click", function(t) {
              t.preventDefault(), t.stopPropagation();
              const i = 1 * this.getAttribute("data-i");
                const s = e.getValue();
              if (!(i >= s.length - 1)) {
                const r = s[i + 1];
                (s[i + 1] = s[i]), (s[i] = r), e.setValue(s), e.onChange(!0);
              }
            }),
            r.appendChild(e.rows[i].movedown_button)),
          t && e.rows[i].setValue(t);
      },
      addControls() {
        const t = this;
        (this.collapsed = !1),
          (this.toggle_button = this.getButton("", "collapse", "Collapse")),
          this.title_controls &&
            (this.title_controls.appendChild(this.toggle_button),
            this.toggle_button.addEventListener("click", function(e) {
              e.preventDefault(),
                e.stopPropagation(),
                t.collapsed
                  ? ((t.collapsed = !1),
                    (t.panel.style.display = ""),
                    t.setButtonText(this, "", "collapse", "Collapse"))
                  : ((t.collapsed = !0),
                    (t.panel.style.display = "none"),
                    t.setButtonText(this, "", "expand", "Expand"));
            }),
            this.options.collapsed && r(this.toggle_button, "click"),
            this.schema.options &&
            typeof this.schema.options.disable_collapse !== "undefined"
              ? this.schema.options.disable_collapse &&
                (this.toggle_button.style.display = "none")
              : this.jsoneditor.options.disable_collapse &&
                (this.toggle_button.style.display = "none")),
          (this.add_row_button = this.getButton(
            this.getItemTitle(),
            "add",
            `Add ${  this.getItemTitle()}`,
          )),
          this.add_row_button.addEventListener("click", function(e) {
            e.preventDefault(),
              e.stopPropagation(),
              t.addRow(),
              t.refreshValue(),
              t.refreshRowButtons(),
              t.onChange(!0);
          }),
          t.controls.appendChild(this.add_row_button),
          (this.delete_last_row_button = this.getButton(
            `Last ${  this.getItemTitle()}`,
            "delete",
            `Delete Last ${  this.getItemTitle()}`,
          )),
          this.delete_last_row_button.addEventListener("click", function(e) {
            e.preventDefault(), e.stopPropagation();
            const i = t.getValue();
            i.pop(), t.setValue(i), t.onChange(!0);
          }),
          t.controls.appendChild(this.delete_last_row_button),
          (this.remove_all_rows_button = this.getButton(
            "All",
            "delete",
            "Delete All",
          )),
          this.remove_all_rows_button.addEventListener("click", function(e) {
            e.preventDefault(),
              e.stopPropagation(),
              t.setValue([]),
              t.onChange(!0);
          }),
          t.controls.appendChild(this.remove_all_rows_button);
      },
    })),
    (n.defaults.editors.multiple = n.AbstractEditor.extend({
      register() {
        if (this.editors) {
          for (let t = 0; t < this.editors.length; t++)
            this.editors[t] && this.editors[t].unregister();
          this.editors[this.type] && this.editors[this.type].register();
        }
        this._super();
      },
      unregister() {
        if ((this._super(), this.editors))
          for (let t = 0; t < this.editors.length; t++)
            this.editors[t] && this.editors[t].unregister();
      },
      getNumColumns() {
        return this.editors[this.type]
          ? Math.max(this.editors[this.type].getNumColumns(), 4)
          : 4;
      },
      enable() {
        if (this.editors)
          for (let t = 0; t < this.editors.length; t++)
            this.editors[t] && this.editors[t].enable();
        (this.switcher.disabled = !1), this._super();
      },
      disable() {
        if (this.editors)
          for (let t = 0; t < this.editors.length; t++)
            this.editors[t] && this.editors[t].disable();
        (this.switcher.disabled = !0), this._super();
      },
      switchEditor(t) {
        const e = this;
        this.editors[t] || this.buildChildEditor(t), (e.type = t), e.register();
        const i = e.getValue();
        s(e.editors, function(t, s) {
          s &&
            (e.type === t
              ? (e.keep_values && s.setValue(i, !0),
                (s.container.style.display = ""))
              : (s.container.style.display = "none"));
        }),
          e.refreshValue(),
          e.refreshHeaderText();
      },
      buildChildEditor(t) {
        const e = this;
          const s = this.types[t];
          const r = e.theme.getChildEditorHolder();
        e.editor_holder.appendChild(r);
        let n;
        typeof s === "string"
          ? ((n = i({}, e.schema)), (n.type = s))
          : ((n = i({}, e.schema, s)),
            (n = e.jsoneditor.expandRefs(n)),
            s.required &&
              Array.isArray(s.required) &&
              e.schema.required &&
              Array.isArray(e.schema.required) &&
              (n.required = e.schema.required.concat(s.required)));
        const o = e.jsoneditor.getEditorClass(n);
        (e.editors[t] = e.jsoneditor.createEditor(o, {
          jsoneditor: e.jsoneditor,
          schema: n,
          container: r,
          path: e.path,
          parent: e,
          required: !0,
        })),
          e.editors[t].preBuild(),
          e.editors[t].build(),
          e.editors[t].postBuild(),
          e.editors[t].header && (e.editors[t].header.style.display = "none"),
          (e.editors[t].option = e.switcher_options[t]),
          r.addEventListener("change_header_text", function() {
            e.refreshHeaderText();
          }),
          t !== e.type && (r.style.display = "none");
      },
      preBuild() {
        if (
          ((this.types = []),
          (this.type = 0),
          (this.editors = []),
          (this.validators = []),
          (this.keep_values = !0),
          typeof this.jsoneditor.options.keep_oneof_values !== "undefined" &&
            (this.keep_values = this.jsoneditor.options.keep_oneof_values),
          typeof this.options.keep_oneof_values !== "undefined" &&
            (this.keep_values = this.options.keep_oneof_values),
          this.schema.oneOf)
        )
          (this.oneOf = !0),
            (this.types = this.schema.oneOf),
            s(this.types, function(t, e) {}),
            delete this.schema.oneOf;
        else {
          if (this.schema.type && this.schema.type !== "any")
            Array.isArray(this.schema.type)
              ? (this.types = this.schema.type)
              : (this.types = [this.schema.type]);
          else if (
            ((this.types = [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array",
              "null",
            ]),
            this.schema.disallow)
          ) {
            let t = this.schema.disallow;
            (typeof t === "object" && Array.isArray(t)) || (t = [t]);
            const e = [];
            s(this.types, function(i, s) {
              t.indexOf(s) === -1 && e.push(s);
            }),
              (this.types = e);
          }
          delete this.schema.type;
        }
        this.display_text = this.getDisplayText(this.types);
      },
      build() {
        const t = this;
          const e = this.container;
        (this.header = this.label = this.theme.getFormInputLabel(
          this.getTitle(),
          this.isRequired(),
        )),
          this.container.appendChild(this.header),
          (this.switcher = this.theme.getSwitcher(this.display_text)),
          e.appendChild(this.switcher),
          this.switcher.addEventListener("change", function(e) {
            e.preventDefault(),
              e.stopPropagation(),
              t.switchEditor(t.display_text.indexOf(this.value)),
              t.onChange(!0);
          }),
          (this.editor_holder = document.createElement("div")),
          e.appendChild(this.editor_holder),
          (this.switcher_options = this.theme.getSwitcherOptions(
            this.switcher,
          )),
          s(this.types, function(e, s) {
            t.editors[e] = !1;
            let r;
            typeof s === "string"
              ? ((r = i({}, t.schema)), (r.type = s))
              : ((r = i({}, t.schema, s)),
                s.required &&
                  Array.isArray(s.required) &&
                  t.schema.required &&
                  Array.isArray(t.schema.required) &&
                  (r.required = t.schema.required.concat(s.required))),
              (t.validators[e] = new n.Validator(t.jsoneditor, r));
          }),
          this.switchEditor(0);
      },
      onChildEditorChange(t) {
        this.editors[this.type] &&
          (this.refreshValue(), this.refreshHeaderText()),
          this._super();
      },
      refreshHeaderText() {
        const t = this.getDisplayText(this.types);
        s(this.switcher_options, function(e, i) {
          i.textContent = t[e];
        });
      },
      refreshValue() {
        this.value = this.editors[this.type].getValue();
      },
      setValue(t, e) {
        const i = this;
        s(this.validators, function(e, s) {
          return s.validate(t).length
            ? void 0
            : ((i.type = e), (i.switcher.value = i.display_text[e]), !1);
        }),
          this.switchEditor(this.type),
          this.editors[this.type].setValue(t, e),
          this.refreshValue(),
          i.onChange();
      },
      destroy() {
        s(this.editors, function(t, e) {
          e && e.destroy();
        }),
          this.editor_holder &&
            this.editor_holder.parentNode &&
            this.editor_holder.parentNode.removeChild(this.editor_holder),
          this.switcher &&
            this.switcher.parentNode &&
            this.switcher.parentNode.removeChild(this.switcher),
          this._super();
      },
      showValidationErrors(t) {
        const e = this;
        this.oneOf
          ? s(this.editors, function(r, n) {
              if (n) {
                const o = `${e.path  }.oneOf[${  r  }]`;
                  const a = [];
                s(t, function(t, s) {
                  if (s.path.substr(0, o.length) === o) {
                    const r = i({}, s);
                    (r.path = e.path + r.path.substr(o.length)), a.push(r);
                  }
                }),
                  n.showValidationErrors(a);
              }
            })
          : s(this.editors, function(e, i) {
              i && i.showValidationErrors(t);
            });
      },
    })),
    (n.defaults.editors.enum = n.AbstractEditor.extend({
      getNumColumns() {
        return 4;
      },
      build() {
        this.container,
          (this.title = this.header = this.label = this.theme.getFormInputLabel(
            this.getTitle(),
            this.isRequired(),
          )),
          this.container.appendChild(this.title),
          (this.options.enum_titles = this.options.enum_titles || []),
          (this.enum = this.schema.enum),
          (this.selected = 0),
          (this.select_options = []),
          (this.html_values = []);
        for (var t = this, e = 0; e < this.enum.length; e++)
          (this.select_options[e] =
            this.options.enum_titles[e] || `Value ${  e + 1}`),
            (this.html_values[e] = this.getHTML(this.enum[e]));
        (this.switcher = this.theme.getSwitcher(this.select_options)),
          this.container.appendChild(this.switcher),
          (this.display_area = this.theme.getIndentedPanel()),
          this.container.appendChild(this.display_area),
          this.options.hide_display &&
            (this.display_area.style.display = "none"),
          this.switcher.addEventListener("change", function() {
            (t.selected = t.select_options.indexOf(this.value)),
              (t.value = t.enum[t.selected]),
              t.refreshValue(),
              t.onChange(!0);
          }),
          (this.value = this.enum[0]),
          this.refreshValue(),
          this.enum.length === 1 && (this.switcher.style.display = "none");
      },
      refreshValue() {
        const t = this;
        t.selected = -1;
        const e = JSON.stringify(this.value);
        return (
          s(this.enum, function(i, s) {
            return e === JSON.stringify(s) ? ((t.selected = i), !1) : void 0;
          }),
          t.selected < 0
            ? void t.setValue(t.enum[0])
            : ((this.switcher.value = this.select_options[this.selected]),
              void (this.display_area.innerHTML = this.html_values[
                this.selected
              ]))
        );
      },
      enable() {
        this.always_disabled || (this.switcher.disabled = !1), this._super();
      },
      disable() {
        (this.switcher.disabled = !0), this._super();
      },
      getHTML(t) {
        const e = this;
        if (t === null) return "<em>null</em>";
        if (typeof t === "object") {
          let i = "";
          return (
            s(t, function(s, r) {
              let n = e.getHTML(r);
              Array.isArray(t) ||
                (n = `<div><em>${  s  }</em>: ${  n  }</div>`),
                (i += `<li>${  n  }</li>`);
            }),
            (i = Array.isArray(t)
              ? `<ol>${  i  }</ol>`
              : `<ul style='margin-top:0;margin-bottom:0;padding-top:0;padding-bottom:0;'>${ 
                i 
                }</ul>`)
          );
        }
        return typeof t === "boolean"
          ? t
            ? "true"
            : "false"
          : typeof t === "string"
          ? t
              .replace(/&/g, "&amp;")
              .replace(/</g, "&lt;")
              .replace(/>/g, "&gt;")
          : t;
      },
      setValue(t) {
        this.value !== t &&
          ((this.value = t), this.refreshValue(), this.onChange());
      },
      destroy() {
        this.display_area &&
          this.display_area.parentNode &&
          this.display_area.parentNode.removeChild(this.display_area),
          this.title &&
            this.title.parentNode &&
            this.title.parentNode.removeChild(this.title),
          this.switcher &&
            this.switcher.parentNode &&
            this.switcher.parentNode.removeChild(this.switcher),
          this._super();
      },
    })),
    (n.defaults.editors.select = n.AbstractEditor.extend({
      setValue(t, e) {
        t = this.typecast(t || "");
        let i = t;
        this.enum_values.indexOf(i) < 0 && (i = this.enum_values[0]),
          this.value !== i &&
            ((this.input.value = this.enum_options[
              this.enum_values.indexOf(i)
            ]),
            this.select2 && this.select2.select2("val", this.input.value),
            (this.value = i),
            this.onChange());
      },
      register() {
        this._super(),
          this.input && this.input.setAttribute("name", this.formname);
      },
      unregister() {
        this._super(), this.input && this.input.removeAttribute("name");
      },
      getNumColumns() {
        if (!this.enum_options) return 3;
        for (
          var t = this.getTitle().length, e = 0;
          e < this.enum_options.length;
          e++
        )
          t = Math.max(t, this.enum_options[e].length + 4);
        return Math.min(12, Math.max(t / 7, 2));
      },
      typecast(t) {
        return this.schema.type === "boolean"
          ? !!t
          : this.schema.type === "number"
          ? 1 * t
          : this.schema.type === "integer"
          ? Math.floor(1 * t)
          : `${  t}`;
      },
      getValue() {
        return this.value;
      },
      preBuild() {
        const t = this;
        if (
          ((this.input_type = "select"),
          (this.enum_options = []),
          (this.enum_values = []),
          (this.enum_display = []),
          this.schema.enum)
        ) {
          const e =
            (this.schema.options && this.schema.options.enum_titles) || [];
          s(this.schema.enum, function(i, s) {
            (t.enum_options[i] = `${  s}`),
              (t.enum_display[i] = `${  e[i] || s}`),
              (t.enum_values[i] = t.typecast(s));
          }),
            this.isRequired() ||
              (t.enum_display.unshift(" "),
              t.enum_options.unshift("undefined"),
              t.enum_values.unshift(void 0));
        } else if (this.schema.type === "boolean")
          (t.enum_display = (this.schema.options &&
            this.schema.options.enum_titles) || ["true", "false"]),
            (t.enum_options = ["1", ""]),
            (t.enum_values = [!0, !1]),
            this.isRequired() ||
              (t.enum_display.unshift(" "),
              t.enum_options.unshift("undefined"),
              t.enum_values.unshift(void 0));
        else {
          if (!this.schema.enumSource)
            throw "'select' editor requires the enum property to be set.";
          if (
            ((this.enumSource = []),
            (this.enum_display = []),
            (this.enum_options = []),
            (this.enum_values = []),
            Array.isArray(this.schema.enumSource))
          )
            for (a = 0; a < this.schema.enumSource.length; a++)
              typeof this.schema.enumSource[a] === "string"
                ? (this.enumSource[a] = { source: this.schema.enumSource[a] })
                : Array.isArray(this.schema.enumSource[a])
                ? (this.enumSource[a] = this.schema.enumSource[a])
                : (this.enumSource[a] = i({}, this.schema.enumSource[a]));
          else
            this.schema.enumValue
              ? (this.enumSource = [
                  {
                    source: this.schema.enumSource,
                    value: this.schema.enumValue,
                  },
                ])
              : (this.enumSource = [{ source: this.schema.enumSource }]);
          for (a = 0; a < this.enumSource.length; a++)
            this.enumSource[a].value &&
              (this.enumSource[a].value = this.jsoneditor.compileTemplate(
                this.enumSource[a].value,
                this.template_engine,
              )),
              this.enumSource[a].title &&
                (this.enumSource[a].title = this.jsoneditor.compileTemplate(
                  this.enumSource[a].title,
                  this.template_engine,
                )),
              this.enumSource[a].filter &&
                (this.enumSource[a].filter = this.jsoneditor.compileTemplate(
                  this.enumSource[a].filter,
                  this.template_engine,
                ));
        }
      },
      build() {
        const t = this;
        this.options.compact ||
          (this.header = this.label = this.theme.getFormInputLabel(
            this.getTitle(),
            this.isRequired(),
          )),
          this.schema.description &&
            (this.description = this.theme.getFormInputDescription(
              this.schema.description,
            )),
          this.options.compact && (this.container.className += " compact"),
          (this.input = this.theme.getSelectInput(this.enum_options)),
          this.theme.setSelectOptions(
            this.input,
            this.enum_options,
            this.enum_display,
          ),
          (this.schema.readOnly || this.schema.readonly) &&
            ((this.always_disabled = !0), (this.input.disabled = !0)),
          this.input.addEventListener("change", function(e) {
            e.preventDefault(), e.stopPropagation(), t.onInputChange();
          }),
          (this.control = this.theme.getFormControl(
            this.label,
            this.input,
            this.description,
          )),
          this.container.appendChild(this.control),
          (this.value = this.enum_values[0]);
      },
      onInputChange() {
        const t = this.input.value;
          let e = t;
        this.enum_options.indexOf(t) === -1 && (e = this.enum_options[0]),
          (this.value = this.enum_values[this.enum_options.indexOf(t)]),
          this.onChange(!0);
      },
      setupSelect2() {
        if (
          window.jQuery &&
          window.jQuery.fn &&
          window.jQuery.fn.select2 &&
          (this.enum_options.length > 2 ||
            (this.enum_options.length && this.enumSource))
        ) {
          let t = i({}, n.plugins.select2);
          this.schema.options &&
            this.schema.options.select2_options &&
            (t = i(t, this.schema.options.select2_options)),
            (this.select2 = window.jQuery(this.input).select2(t));
          const e = this;
          this.select2.on("select2-blur", function() {
            (e.input.value = e.select2.select2("val")), e.onInputChange();
          });
        } else this.select2 = null;
      },
      postBuild() {
        this._super(),
          this.theme.afterInputReady(this.input),
          this.setupSelect2();
      },
      onWatchedFieldChange() {
        let t; let e;
        if (this.enumSource) {
          t = this.getWatchedFieldValues();
          for (var i = [], s = [], r = 0; r < this.enumSource.length; r++)
            if (Array.isArray(this.enumSource[r]))
              (i = i.concat(this.enumSource[r])),
                (s = s.concat(this.enumSource[r]));
            else {
              let n = [];
              if (
                (n = Array.isArray(this.enumSource[r].source)
                  ? this.enumSource[r].source
                  : t[this.enumSource[r].source])
              ) {
                if (
                  (this.enumSource[r].slice &&
                    (n = Array.prototype.slice.apply(
                      n,
                      this.enumSource[r].slice,
                    )),
                  this.enumSource[r].filter)
                ) {
                  const o = [];
                  for (e = 0; e < n.length; e++)
                    this.enumSource[r].filter({
                      i: e,
                      item: n[e],
                      watched: t,
                    }) && o.push(n[e]);
                  n = o;
                }
                const a = [];
                  const h = [];
                for (e = 0; e < n.length; e++) {
                  const l = n[e];
                  this.enumSource[r].value
                    ? (h[e] = this.enumSource[r].value({ i: e, item: l }))
                    : (h[e] = n[e]),
                    this.enumSource[r].title
                      ? (a[e] = this.enumSource[r].title({ i: e, item: l }))
                      : (a[e] = h[e]);
                }
                (i = i.concat(h)), (s = s.concat(a));
              }
            }
          const d = this.value;
          this.theme.setSelectOptions(this.input, i, s),
            (this.enum_options = i),
            (this.enum_display = s),
            (this.enum_values = i),
            this.select2 && this.select2.select2("destroy"),
            i.indexOf(d) !== -1
              ? ((this.input.value = d), (this.value = d))
              : ((this.input.value = i[0]),
                (this.value = i[0] || ""),
                this.parent
                  ? this.parent.onChildEditorChange(this)
                  : this.jsoneditor.onChange(),
                this.jsoneditor.notifyWatchers(this.path)),
            this.setupSelect2();
        }
        this._super();
      },
      enable() {
        this.always_disabled ||
          ((this.input.disabled = !1),
          this.select2 && this.select2.select2("enable", !0)),
          this._super();
      },
      disable() {
        (this.input.disabled = !0),
          this.select2 && this.select2.select2("enable", !1),
          this._super();
      },
      destroy() {
        this.label &&
          this.label.parentNode &&
          this.label.parentNode.removeChild(this.label),
          this.description &&
            this.description.parentNode &&
            this.description.parentNode.removeChild(this.description),
          this.input &&
            this.input.parentNode &&
            this.input.parentNode.removeChild(this.input),
          this.select2 &&
            (this.select2.select2("destroy"), (this.select2 = null)),
          this._super();
      },
    })),
    (n.defaults.editors.multiselect = n.AbstractEditor.extend({
      preBuild() {
        this._super(), (this.select_options = {}), (this.select_values = {});
        const t = this.jsoneditor.expandRefs(this.schema.items || {});
          const e = t.enum || [];
        for (this.option_keys = [], a = 0; a < e.length; a++)
          this.sanitize(e[a]) === e[a] &&
            (this.option_keys.push(`${e[a]  }`),
            (this.select_values[`${e[a]  }`] = e[a]));
      },
      build() {
        let t;
          const e = this;
        if (
          (this.options.compact ||
            (this.header = this.label = this.theme.getFormInputLabel(
              this.getTitle(),
              this.isRequired(),
            )),
          this.schema.description &&
            (this.description = this.theme.getFormInputDescription(
              this.schema.description,
            )),
          (!this.schema.format && this.option_keys.length < 8) ||
            this.schema.format === "checkbox")
        ) {
          for (
            this.input_type = "checkboxes",
              this.inputs = {},
              this.controls = {},
              t = 0;
            t < this.option_keys.length;
            t++
          ) {
            (this.inputs[this.option_keys[t]] = this.theme.getCheckbox()),
              (this.select_options[this.option_keys[t]] = this.inputs[
                this.option_keys[t]
              ]);
            const i = this.theme.getCheckboxLabel(this.option_keys[t]);
            this.controls[this.option_keys[t]] = this.theme.getFormControl(
              i,
              this.inputs[this.option_keys[t]],
            );
          }
          this.control = this.theme.getMultiCheckboxHolder(
            this.controls,
            this.label,
            this.description,
          );
        } else {
          for (
            this.input_type = "select",
              this.input = this.theme.getSelectInput(this.option_keys),
              this.input.multiple = !0,
              this.input.size = Math.min(10, this.option_keys.length),
              t = 0;
            t < this.option_keys.length;
            t++
          )
            this.select_options[this.option_keys[t]] = this.input.children[t];
          (this.schema.readOnly || this.schema.readonly) &&
            ((this.always_disabled = !0), (this.input.disabled = !0)),
            (this.control = this.theme.getFormControl(
              this.label,
              this.input,
              this.description,
            ));
        }
        this.container.appendChild(this.control),
          this.control.addEventListener("change", function(i) {
            i.preventDefault(), i.stopPropagation();
            const s = [];
            for (t = 0; t < e.option_keys.length; t++)
              (e.select_options[e.option_keys[t]].selected ||
                e.select_options[e.option_keys[t]].checked) &&
                s.push(e.select_values[e.option_keys[t]]);
            e.updateValue(s), e.onChange(!0);
          });
      },
      setValue(t, e) {
        let i;
        for (
          t = t || [],
            typeof t !== "object" ? (t = [t]) : Array.isArray(t) || (t = []),
            i = 0;
          i < t.length;
          i++
        )
          typeof t[i] !== "string" && (t[i] += "");
        for (i in this.select_options)
          this.select_options.hasOwnProperty(i) &&
            (this.select_options[i][
              this.input_type === "select" ? "selected" : "checked"
            ] = t.indexOf(i) !== -1);
        this.updateValue(t), this.onChange();
      },
      setupSelect2() {
        if (window.jQuery && window.jQuery.fn && window.jQuery.fn.select2) {
          let t = window.jQuery.extend({}, n.plugins.select2);
          this.schema.options &&
            this.schema.options.select2_options &&
            (t = i(t, this.schema.options.select2_options)),
            (this.select2 = window.jQuery(this.input).select2(t));
          const e = this;
          this.select2.on("select2-blur", function() {
            const t = e.select2.select2("val");
            (e.value = t), e.onChange(!0);
          });
        } else this.select2 = null;
      },
      onInputChange() {
        (this.value = this.input.value), this.onChange(!0);
      },
      postBuild() {
        this._super(), this.setupSelect2();
      },
      register() {
        this._super(),
          this.input && this.input.setAttribute("name", this.formname);
      },
      unregister() {
        this._super(), this.input && this.input.removeAttribute("name");
      },
      getNumColumns() {
        let t = this.getTitle().length;
        for (const e in this.select_values)
          this.select_values.hasOwnProperty(e) &&
            (t = Math.max(t, (`${this.select_values[e]  }`).length + 4));
        return Math.min(12, Math.max(t / 7, 2));
      },
      updateValue(t) {
        for (var e = !1, i = [], s = 0; s < t.length; s++)
          if (this.select_options[`${t[s]  }`]) {
            const r = this.sanitize(this.select_values[t[s]]);
            i.push(r), r !== t[s] && (e = !0);
          } else e = !0;
        return (
          (this.value = i),
          this.select2 && this.select2.select2("val", this.value),
          e
        );
      },
      sanitize(t) {
        return this.schema.items.type === "number"
          ? 1 * t
          : this.schema.items.type === "integer"
          ? Math.floor(1 * t)
          : `${  t}`;
      },
      enable() {
        if (!this.always_disabled) {
          if (this.input) this.input.disabled = !1;
          else if (this.inputs)
            for (const t in this.inputs)
              this.inputs.hasOwnProperty(t) && (this.inputs[t].disabled = !1);
          this.select2 && this.select2.select2("enable", !0);
        }
        this._super();
      },
      disable() {
        if (this.input) this.input.disabled = !0;
        else if (this.inputs)
          for (const t in this.inputs)
            this.inputs.hasOwnProperty(t) && (this.inputs[t].disabled = !0);
        this.select2 && this.select2.select2("enable", !1), this._super();
      },
      destroy() {
        this.select2 &&
          (this.select2.select2("destroy"), (this.select2 = null)),
          this._super();
      },
    })),
    (n.defaults.editors.base64 = n.AbstractEditor.extend({
      getNumColumns() {
        return 4;
      },
      build() {
        const t = this;
        if (
          ((this.title = this.header = this.label = this.theme.getFormInputLabel(
            this.getTitle(),
            this.isRequired(),
          )),
          (this.input = this.theme.getFormInputField("hidden")),
          this.container.appendChild(this.input),
          !this.schema.readOnly && !this.schema.readonly)
        ) {
          if (!window.FileReader) throw "FileReader required for base64 editor";
          (this.uploader = this.theme.getFormInputField("file")),
            this.uploader.addEventListener("change", function(e) {
              if (
                (e.preventDefault(),
                e.stopPropagation(),
                this.files && this.files.length)
              ) {
                let i = new FileReader();
                (i.onload = function(e) {
                  (t.value = e.target.result),
                    t.refreshPreview(),
                    t.onChange(!0),
                    (i = null);
                }),
                  i.readAsDataURL(this.files[0]);
              }
            });
        }
        (this.preview = this.theme.getFormInputDescription(
          this.schema.description,
        )),
          this.container.appendChild(this.preview),
          (this.control = this.theme.getFormControl(
            this.label,
            this.uploader || this.input,
            this.preview,
          )),
          this.container.appendChild(this.control);
      },
      refreshPreview() {
        if (
          this.last_preview !== this.value &&
          ((this.last_preview = this.value),
          (this.preview.innerHTML = ""),
          this.value)
        ) {
          let t = this.value.match(/^data:([^;,]+)[;,]/);
          if ((t && (t = t[1]), t)) {
            if (
              ((this.preview.innerHTML =
                `<strong>Type:</strong> ${ 
                t 
                }, <strong>Size:</strong> ${ 
                Math.floor(
                  (this.value.length - this.value.split(",")[0].length - 1) /
                    1.33333,
                ) 
                } bytes`),
              t.substr(0, 5) === "image")
            ) {
              this.preview.innerHTML += "<br>";
              const e = document.createElement("img");
              (e.style.maxWidth = "100%"),
                (e.style.maxHeight = "100px"),
                (e.src = this.value),
                this.preview.appendChild(e);
            }
          } else this.preview.innerHTML = "<em>Invalid data URI</em>";
        }
      },
      enable() {
        this.uploader && (this.uploader.disabled = !1), this._super();
      },
      disable() {
        this.uploader && (this.uploader.disabled = !0), this._super();
      },
      setValue(t) {
        this.value !== t &&
          ((this.value = t),
          (this.input.value = this.value),
          this.refreshPreview(),
          this.onChange());
      },
      destroy() {
        this.preview &&
          this.preview.parentNode &&
          this.preview.parentNode.removeChild(this.preview),
          this.title &&
            this.title.parentNode &&
            this.title.parentNode.removeChild(this.title),
          this.input &&
            this.input.parentNode &&
            this.input.parentNode.removeChild(this.input),
          this.uploader &&
            this.uploader.parentNode &&
            this.uploader.parentNode.removeChild(this.uploader),
          this._super();
      },
    })),
    (n.defaults.editors.upload = n.AbstractEditor.extend({
      getNumColumns() {
        return 4;
      },
      build() {
        const t = this;
        if (
          ((this.title = this.header = this.label = this.theme.getFormInputLabel(
            this.getTitle(),
            this.isRequired(),
          )),
          (this.input = this.theme.getFormInputField("hidden")),
          this.container.appendChild(this.input),
          !this.schema.readOnly && !this.schema.readonly)
        ) {
          if (!this.jsoneditor.options.upload)
            throw "Upload handler required for upload editor";
          (this.uploader = this.theme.getFormInputField("file")),
            this.uploader.addEventListener("change", function(e) {
              if (
                (e.preventDefault(),
                e.stopPropagation(),
                this.files && this.files.length)
              ) {
                let i = new FileReader();
                (i.onload = function(e) {
                  (t.preview_value = e.target.result),
                    t.refreshPreview(),
                    t.onChange(!0),
                    (i = null);
                }),
                  i.readAsDataURL(this.files[0]);
              }
            });
        }
        let e = this.schema.description;
        e || (e = ""),
          (this.preview = this.theme.getFormInputDescription(e)),
          this.container.appendChild(this.preview),
          (this.control = this.theme.getFormControl(
            this.label,
            this.uploader || this.input,
            this.preview,
          )),
          this.container.appendChild(this.control);
      },
      refreshPreview() {
        if (
          this.last_preview !== this.preview_value &&
          ((this.last_preview = this.preview_value),
          (this.preview.innerHTML = ""),
          this.preview_value)
        ) {
          const t = this;
            let e = this.preview_value.match(/^data:([^;,]+)[;,]/);
          e && (e = e[1]), e || (e = "unknown");
          const i = this.uploader.files[0];
          if (
            ((this.preview.innerHTML =
              `<strong>Type:</strong> ${ 
              e 
              }, <strong>Size:</strong> ${ 
              i.size 
              } bytes`),
            e.substr(0, 5) === "image")
          ) {
            this.preview.innerHTML += "<br>";
            const s = document.createElement("img");
            (s.style.maxWidth = "100%"),
              (s.style.maxHeight = "100px"),
              (s.src = this.preview_value),
              this.preview.appendChild(s);
          }
          this.preview.innerHTML += "<br>";
          const r = this.getButton("Upload", "upload", "Upload");
          this.preview.appendChild(r),
            r.addEventListener("click", function(e) {
              e.preventDefault(),
                r.setAttribute("disabled", "disabled"),
                t.theme.removeInputError(t.uploader),
                t.theme.getProgressBar &&
                  ((t.progressBar = t.theme.getProgressBar()),
                  t.preview.appendChild(t.progressBar)),
                t.jsoneditor.options.upload(t.path, i, {
                  success(e) {
                    t.setValue(e),
                      t.parent
                        ? t.parent.onChildEditorChange(t)
                        : t.jsoneditor.onChange(),
                      t.progressBar && t.preview.removeChild(t.progressBar),
                      r.removeAttribute("disabled");
                  },
                  failure(e) {
                    t.theme.addInputError(t.uploader, e),
                      t.progressBar && t.preview.removeChild(t.progressBar),
                      r.removeAttribute("disabled");
                  },
                  updateProgress(e) {
                    t.progressBar &&
                      (e
                        ? t.theme.updateProgressBar(t.progressBar, e)
                        : t.theme.updateProgressBarUnknown(t.progressBar));
                  },
                });
            });
        }
      },
      enable() {
        this.uploader && (this.uploader.disabled = !1), this._super();
      },
      disable() {
        this.uploader && (this.uploader.disabled = !0), this._super();
      },
      setValue(t) {
        this.value !== t &&
          ((this.value = t), (this.input.value = this.value), this.onChange());
      },
      destroy() {
        this.preview &&
          this.preview.parentNode &&
          this.preview.parentNode.removeChild(this.preview),
          this.title &&
            this.title.parentNode &&
            this.title.parentNode.removeChild(this.title),
          this.input &&
            this.input.parentNode &&
            this.input.parentNode.removeChild(this.input),
          this.uploader &&
            this.uploader.parentNode &&
            this.uploader.parentNode.removeChild(this.uploader),
          this._super();
      },
    })),
    (n.defaults.editors.checkbox = n.AbstractEditor.extend({
      setValue(t, e) {
        (this.value = !!t), (this.input.checked = this.value), this.onChange();
      },
      register() {
        this._super(),
          this.input && this.input.setAttribute("name", this.formname);
      },
      unregister() {
        this._super(), this.input && this.input.removeAttribute("name");
      },
      getNumColumns() {
        return Math.min(12, Math.max(this.getTitle().length / 7, 2));
      },
      build() {
        const t = this;
        this.options.compact ||
          (this.label = this.header = this.theme.getCheckboxLabel(
            this.getTitle(),
          )),
          this.schema.description &&
            (this.description = this.theme.getFormInputDescription(
              this.schema.description,
            )),
          this.options.compact && (this.container.className += " compact"),
          (this.input = this.theme.getCheckbox()),
          (this.control = this.theme.getFormControl(
            this.label,
            this.input,
            this.description,
          )),
          (this.schema.readOnly || this.schema.readonly) &&
            ((this.always_disabled = !0), (this.input.disabled = !0)),
          this.input.addEventListener("change", function(e) {
            e.preventDefault(),
              e.stopPropagation(),
              (t.value = this.checked),
              t.onChange(!0);
          }),
          this.container.appendChild(this.control);
      },
      enable() {
        this.always_disabled || (this.input.disabled = !1), this._super();
      },
      disable() {
        (this.input.disabled = !0), this._super();
      },
      destroy() {
        this.label &&
          this.label.parentNode &&
          this.label.parentNode.removeChild(this.label),
          this.description &&
            this.description.parentNode &&
            this.description.parentNode.removeChild(this.description),
          this.input &&
            this.input.parentNode &&
            this.input.parentNode.removeChild(this.input),
          this._super();
      },
    }));
  const o = (function() {
    const t = document.documentElement;
    return t.matches
      ? "matches"
      : t.webkitMatchesSelector
      ? "webkitMatchesSelector"
      : t.mozMatchesSelector
      ? "mozMatchesSelector"
      : t.msMatchesSelector
      ? "msMatchesSelector"
      : t.oMatchesSelector
      ? "oMatchesSelector"
      : void 0;
  })();
  (n.AbstractTheme = t.extend({
    getContainer() {
      return document.createElement("div");
    },
    getFloatRightLinkHolder() {
      const t = document.createElement("div");
      return (
        (t.style = t.style || {}),
        (t.style.cssFloat = "right"),
        (t.style.marginLeft = "10px"),
        t
      );
    },
    getModal() {
      const t = document.createElement("div");
      return (
        (t.style.backgroundColor = "white"),
        (t.style.border = "1px solid black"),
        (t.style.boxShadow = "3px 3px black"),
        (t.style.position = "absolute"),
        (t.style.zIndex = "10"),
        (t.style.display = "none"),
        t
      );
    },
    getGridContainer() {
      const t = document.createElement("div");
      return t;
    },
    getGridRow() {
      const t = document.createElement("div");
      return (t.className = "row"), t;
    },
    getGridColumn() {
      const t = document.createElement("div");
      return t;
    },
    setGridColumnSize(t, e) {},
    getLink(t) {
      const e = document.createElement("a");
      return (
        e.setAttribute("href", "#"),
        e.appendChild(document.createTextNode(t)),
        e
      );
    },
    disableHeader(t) {
      t.style.color = "#ccc";
    },
    disableLabel(t) {
      t.style.color = "#ccc";
    },
    enableHeader(t) {
      t.style.color = "";
    },
    enableLabel(t) {
      t.style.color = "";
    },
    getFormInputLabel(t) {
      const e = document.createElement("label");
      return e.appendChild(document.createTextNode(t)), e;
    },
    getCheckboxLabel(t) {
      const e = this.getFormInputLabel(t);
      return (e.style.fontWeight = "normal"), e;
    },
    getHeader(t, e) {
      const i = document.createElement("h3");
      return (
        typeof t === "string" ? (i.textContent = t) : i.appendChild(t),
        e && (i.className += " required"),
        i
      );
    },
    getCheckbox() {
      const t = this.getFormInputField("checkbox");
      return (t.style.display = "inline-block"), (t.style.width = "auto"), t;
    },
    getMultiCheckboxHolder(t, e, i) {
      const s = document.createElement("div");
      e && ((e.style.display = "block"), s.appendChild(e));
      for (const r in t)
        t.hasOwnProperty(r) &&
          ((t[r].style.display = "inline-block"),
          (t[r].style.marginRight = "20px"),
          s.appendChild(t[r]));
      return i && s.appendChild(i), s;
    },
    getSelectInput(t) {
      const e = document.createElement("select");
      return t && this.setSelectOptions(e, t), e;
    },
    getSwitcher(t) {
      const e = this.getSelectInput(t);
      return (
        (e.style.backgroundColor = "transparent"),
        (e.style.display = "inline-block"),
        (e.style.fontStyle = "italic"),
        (e.style.fontWeight = "normal"),
        (e.style.height = "auto"),
        (e.style.marginBottom = 0),
        (e.style.marginLeft = "5px"),
        (e.style.padding = "0 0 0 3px"),
        (e.style.width = "auto"),
        e
      );
    },
    getSwitcherOptions(t) {
      return t.getElementsByTagName("option");
    },
    setSwitcherOptions(t, e, i) {
      this.setSelectOptions(t, e, i);
    },
    setSelectOptions(t, e, i) {
      (i = i || []), (t.innerHTML = "");
      for (let s = 0; s < e.length; s++) {
        const r = document.createElement("option");
        r.setAttribute("value", e[s]),
          (r.textContent = i[s] || e[s]),
          t.appendChild(r);
      }
    },
    getTextareaInput() {
      const t = document.createElement("textarea");
      return (
        (t.style = t.style || {}),
        (t.style.width = "100%"),
        (t.style.height = "300px"),
        (t.style.boxSizing = "border-box"),
        t
      );
    },
    getRangeInput(t, e, i) {
      const s = this.getFormInputField("range");
      return (
        s.setAttribute("min", t),
        s.setAttribute("max", e),
        s.setAttribute("step", i),
        s
      );
    },
    getFormInputField(t) {
      const e = document.createElement("input");
      return e.setAttribute("type", t), e;
    },
    afterInputReady(t) {},
    getFormControl(t, e, i) {
      const s = document.createElement("div");
      return (
        (s.className = "form-control"),
        t && s.appendChild(t),
        e.type === "checkbox"
          ? t.insertBefore(e, t.firstChild)
          : s.appendChild(e),
        i && s.appendChild(i),
        s
      );
    },
    getIndentedPanel() {
      const t = document.createElement("div");
      return (
        (t.style = t.style || {}),
        (t.style.paddingLeft = "10px"),
        (t.style.marginLeft = "10px"),
        (t.style.borderLeft = "1px solid #ccc"),
        t
      );
    },
    getChildEditorHolder() {
      return document.createElement("div");
    },
    getDescription(t) {
      const e = document.createElement("p");
      return (e.innerHTML = t), e;
    },
    getCheckboxDescription(t) {
      return this.getDescription(t);
    },
    getFormInputDescription(t) {
      return this.getDescription(t);
    },
    getHeaderButtonHolder() {
      return this.getButtonHolder();
    },
    getButtonHolder() {
      return document.createElement("div");
    },
    getButton(t, e, i) {
      const s = document.createElement("button");
      return (s.type = "button"), this.setButtonText(s, t, e, i), s;
    },
    setButtonText(t, e, i, s) {
      (t.innerHTML = ""),
        i && (t.appendChild(i), (t.innerHTML += " ")),
        t.appendChild(document.createTextNode(e)),
        s && t.setAttribute("title", s);
    },
    getTable() {
      return document.createElement("table");
    },
    getTableRow() {
      return document.createElement("tr");
    },
    getTableHead() {
      return document.createElement("thead");
    },
    getTableBody() {
      return document.createElement("tbody");
    },
    getTableHeaderCell(t) {
      const e = document.createElement("th");
      return (e.textContent = t), e;
    },
    getTableCell() {
      const t = document.createElement("td");
      return t;
    },
    getErrorMessage(t) {
      const e = document.createElement("p");
      return (
        (e.style = e.style || {}),
        (e.style.color = "red"),
        e.appendChild(document.createTextNode(t)),
        e
      );
    },
    addInputError(t, e) {},
    removeInputError(t) {},
    addTableRowError(t) {},
    removeTableRowError(t) {},
    getTabHolder() {
      const t = document.createElement("div");
      return (
        (t.innerHTML =
          "<div style='float: left; width: 130px;' class='tabs'></div><div class='content' style='margin-left: 130px;'></div><div style='clear:both;'></div>"),
        t
      );
    },
    applyStyles(t, e) {
      t.style = t.style || {};
      for (const i in e) e.hasOwnProperty(i) && (t.style[i] = e[i]);
    },
    closest(t, e) {
      for (; t && t !== document; ) {
        if (!o) return !1;
        if (t[o](e)) return t;
        t = t.parentNode;
      }
      return !1;
    },
    getTab(t) {
      const e = document.createElement("div");
      return (
        e.appendChild(t),
        (e.style = e.style || {}),
        this.applyStyles(e, {
          border: "1px solid #ccc",
          borderWidth: "1px 0 1px 1px",
          textAlign: "center",
          lineHeight: "30px",
          borderRadius: "5px",
          borderBottomRightRadius: 0,
          borderTopRightRadius: 0,
          fontWeight: "bold",
          cursor: "pointer",
        }),
        e
      );
    },
    getTabContentHolder(t) {
      return t.children[1];
    },
    getTabContent() {
      return this.getIndentedPanel();
    },
    markTabActive(t) {
      this.applyStyles(t, { opacity: 1, background: "white" });
    },
    markTabInactive(t) {
      this.applyStyles(t, { opacity: 0.5, background: "" });
    },
    addTab(t, e) {
      t.children[0].appendChild(e);
    },
    getBlockLink() {
      const t = document.createElement("a");
      return (t.style.display = "block"), t;
    },
    getBlockLinkHolder() {
      const t = document.createElement("div");
      return t;
    },
    getLinksHolder() {
      const t = document.createElement("div");
      return t;
    },
    createMediaLink(t, e, i) {
      t.appendChild(e), (i.style.width = "100%"), t.appendChild(i);
    },
    createImageLink(t, e, i) {
      t.appendChild(e), e.appendChild(i);
    },
  })),
    (n.defaults.themes.bootstrap2 = n.AbstractTheme.extend({
      getRangeInput(t, e, i) {
        return this._super(t, e, i);
      },
      getGridContainer() {
        const t = document.createElement("div");
        return (t.className = "container-fluid"), t;
      },
      getGridRow() {
        const t = document.createElement("div");
        return (t.className = "row-fluid"), t;
      },
      getFormInputLabel(t, e) {
        const i = this._super(t);
        return (
          (i.style.display = "inline-block"),
          (i.style.fontWeight = "bold"),
          e && (i.className += " required"),
          i
        );
      },
      setGridColumnSize(t, e) {
        t.className = `span${  e}`;
      },
      getSelectInput(t) {
        const e = this._super(t);
        return (e.style.width = "auto"), (e.style.maxWidth = "98%"), e;
      },
      getFormInputField(t) {
        const e = this._super(t);
        return (e.style.width = "98%"), e;
      },
      afterInputReady(t) {
        t.controlgroup ||
          ((t.controlgroup = this.closest(t, ".control-group")),
          (t.controls = this.closest(t, ".controls")),
          this.closest(t, ".compact") &&
            ((t.controlgroup.className = t.controlgroup.className
              .replace(/control-group/g, "")
              .replace(/[ ]{2,}/g, " ")),
            (t.controls.className = t.controlgroup.className
              .replace(/controls/g, "")
              .replace(/[ ]{2,}/g, " ")),
            (t.style.marginBottom = 0)));
      },
      getIndentedPanel() {
        const t = document.createElement("div");
        return (t.className = "well well-small"), t;
      },
      getFormInputDescription(t) {
        const e = document.createElement("p");
        return (e.className = "help-inline"), (e.textContent = t), e;
      },
      getFormControl(t, e, i) {
        const s = document.createElement("div");
        s.className = "control-group";
        const r = document.createElement("div");
        return (
          (r.className = "controls"),
          t && e.getAttribute("type") === "checkbox"
            ? (s.appendChild(r),
              (t.className += " checkbox"),
              t.appendChild(e),
              r.appendChild(t),
              (r.style.height = "30px"))
            : (t && ((t.className += " control-label"), s.appendChild(t)),
              r.appendChild(e),
              s.appendChild(r)),
          i && r.appendChild(i),
          s
        );
      },
      getHeaderButtonHolder() {
        const t = this.getButtonHolder();
        return (t.style.marginLeft = "10px"), t;
      },
      getButtonHolder() {
        const t = document.createElement("div");
        return (t.className = "btn-group"), t;
      },
      getButton(t, e, i) {
        const s = this._super(t, e, i);
        return (s.className += " btn btn-default"), s;
      },
      getTable() {
        const t = document.createElement("table");
        return (
          (t.className = "table table-bordered"),
          (t.style.width = "auto"),
          (t.style.maxWidth = "none"),
          t
        );
      },
      addInputError(t, e) {
        t.controlgroup &&
          t.controls &&
          ((t.controlgroup.className += " error"),
          t.errmsg
            ? (t.errmsg.style.display = "")
            : ((t.errmsg = document.createElement("p")),
              (t.errmsg.className = "help-block errormsg"),
              t.controls.appendChild(t.errmsg)),
          (t.errmsg.textContent = e));
      },
      removeInputError(t) {
        t.errmsg &&
          ((t.errmsg.style.display = "none"),
          (t.controlgroup.className = t.controlgroup.className.replace(
            /\s?error/g,
            "",
          )));
      },
      getTabHolder() {
        const t = document.createElement("div");
        return (
          (t.className = "tabbable tabs-left"),
          (t.innerHTML =
            "<ul class='nav nav-tabs span2' style='margin-right: 0;'></ul><div class='tab-content span10' style='overflow:visible;'></div>"),
          t
        );
      },
      getTab(t) {
        const e = document.createElement("li");
          const i = document.createElement("a");
        return (
          i.setAttribute("href", "#"), i.appendChild(t), e.appendChild(i), e
        );
      },
      getTabContentHolder(t) {
        return t.children[1];
      },
      getTabContent() {
        const t = document.createElement("div");
        return (t.className = "tab-pane active"), t;
      },
      markTabActive(t) {
        t.className += " active";
      },
      markTabInactive(t) {
        t.className = t.className.replace(/\s?active/g, "");
      },
      addTab(t, e) {
        t.children[0].appendChild(e);
      },
      getProgressBar() {
        const t = document.createElement("div");
        t.className = "progress";
        const e = document.createElement("div");
        return (
          (e.className = "bar"), (e.style.width = "0%"), t.appendChild(e), t
        );
      },
      updateProgressBar(t, e) {
        t && (t.firstChild.style.width = `${e  }%`);
      },
      updateProgressBarUnknown(t) {
        t &&
          ((t.className = "progress progress-striped active"),
          (t.firstChild.style.width = "100%"));
      },
    })),
    (n.defaults.themes.bootstrap3 = n.AbstractTheme.extend({
      getSelectInput(t) {
        const e = this._super(t);
        return (e.className += "form-control"), e;
      },
      setGridColumnSize(t, e) {
        t.className = `col-md-${  e}`;
      },
      afterInputReady(t) {
        t.controlgroup ||
          ((t.controlgroup = this.closest(t, ".form-group")),
          this.closest(t, ".compact") &&
            (t.controlgroup.style.marginBottom = 0));
      },
      getTextareaInput() {
        const t = document.createElement("textarea");
        return (t.className = "form-control"), t;
      },
      getRangeInput(t, e, i) {
        return this._super(t, e, i);
      },
      getFormInputField(t) {
        const e = this._super(t);
        return t !== "checkbox" && (e.className += "form-control"), e;
      },
      getFormControl(t, e, i) {
        const s = document.createElement("div");
        return (
          t && e.type === "checkbox"
            ? ((s.className += " checkbox"),
              t.appendChild(e),
              (t.style.fontSize = "14px"),
              (s.style.marginTop = "0"),
              s.appendChild(t),
              (e.style.position = "relative"),
              (e.style.cssFloat = "left"))
            : ((s.className += " form-group"),
              t && ((t.className += " control-label"), s.appendChild(t)),
              s.appendChild(e)),
          i && s.appendChild(i),
          s
        );
      },
      getIndentedPanel() {
        const t = document.createElement("div");
        return (t.className = "well well-sm"), t;
      },
      getFormInputDescription(t) {
        const e = document.createElement("p");
        return (e.className = "help-block"), (e.innerHTML = t), e;
      },
      getHeaderButtonHolder() {
        const t = this.getButtonHolder();
        return (t.style.marginLeft = "10px"), t;
      },
      getButtonHolder() {
        const t = document.createElement("div");
        return (t.className = "btn-group"), t;
      },
      getButton(t, e, i) {
        const s = this._super(t, e, i);
        return (s.className += "btn btn-default"), s;
      },
      getTable() {
        const t = document.createElement("table");
        return (
          (t.className = "table table-bordered"),
          (t.style.width = "auto"),
          (t.style.maxWidth = "none"),
          t
        );
      },
      addInputError(t, e) {
        t.controlgroup &&
          ((t.controlgroup.className += " has-error"),
          t.errmsg
            ? (t.errmsg.style.display = "")
            : ((t.errmsg = document.createElement("p")),
              (t.errmsg.className = "help-block errormsg"),
              t.controlgroup.appendChild(t.errmsg)),
          (t.errmsg.textContent = e));
      },
      removeInputError(t) {
        t.errmsg &&
          ((t.errmsg.style.display = "none"),
          (t.controlgroup.className = t.controlgroup.className.replace(
            /\s?has-error/g,
            "",
          )));
      },
      getTabHolder() {
        const t = document.createElement("div");
        return (
          (t.innerHTML =
            "<div class='tabs list-group col-md-2'></div><div class='col-md-10'></div>"),
          (t.className = "rows"),
          t
        );
      },
      getTab(t) {
        const e = document.createElement("a");
        return (
          (e.className = "list-group-item"),
          e.setAttribute("href", "#"),
          e.appendChild(t),
          e
        );
      },
      markTabActive(t) {
        t.className += " active";
      },
      markTabInactive(t) {
        t.className = t.className.replace(/\s?active/g, "");
      },
      getProgressBar() {
        const t = 0;
          const e = 100;
          const i = 0;
          const s = document.createElement("div");
        s.className = "progress";
        const r = document.createElement("div");
        return (
          (r.className = "progress-bar"),
          r.setAttribute("role", "progressbar"),
          r.setAttribute("aria-valuenow", i),
          r.setAttribute("aria-valuemin", t),
          r.setAttribute("aria-valuenax", e),
          (r.innerHTML = `${i  }%`),
          s.appendChild(r),
          s
        );
      },
      updateProgressBar(t, e) {
        if (t) {
          const i = t.firstChild;
            const s = `${e  }%`;
          i.setAttribute("aria-valuenow", e),
            (i.style.width = s),
            (i.innerHTML = s);
        }
      },
      updateProgressBarUnknown(t) {
        if (t) {
          const e = t.firstChild;
          (t.className = "progress progress-striped active"),
            e.removeAttribute("aria-valuenow"),
            (e.style.width = "100%"),
            (e.innerHTML = "");
        }
      },
    })),
    (n.defaults.themes.foundation = n.AbstractTheme.extend({
      getChildEditorHolder() {
        const t = document.createElement("div");
        return (t.style.marginBottom = "15px"), t;
      },
      getSelectInput(t) {
        const e = this._super(t);
        return (
          (e.style.minWidth = "none"),
          (e.style.padding = "5px"),
          (e.style.marginTop = "3px"),
          e
        );
      },
      getSwitcher(t) {
        const e = this._super(t);
        return (e.style.paddingRight = "8px"), e;
      },
      afterInputReady(t) {
        this.closest(t, ".compact") && (t.style.marginBottom = 0),
          (t.group = this.closest(t, ".form-control"));
      },
      getFormInputLabel(t, e) {
        const i = this._super(t);
        return (
          (i.style.display = "inline-block"),
          e && (i.className += " required"),
          i
        );
      },
      getFormInputField(t) {
        const e = this._super(t);
        return (
          (e.style.width = "100%"),
          (e.style.marginBottom = t === "checkbox" ? "0" : "12px"),
          e
        );
      },
      getFormInputDescription(t) {
        const e = document.createElement("p");
        return (
          (e.textContent = t),
          (e.style.marginTop = "-10px"),
          (e.style.fontStyle = "italic"),
          e
        );
      },
      getIndentedPanel() {
        const t = document.createElement("div");
        return (t.className = "panel"), t;
      },
      getHeaderButtonHolder() {
        const t = this.getButtonHolder();
        return (
          (t.style.display = "inline-block"),
          (t.style.marginLeft = "10px"),
          (t.style.verticalAlign = "middle"),
          t
        );
      },
      getButtonHolder() {
        const t = document.createElement("div");
        return (t.className = "button-group"), t;
      },
      getButton(t, e, i) {
        const s = this._super(t, e, i);
        return (s.className += " small button"), s;
      },
      addInputError(t, e) {
        t.group &&
          ((t.group.className += " error"),
          t.errmsg
            ? (t.errmsg.style.display = "")
            : (t.insertAdjacentHTML(
                "afterend",
                '<small class="error"></small>',
              ),
              (t.errmsg = t.parentNode.getElementsByClassName("error")[0])),
          (t.errmsg.textContent = e));
      },
      removeInputError(t) {
        t.errmsg &&
          ((t.group.className = t.group.className.replace(/ error/g, "")),
          (t.errmsg.style.display = "none"));
      },
      getProgressBar() {
        const t = document.createElement("div");
        t.className = "progress";
        const e = document.createElement("span");
        return (
          (e.className = "meter"), (e.style.width = "0%"), t.appendChild(e), t
        );
      },
      updateProgressBar(t, e) {
        t && (t.firstChild.style.width = `${e  }%`);
      },
      updateProgressBarUnknown(t) {
        t && (t.firstChild.style.width = "100%");
      },
    })),
    (n.defaults.themes.foundation3 = n.defaults.themes.foundation.extend({
      getHeaderButtonHolder() {
        const t = this._super();
        return (t.style.fontSize = ".6em"), t;
      },
      getFormInputLabel(t, e) {
        const i = this._super(t);
        return (
          (i.style.fontWeight = "bold"), e && (i.className += " required"), i
        );
      },
      getTabHolder() {
        const t = document.createElement("div");
        return (
          (t.className = "row"),
          (t.innerHTML =
            "<dl class='tabs vertical two columns'></dl><div class='tabs-content ten columns'></div>"),
          t
        );
      },
      setGridColumnSize(t, e) {
        const i = [
          "zero",
          "one",
          "two",
          "three",
          "four",
          "five",
          "six",
          "seven",
          "eight",
          "nine",
          "ten",
          "eleven",
          "twelve",
        ];
        t.className = `columns ${  i[e]}`;
      },
      getTab(t) {
        const e = document.createElement("dd");
          const i = document.createElement("a");
        return (
          i.setAttribute("href", "#"), i.appendChild(t), e.appendChild(i), e
        );
      },
      getTabContentHolder(t) {
        return t.children[1];
      },
      getTabContent() {
        const t = document.createElement("div");
        return (
          (t.className = "content active"), (t.style.paddingLeft = "5px"), t
        );
      },
      markTabActive(t) {
        t.className += " active";
      },
      markTabInactive(t) {
        t.className = t.className.replace(/\s*active/g, "");
      },
      addTab(t, e) {
        t.children[0].appendChild(e);
      },
    })),
    (n.defaults.themes.foundation4 = n.defaults.themes.foundation.extend({
      getHeaderButtonHolder() {
        const t = this._super();
        return (t.style.fontSize = ".6em"), t;
      },
      setGridColumnSize(t, e) {
        t.className = `columns large-${  e}`;
      },
      getFormInputDescription(t) {
        const e = this._super(t);
        return (e.style.fontSize = ".8rem"), e;
      },
      getFormInputLabel(t, e) {
        const i = this._super(t);
        return (
          (i.style.fontWeight = "bold"), e && (i.className += " required"), i
        );
      },
    })),
    (n.defaults.themes.foundation5 = n.defaults.themes.foundation.extend({
      getFormInputDescription(t) {
        const e = this._super(t);
        return (e.style.fontSize = ".8rem"), e;
      },
      setGridColumnSize(t, e) {
        t.className = `columns medium-${  e}`;
      },
      getButton(t, e, i) {
        const s = this._super(t, e, i);
        return (
          (s.className = `${s.className.replace(/\s*small/g, "")  } tiny`), s
        );
      },
      getTabHolder() {
        const t = document.createElement("div");
        return (
          (t.innerHTML =
            "<dl class='tabs vertical'></dl><div class='tabs-content vertical'></div>"),
          t
        );
      },
      getTab(t) {
        const e = document.createElement("dd");
          const i = document.createElement("a");
        return (
          i.setAttribute("href", "#"), i.appendChild(t), e.appendChild(i), e
        );
      },
      getTabContentHolder(t) {
        return t.children[1];
      },
      getTabContent() {
        const t = document.createElement("div");
        return (
          (t.className = "content active"), (t.style.paddingLeft = "5px"), t
        );
      },
      markTabActive(t) {
        t.className += " active";
      },
      markTabInactive(t) {
        t.className = t.className.replace(/\s*active/g, "");
      },
      addTab(t, e) {
        t.children[0].appendChild(e);
      },
    })),
    (n.defaults.themes.html = n.AbstractTheme.extend({
      getFormInputLabel(t, e) {
        const i = this._super(t);
        return (
          (i.style.display = "block"),
          (i.style.marginBottom = "3px"),
          (i.style.fontWeight = "bold"),
          e && (i.className += " required"),
          i
        );
      },
      getFormInputDescription(t) {
        const e = this._super(t);
        return (
          (e.style.fontSize = ".8em"),
          (e.style.margin = 0),
          (e.style.display = "inline-block"),
          (e.style.fontStyle = "italic"),
          e
        );
      },
      getIndentedPanel() {
        const t = this._super();
        return (
          (t.style.border = "1px solid #ddd"),
          (t.style.padding = "5px"),
          (t.style.margin = "5px"),
          (t.style.borderRadius = "3px"),
          t
        );
      },
      getChildEditorHolder() {
        const t = this._super();
        return (t.style.marginBottom = "8px"), t;
      },
      getHeaderButtonHolder() {
        const t = this.getButtonHolder();
        return (
          (t.style.display = "inline-block"),
          (t.style.marginLeft = "10px"),
          (t.style.fontSize = ".8em"),
          (t.style.verticalAlign = "middle"),
          t
        );
      },
      getTable() {
        const t = this._super();
        return (
          (t.style.borderBottom = "1px solid #ccc"),
          (t.style.marginBottom = "5px"),
          t
        );
      },
      addInputError(t, e) {
        if (((t.style.borderColor = "red"), t.errmsg))
          t.errmsg.style.display = "block";
        else {
          const i = this.closest(t, ".form-control");
          (t.errmsg = document.createElement("div")),
            t.errmsg.setAttribute("class", "errmsg"),
            (t.errmsg.style = t.errmsg.style || {}),
            (t.errmsg.style.color = "red"),
            i.appendChild(t.errmsg);
        }
        (t.errmsg.innerHTML = ""),
          t.errmsg.appendChild(document.createTextNode(e));
      },
      removeInputError(t) {
        (t.style.borderColor = ""),
          t.errmsg && (t.errmsg.style.display = "none");
      },
      getProgressBar() {
        const t = 100;
          const e = 0;
          const i = document.createElement("progress");
        return i.setAttribute("max", t), i.setAttribute("value", e), i;
      },
      updateProgressBar(t, e) {
        t && t.setAttribute("value", e);
      },
      updateProgressBarUnknown(t) {
        t && t.removeAttribute("value");
      },
    })),
    (n.defaults.themes.jqueryui = n.AbstractTheme.extend({
      getTable() {
        const t = this._super();
        return (
          t.setAttribute("cellpadding", 5), t.setAttribute("cellspacing", 0), t
        );
      },
      getTableHeaderCell(t) {
        const e = this._super(t);
        return (
          (e.className = "ui-state-active"), (e.style.fontWeight = "bold"), e
        );
      },
      getTableCell() {
        const t = this._super();
        return (t.className = "ui-widget-content"), t;
      },
      getHeaderButtonHolder() {
        const t = this.getButtonHolder();
        return (
          (t.style.marginLeft = "10px"),
          (t.style.fontSize = ".6em"),
          (t.style.display = "inline-block"),
          t
        );
      },
      getFormInputDescription(t) {
        const e = this.getDescription(t);
        return (
          (e.style.marginLeft = "10px"), (e.style.display = "inline-block"), e
        );
      },
      getFormControl(t, e, i) {
        const s = this._super(t, e, i);
        return (
          e.type === "checkbox"
            ? ((s.style.lineHeight = "25px"), (s.style.padding = "3px 0"))
            : (s.style.padding = "4px 0 8px 0"),
          s
        );
      },
      getDescription(t) {
        const e = document.createElement("span");
        return (
          (e.style.fontSize = ".8em"),
          (e.style.fontStyle = "italic"),
          (e.textContent = t),
          e
        );
      },
      getButtonHolder() {
        const t = document.createElement("div");
        return (t.className = "ui-buttonset"), (t.style.fontSize = ".7em"), t;
      },
      getFormInputLabel(t, e) {
        const i = document.createElement("label");
        return (
          (i.style.fontWeight = "bold"),
          (i.style.display = "block"),
          e && (i.className += " required"),
          (i.textContent = t),
          i
        );
      },
      getButton(t, e, i) {
        const s = document.createElement("button");
        (s.className = "ui-button ui-widget ui-state-default ui-corner-all"),
          e && !t
            ? ((s.className += " ui-button-icon-only"),
              (e.className += " ui-button-icon-primary ui-icon-primary"),
              s.appendChild(e))
            : e
            ? ((s.className += " ui-button-text-icon-primary"),
              (e.className += " ui-button-icon-primary ui-icon-primary"),
              s.appendChild(e))
            : (s.className += " ui-button-text-only");
        const r = document.createElement("span");
        return (
          (r.className = "ui-button-text"),
          (r.textContent = t || i || "."),
          s.appendChild(r),
          s.setAttribute("title", i),
          s
        );
      },
      setButtonText(t, e, i, s) {
        (t.innerHTML = ""),
          (t.className = "ui-button ui-widget ui-state-default ui-corner-all"),
          i && !e
            ? ((t.className += " ui-button-icon-only"),
              (i.className += " ui-button-icon-primary ui-icon-primary"),
              t.appendChild(i))
            : i
            ? ((t.className += " ui-button-text-icon-primary"),
              (i.className += " ui-button-icon-primary ui-icon-primary"),
              t.appendChild(i))
            : (t.className += " ui-button-text-only");
        const r = document.createElement("span");
        (r.className = "ui-button-text"),
          (r.textContent = e || s || "."),
          t.appendChild(r),
          t.setAttribute("title", s);
      },
      getIndentedPanel() {
        const t = document.createElement("div");
        return (
          (t.className = "ui-widget-content ui-corner-all"),
          (t.style.padding = "1em 1.4em"),
          (t.style.marginBottom = "20px"),
          t
        );
      },
      afterInputReady(t) {
        t.controls || (t.controls = this.closest(t, ".form-control"));
      },
      addInputError(t, e) {
        t.controls &&
          (t.errmsg
            ? (t.errmsg.style.display = "")
            : ((t.errmsg = document.createElement("div")),
              (t.errmsg.className = "ui-state-error"),
              t.controls.appendChild(t.errmsg)),
          (t.errmsg.textContent = e));
      },
      removeInputError(t) {
        t.errmsg && (t.errmsg.style.display = "none");
      },
      markTabActive(t) {
        t.className =
          `${t.className.replace(/\s*ui-widget-header/g, "")  } ui-state-active`;
      },
      markTabInactive(t) {
        t.className =
          `${t.className.replace(/\s*ui-state-active/g, "")  } ui-widget-header`;
      },
    })),
    (n.AbstractIconLib = t.extend({
      mapping: {
        collapse: "",
        expand: "",
        delete: "",
        edit: "",
        add: "",
        cancel: "",
        save: "",
        moveup: "",
        movedown: "",
      },
      icon_prefix: "",
      getIconClass(t) {
        return this.mapping[t] ? this.icon_prefix + this.mapping[t] : null;
      },
      getIcon(t) {
        const e = this.getIconClass(t);
        if (!e) return null;
        const i = document.createElement("i");
        return (i.className = e), i;
      },
    })),
    (n.defaults.iconlibs.bootstrap2 = n.AbstractIconLib.extend({
      mapping: {
        collapse: "chevron-down",
        expand: "chevron-up",
        delete: "trash",
        edit: "pencil",
        add: "plus",
        cancel: "ban-circle",
        save: "ok",
        moveup: "arrow-up",
        movedown: "arrow-down",
      },
      icon_prefix: "icon-",
    })),
    (n.defaults.iconlibs.bootstrap3 = n.AbstractIconLib.extend({
      mapping: {
        collapse: "chevron-down",
        expand: "chevron-right",
        delete: "remove",
        edit: "pencil",
        add: "plus",
        cancel: "floppy-remove",
        save: "floppy-saved",
        moveup: "arrow-up",
        movedown: "arrow-down",
      },
      icon_prefix: "glyphicon glyphicon-",
    })),
    (n.defaults.iconlibs.fontawesome3 = n.AbstractIconLib.extend({
      mapping: {
        collapse: "chevron-down",
        expand: "chevron-right",
        delete: "remove",
        edit: "pencil",
        add: "plus",
        cancel: "ban-circle",
        save: "save",
        moveup: "arrow-up",
        movedown: "arrow-down",
      },
      icon_prefix: "icon-",
    })),
    (n.defaults.iconlibs.fontawesome4 = n.AbstractIconLib.extend({
      mapping: {
        collapse: "caret-square-o-down",
        expand: "caret-square-o-right",
        delete: "times",
        edit: "pencil",
        add: "plus",
        cancel: "ban",
        save: "save",
        moveup: "arrow-up",
        movedown: "arrow-down",
      },
      icon_prefix: "fa fa-",
    })),
    (n.defaults.iconlibs.foundation2 = n.AbstractIconLib.extend({
      mapping: {
        collapse: "minus",
        expand: "plus",
        delete: "remove",
        edit: "edit",
        add: "add-doc",
        cancel: "error",
        save: "checkmark",
        moveup: "up-arrow",
        movedown: "down-arrow",
      },
      icon_prefix: "foundicon-",
    })),
    (n.defaults.iconlibs.foundation3 = n.AbstractIconLib.extend({
      mapping: {
        collapse: "minus",
        expand: "plus",
        delete: "x",
        edit: "pencil",
        add: "page-add",
        cancel: "x-circle",
        save: "save",
        moveup: "arrow-up",
        movedown: "arrow-down",
      },
      icon_prefix: "fi-",
    })),
    (n.defaults.iconlibs.jqueryui = n.AbstractIconLib.extend({
      mapping: {
        collapse: "triangle-1-s",
        expand: "triangle-1-e",
        delete: "trash",
        edit: "pencil",
        add: "plusthick",
        cancel: "closethick",
        save: "disk",
        moveup: "arrowthick-1-n",
        movedown: "arrowthick-1-s",
      },
      icon_prefix: "ui-icon ui-icon-",
    })),
    (n.defaults.templates.default = function() {
      return {
        compile(t) {
          const e = t.match(/{{\s*([a-zA-Z0-9\-_ \.]+)\s*}}/g);
            const i = e && e.length;
          if (!i)
            return function() {
              return t;
            };
          for (
            var s = [],
              r = function(t) {
                let i;
                  let r = e[t]
                    .replace(/[{}]+/g, "")
                    .trim()
                    .split(".");
                  const n = r.length;
                if (n > 1) {
                  let o;
                  i = function(e) {
                    for (o = e, t = 0; n > t && (o = o[r[t]]); t++);
                    return o;
                  };
                } else
                  (r = r[0]),
                    (i = function(t) {
                      return t[r];
                    });
                s.push({ s: e[t], r: i });
              },
              n = 0;
            i > n;
            n++
          )
            r(n);
          return function(e) {
            let r;
              let o = `${t  }`;
            for (n = 0; i > n; n++) (r = s[n]), (o = o.replace(r.s, r.r(e)));
            return o;
          };
        },
      };
    }),
    (n.defaults.templates.ejs = function() {
      return (
        !!window.EJS && {
          compile(t) {
            const e = new window.EJS({ text: t });
            return function(t) {
              return e.render(t);
            };
          },
        }
      );
    }),
    (n.defaults.templates.handlebars = function() {
      return window.Handlebars;
    }),
    (n.defaults.templates.hogan = function() {
      return (
        !!window.Hogan && {
          compile(t) {
            const e = window.Hogan.compile(t);
            return function(t) {
              return e.render(t);
            };
          },
        }
      );
    }),
    (n.defaults.templates.markup = function() {
      return (
        !(!window.Mark || !window.Mark.up) && {
          compile(t) {
            return function(e) {
              return window.Mark.up(t, e);
            };
          },
        }
      );
    }),
    (n.defaults.templates.mustache = function() {
      return (
        !!window.Mustache && {
          compile(t) {
            return function(e) {
              return window.Mustache.render(t, e);
            };
          },
        }
      );
    }),
    (n.defaults.templates.swig = function() {
      return window.swig;
    }),
    (n.defaults.templates.underscore = function() {
      return (
        !!window._ && {
          compile(t) {
            return function(e) {
              return window._.template(t, e);
            };
          },
        }
      );
    }),
    (n.defaults.theme = "html"),
    (n.defaults.template = "default"),
    (n.defaults.options = {}),
    (n.defaults.translate = function(t, e) {
      const i = n.defaults.languages[n.defaults.language];
      if (!i) throw `Unknown language ${  n.defaults.language}`;
      let s = i[t] || n.defaults.languages[n.defaults.default_language][t];
      if (typeof s === "undefined") throw `Unknown translate string ${  t}`;
      if (e)
        for (let r = 0; r < e.length; r++)
          s = s.replace(new RegExp(`\\{\\{${  r  }}}`, "g"), e[r]);
      return s;
    }),
    (n.defaults.default_language = "en"),
    (n.defaults.language = n.defaults.default_language),
    (n.defaults.languages.en = {
      error_notset: "Property must be set",
      error_notempty: "Value required",
      error_enum: "Value must be one of the enumerated values",
      error_anyOf:
        "Value must validate against at least one of the provided schemas",
      error_oneOf:
        "Value must validate against exactly one of the provided schemas. It currently validates against {{0}} of the schemas.",
      error_not: "Value must not validate against the provided schema",
      error_type_union: "Value must be one of the provided types",
      error_type: "Value must be of type {{0}}",
      error_disallow_union:
        "Value must not be one of the provided disallowed types",
      error_disallow: "Value must not be of type {{0}}",
      error_multipleOf: "Value must be a multiple of {{0}}",
      error_maximum_excl: "Value must be less than {{0}}",
      error_maximum_incl: "Value must at most {{0}}",
      error_minimum_excl: "Value must be greater than {{0}}",
      error_minimum_incl: "Value must be at least {{0}}",
      error_maxLength: "Value must be at most {{0}} characters long",
      error_minLength: "Value must be at least {{0}} characters long",
      error_pattern: "Value must match the provided pattern",
      error_additionalItems: "No additional items allowed in this array",
      error_maxItems: "Value must have at most {{0}} items",
      error_minItems: "Value must have at least {{0}} items",
      error_uniqueItems: "Array must have unique items",
      error_maxProperties: "Object must have at most {{0}} properties",
      error_minProperties: "Object must have at least {{0}} properties",
      error_required: "Object is missing the required property '{{0}}'",
      error_additional_properties:
        "No additional properties allowed, but property {{0}} is set",
      error_dependency: "Must have property {{0}}",
    }),
    (n.plugins = {
      ace: { theme: "" },
      epiceditor: {},
      sceditor: {},
      select2: {},
    });
  for (var a in n.defaults.editors)
    n.defaults.editors.hasOwnProperty(a) &&
      (n.defaults.editors[a].options = n.defaults.editors.options || {});
  n.defaults.resolvers.unshift(function(t) {
    return typeof t.type !== "string" ? "multiple" : void 0;
  }),
    n.defaults.resolvers.unshift(function(t) {
      return !t.type && t.properties ? "object" : void 0;
    }),
    n.defaults.resolvers.unshift(function(t) {
      return typeof t.type === "string" ? t.type : void 0;
    }),
    n.defaults.resolvers.unshift(function(t) {
      return t.type === "boolean"
        ? t.format === "checkbox" || (t.options && t.options.checkbox)
          ? "checkbox"
          : "select"
        : void 0;
    }),
    n.defaults.resolvers.unshift(function(t) {
      return t.type === "any" ? "multiple" : void 0;
    }),
    n.defaults.resolvers.unshift(function(t) {
      return t.type === "string" &&
        t.media &&
        t.media.binaryEncoding === "base64"
        ? "base64"
        : void 0;
    }),
    n.defaults.resolvers.unshift(function(t) {
      return t.type === "string" &&
        t.format === "url" &&
        t.options &&
        t.options.upload === !0 &&
        window.FileReader
        ? "upload"
        : void 0;
    }),
    n.defaults.resolvers.unshift(function(t) {
      return t.type == "array" && t.format == "table" ? "table" : void 0;
    }),
    n.defaults.resolvers.unshift(function(t) {
      return t.enumSource ? "select" : void 0;
    }),
    n.defaults.resolvers.unshift(function(t) {
      if (t.enum) {
        if (t.type === "array" || t.type === "object") return "enum";
        if (t.type === "number" || t.type === "integer" || t.type === "string")
          return "select";
      }
    }),
    n.defaults.resolvers.unshift(function(t) {
      return t.type === "array" &&
        t.items &&
        !Array.isArray(t.items) &&
        t.uniqueItems &&
        t.items.enum &&
        ["string", "number", "integer"].indexOf(t.items.type) >= 0
        ? "multiselect"
        : void 0;
    }),
    n.defaults.resolvers.unshift(function(t) {
      return t.oneOf ? "multiple" : void 0;
    }),
    (function() {
      if (window.jQuery || window.Zepto) {
        const t = window.jQuery || window.Zepto;
        (t.jsoneditor = n.defaults),
          (t.fn.jsoneditor = function(t) {
            const e = this;
              let i = this.data("jsoneditor");
            if (t === "value") {
              if (!i)
                throw "Must initialize jsoneditor before getting/setting the value";
              if (!(arguments.length > 1)) return i.getValue();
              i.setValue(arguments[1]);
            } else {
              if (t === "validate") {
                if (!i) throw "Must initialize jsoneditor before validating";
                return arguments.length > 1
                  ? i.validate(arguments[1])
                  : i.validate();
              }
              t === "destroy"
                ? i && (i.destroy(), this.data("jsoneditor", null))
                : (i && i.destroy(),
                  (i = new n(this.get(0), t)),
                  this.data("jsoneditor", i),
                  i.on("change", function() {
                    e.trigger("change");
                  }),
                  i.on("ready", function() {
                    e.trigger("ready");
                  }));
            }
            return this;
          });
      }
    })(),
    (window.JSONEditor = n);
})();
