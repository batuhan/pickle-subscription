!(function(t) {
  
  function e(t, i) {
    return new e.prototype.init(t, i);
  }
  Function.prototype.bind ||
    (Function.prototype.bind = function(t) {
      const e = this;
      return function() {
        return e.apply(t);
      };
    });
  let i = 0;
  (t.fn.redactor = function(i) {
    const o = [];
      const r = Array.prototype.slice.call(arguments, 1);
    return (
      typeof i === "string"
        ? this.each(function() {
            let e;
              const s = t.data(this, "redactor");
            if (
              (i.search(/\./) !== "-1"
                ? ((e = i.split(".")),
                  typeof s[e[0]] !== "undefined" && (e = s[e[0]][e[1]]))
                : (e = s[i]),
              typeof s !== "undefined" && t.isFunction(e))
            ) {
              const n = e.apply(s, r);
              void 0 !== n && n !== s && o.push(n);
            } else t.error(`No such method "${  i  }" for Redactor`);
          })
        : this.each(function() {
            t.data(this, "redactor", {}), t.data(this, "redactor", e(this, i));
          }),
      o.length === 0 ? this : o.length === 1 ? o[0] : o
    );
  }),
    (t.Redactor = e),
    (t.Redactor.VERSION = "2.1"),
    (t.Redactor.modules = [
      "air",
      "autosave",
      "block",
      "buffer",
      "build",
      "button",
      "caret",
      "clean",
      "code",
      "core",
      "detect",
      "dropdown",
      "events",
      "file",
      "focus",
      "image",
      "indent",
      "inline",
      "insert",
      "keydown",
      "keyup",
      "lang",
      "line",
      "link",
      "linkify",
      "list",
      "marker",
      "modal",
      "observe",
      "offset",
      "paragraphize",
      "paste",
      "placeholder",
      "progress",
      "selection",
      "shortcuts",
      "storage",
      "toolbar",
      "upload",
      "uploads3",
      "utils",
      "browser",
    ]),
    (t.Redactor.settings = {}),
    (t.Redactor.opts = {
      animation: !1,
      lang: "en",
      direction: "ltr",
      spellcheck: !0,
      overrideStyles: !0,
      scrollTarget: document,
      focus: !1,
      focusEnd: !1,
      clickToEdit: !1,
      structure: !1,
      tabindex: !1,
      minHeight: !1,
      maxHeight: !1,
      maxWidth: !1,
      plugins: !1,
      callbacks: {},
      placeholder: !1,
      linkify: !0,
      enterKey: !0,
      pastePlainText: !1,
      pasteImages: !0,
      pasteLinks: !0,
      pasteBlockTags: [
        "pre",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "table",
        "tbody",
        "thead",
        "tfoot",
        "th",
        "tr",
        "td",
        "ul",
        "ol",
        "li",
        "blockquote",
        "p",
        "figure",
        "figcaption",
      ],
      pasteInlineTags: [
        "br",
        "strong",
        "ins",
        "code",
        "del",
        "span",
        "samp",
        "kbd",
        "sup",
        "sub",
        "mark",
        "var",
        "cite",
        "small",
        "b",
        "u",
        "em",
        "i",
      ],
      preClass: !1,
      preSpaces: 4,
      tabAsSpaces: !1,
      tabKey: !0,
      autosave: !1,
      autosaveName: !1,
      autosaveFields: !1,
      imageUpload: null,
      imageUploadParam: "file",
      imageUploadFields: !1,
      imageUploadForms: !1,
      imageTag: "figure",
      imageEditable: !0,
      imageCaption: !0,
      imagePosition: !1,
      imageResizable: !1,
      imageFloatMargin: "10px",
      dragImageUpload: !0,
      multipleImageUpload: !0,
      clipboardImageUpload: !0,
      fileUpload: null,
      fileUploadParam: "file",
      fileUploadFields: !1,
      fileUploadForms: !1,
      dragFileUpload: !0,
      s3: !1,
      linkNewTab: !1,
      linkTooltip: !0,
      linkNofollow: !1,
      linkSize: 30,
      pasteLinkTarget: !1,
      videoContainerClass: "video-container",
      toolbar: !0,
      toolbarFixed: !0,
      toolbarFixedTarget: document,
      toolbarFixedTopOffset: 0,
      toolbarExternal: !1,
      air: !1,
      airWidth: !1,
      formatting: [
        "p",
        "blockquote",
        "pre",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
      ],
      formattingAdd: !1,
      buttons: [
        "format",
        "bold",
        "italic",
        "deleted",
        "lists",
        "image",
        "file",
        "link",
      ],
      buttonsHide: [],
      buttonsHideOnMobile: [],
      script: !0,
      removeNewlines: !1,
      removeComments: !0,
      replaceTags: { b: "strong", i: "em", strike: "del" },
      shortcuts: {
        "ctrl+shift+m, meta+shift+m": { func: "inline.removeFormat" },
        "ctrl+b, meta+b": { func: "inline.format", params: ["bold"] },
        "ctrl+i, meta+i": { func: "inline.format", params: ["italic"] },
        "ctrl+h, meta+h": { func: "inline.format", params: ["superscript"] },
        "ctrl+l, meta+l": { func: "inline.format", params: ["subscript"] },
        "ctrl+k, meta+k": { func: "link.show" },
        "ctrl+shift+7": { func: "list.toggle", params: ["orderedlist"] },
        "ctrl+shift+8": { func: "list.toggle", params: ["unorderedlist"] },
      },
      shortcutsAdd: !1,
      activeButtons: ["deleted", "italic", "bold"],
      activeButtonsStates: {
        b: "bold",
        strong: "bold",
        i: "italic",
        em: "italic",
        del: "deleted",
        strike: "deleted",
      },
      langs: {
        en: {
          format: "Format",
          image: "Image",
          file: "File",
          link: "Link",
          bold: "Bold",
          italic: "Italic",
          deleted: "Strikethrough",
          underline: "Underline",
          "bold-abbr": "B",
          "italic-abbr": "I",
          "deleted-abbr": "S",
          "underline-abbr": "U",
          lists: "Lists",
          "link-insert": "Insert link",
          "link-edit": "Edit link",
          "link-in-new-tab": "Open link in new tab",
          unlink: "Unlink",
          cancel: "Cancel",
          close: "Close",
          insert: "Insert",
          save: "Save",
          delete: "Delete",
          text: "Text",
          edit: "Edit",
          title: "Title",
          paragraph: "Normal text",
          quote: "Quote",
          code: "Code",
          heading1: "Heading 1",
          heading2: "Heading 2",
          heading3: "Heading 3",
          heading4: "Heading 4",
          heading5: "Heading 5",
          heading6: "Heading 6",
          filename: "Name",
          optional: "optional",
          unorderedlist: "Unordered List",
          orderedlist: "Ordered List",
          outdent: "Outdent",
          indent: "Indent",
          horizontalrule: "Line",
          "upload-label": "Drop file here or ",
          caption: "Caption",
          bulletslist: "Bullets",
          numberslist: "Numbers",
          "image-position": "Position",
          none: "None",
          left: "Left",
          right: "Right",
          center: "Center",
          "accessibility-help-label": "Rich text editor",
        },
      },
      type: "textarea",
      inline: !1,
      buffer: [],
      rebuffer: [],
      inlineTags: [
        "a",
        "span",
        "strong",
        "strike",
        "b",
        "u",
        "em",
        "i",
        "code",
        "del",
        "ins",
        "samp",
        "kbd",
        "sup",
        "sub",
        "mark",
        "var",
        "cite",
        "small",
      ],
      blockTags: [
        "pre",
        "ul",
        "ol",
        "li",
        "p",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "dl",
        "dt",
        "dd",
        "div",
        "td",
        "blockquote",
        "output",
        "figcaption",
        "figure",
        "address",
        "section",
        "header",
        "footer",
        "aside",
        "article",
        "iframe",
      ],
      paragraphize: !0,
      paragraphizeBlocks: [
        "table",
        "div",
        "pre",
        "form",
        "ul",
        "ol",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "dl",
        "blockquote",
        "figcaption",
        "address",
        "section",
        "header",
        "footer",
        "aside",
        "article",
        "object",
        "style",
        "script",
        "iframe",
        "select",
        "input",
        "textarea",
        "button",
        "option",
        "map",
        "area",
        "math",
        "hr",
        "fieldset",
        "legend",
        "hgroup",
        "nav",
        "figure",
        "details",
        "menu",
        "summary",
        "p",
      ],
      emptyHtml: "<p>&#x200b;</p>",
      invisibleSpace: "&#x200b;",
      imageTypes: ["image/png", "image/jpeg", "image/gif"],
      userAgent: navigator.userAgent.toLowerCase(),
      observe: { dropdowns: [] },
      regexps: {
        linkyoutube: /https?:\/\/(?:[0-9A-Z-]+\.)?(?:youtu\.be\/|youtube\.com\S*[^\w\-\s])([\w\-]{11})(?=[^\w\-]|$)(?![?=&+%\w.\-]*(?:['"][^<>]*>|<\/a>))[?=&+%\w.-]*/gi,
        linkvimeo: /https?:\/\/(www\.)?vimeo.com\/(\d+)($|\/)/,
        linkimage: /((https?|www)[^\s]+\.)(jpe?g|png|gif)(\?[^\s-]+)?/gi,
        url: /(https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,}|www\.[^\s]+\.[^\s]{2,})/gi,
      },
    }),
    (e.fn = t.Redactor.prototype = {
      keyCode: {
        BACKSPACE: 8,
        DELETE: 46,
        UP: 38,
        DOWN: 40,
        ENTER: 13,
        SPACE: 32,
        ESC: 27,
        TAB: 9,
        CTRL: 17,
        META: 91,
        SHIFT: 16,
        ALT: 18,
        RIGHT: 39,
        LEFT: 37,
        LEFT_WIN: 91,
      },
      init(e, o) {
        return (
          (this.$element = t(e)),
          (this.uuid = i++),
          this.loadOptions(o),
          this.loadModules(),
          this.opts.clickToEdit &&
          !this.$element.hasClass("redactor-click-to-edit")
            ? this.loadToEdit(o)
            : (this.$element.hasClass("redactor-click-to-edit") &&
                this.$element.removeClass("redactor-click-to-edit"),
              (this.reIsBlock = new RegExp(
                `^(${  this.opts.blockTags.join("|").toUpperCase()  })$`,
                "i",
              )),
              (this.reIsInline = new RegExp(
                `^(${  this.opts.inlineTags.join("|").toUpperCase()  })$`,
                "i",
              )),
              (this.opts.dragImageUpload =
                this.opts.imageUpload === null
                  ? !1
                  : this.opts.dragImageUpload),
              (this.opts.dragFileUpload =
                this.opts.fileUpload === null ? !1 : this.opts.dragFileUpload),
              (this.formatting = {}),
              this.lang.load(),
              t.extend(this.opts.shortcuts, this.opts.shortcutsAdd),
              (this.$editor = this.$element),
              this.detectType(),
              this.core.callback("start"),
              this.core.callback("startToEdit"),
              (this.start = !0),
              void this.build.start())
        );
      },
      detectType() {
        this.build.isInline() || this.opts.inline
          ? (this.opts.type = "inline")
          : this.build.isTag("DIV")
          ? (this.opts.type = "div")
          : this.build.isTag("PRE") && (this.opts.type = "pre");
      },
      loadToEdit(e) {
        this.$element.on(
          "click.redactor-click-to-edit",
          t.proxy(function() {
            this.initToEdit(e);
          }, this),
        ),
          this.$element.addClass("redactor-click-to-edit");
      },
      initToEdit(e) {
        t.extend(e.callbacks, {
          startToEdit() {
            this.insert.node(this.marker.get(), !1);
          },
          initToEdit() {
            this.selection.restore(),
              (this.clickToCancelStorage = this.code.get()),
              t(this.opts.clickToCancel).off(".redactor-click-to-edit"),
              t(this.opts.clickToCancel)
                .show()
                .on(
                  "click.redactor-click-to-edit",
                  t.proxy(function(i) {
                    i.preventDefault(),
                      this.core.destroy(),
                      (this.events.syncFire = !1),
                      this.$element.html(this.clickToCancelStorage),
                      this.core.callback("cancel", this.clickToCancelStorage),
                      (this.events.syncFire = !0),
                      (this.clickToCancelStorage = ""),
                      t(this.opts.clickToCancel).hide(),
                      t(this.opts.clickToSave).hide(),
                      this.$element.on(
                        "click.redactor-click-to-edit",
                        t.proxy(function() {
                          this.initToEdit(e);
                        }, this),
                      ),
                      this.$element.addClass("redactor-click-to-edit");
                  }, this),
                ),
              t(this.opts.clickToSave).off(".redactor-click-to-edit"),
              t(this.opts.clickToSave)
                .show()
                .on(
                  "click.redactor-click-to-edit",
                  t.proxy(function(i) {
                    i.preventDefault(),
                      this.core.destroy(),
                      this.core.callback("save", this.code.get()),
                      t(this.opts.clickToCancel).hide(),
                      t(this.opts.clickToSave).hide(),
                      this.$element.on(
                        "click.redactor-click-to-edit",
                        t.proxy(function() {
                          this.initToEdit(e);
                        }, this),
                      ),
                      this.$element.addClass("redactor-click-to-edit");
                  }, this),
                );
          },
        }),
          this.$element.redactor(e),
          this.$element.off(".redactor-click-to-edit");
      },
      loadOptions(e) {
        let i = {};
        typeof t.Redactor.settings.namespace !== "undefined"
          ? this.$element.hasClass(t.Redactor.settings.namespace) &&
            (i = t.Redactor.settings)
          : (i = t.Redactor.settings),
          (this.opts = t.extend({}, t.Redactor.opts, this.$element.data(), e)),
          (this.opts = t.extend(!0, this.opts, i));
      },
      getModuleMethods(t) {
        return Object.getOwnPropertyNames(t).filter(function(e) {
          return typeof t[e] === "function";
        });
      },
      loadModules() {
        for (let e = t.Redactor.modules.length, i = 0; e > i; i++)
          this.bindModuleMethods(t.Redactor.modules[i]);
      },
      bindModuleMethods(t) {
        if (typeof this[t] !== "undefined") {
          this[t] = this[t]();
          for (
            let e = this.getModuleMethods(this[t]), i = e.length, o = 0;
            i > o;
            o++
          )
            this[t][e[o]] = this[t][e[o]].bind(this);
        }
      },
      air() {
        return {
          enabled: !1,
          collapsed() {
            this.opts.air && this.selection.get().collapseToStart();
          },
          collapsedEnd() {
            this.opts.air && this.selection.get().collapseToEnd();
          },
          build() {
            this.detect.isMobile() ||
              (this.button.hideButtons(),
              this.button.hideButtonsOnMobile(),
              this.opts.buttons.length !== 0 &&
                ((this.$air = this.air.createContainer()),
                this.opts.airWidth !== !1 &&
                  this.$air.css("width", this.opts.airWidth),
                this.air.append(),
                (this.button.$toolbar = this.$air),
                this.button.setFormatting(),
                this.button.load(this.$air),
                this.core.editor().on(
                  "mouseup.redactor",
                  this,
                  t.proxy(function(t) {
                    this.selection.text() !== "" && this.air.show(t);
                  }, this),
                )));
          },
          append() {
            this.$air.appendTo("body");
          },
          createContainer() {
            return t("<ul>")
              .addClass("redactor-air")
              .attr({ id: `redactor-air-${  this.uuid}`, role: "toolbar" })
              .hide();
          },
          show(e) {
            this.selection.saveInstant(), t(".redactor-air").hide();
            let i = 0;
              const o = this.$air.innerWidth();
            t(window).width() < e.clientX + o && (i = 200),
              this.$air
                .css({
                  left: `${e.clientX - i  }px`,
                  top: `${e.clientY + 10 + t(document).scrollTop()  }px`,
                })
                .show(),
              (this.air.enabled = !0),
              this.air.bindHide();
          },
          bindHide() {
            t(document)
              .on(
                `mousedown.redactor-air.${  this.uuid}`,
                t.proxy(function(e) {
                  const i = t(e.target).closest(".redactor-dropdown").length;
                  if (t(e.target).closest(this.$air).length === 0 && i === 0) {
                    const o = this.air.hide(e);
                    o !== !1 && this.marker.remove();
                  }
                }, this),
              )
              .on(
                `keydown.redactor-air.${  this.uuid}`,
                t.proxy(function(e) {
                  const i = e.which;
                  if (
                    (this.utils.isRedactorParent(e.target) ||
                      t(e.target).hasClass("redactor-in")) &&
                    t(e.target).closest("#redactor-modal").length === 0
                  ) {
                    if (i === this.keyCode.ESC)
                      this.selection.get().collapseToStart();
                    else if (
                      i === this.keyCode.BACKSPACE ||
                      i === this.keyCode.DELETE
                    ) {
                      const o = this.selection.get();
                        const r = this.selection.range(o);
                      r.deleteContents();
                    } else
                      i === this.keyCode.ENTER &&
                        this.selection.get().collapseToEnd();
                    this.air.enabled
                      ? this.air.hide(e)
                      : this.selection.get().collapseToStart();
                  }
                }, this),
              );
          },
          hide(e) {
            const i = e.ctrlKey || e.metaKey || (e.shiftKey && e.altKey);
            return i
              ? !1
              : (this.button.setInactiveAll(),
                this.$air.fadeOut(100),
                (this.air.enabled = !1),
                t(document).off(`mousedown.redactor-air.${  this.uuid}`),
                void t(document).off(`keydown.redactor-air.${  this.uuid}`));
          },
        };
      },
      autosave() {
        return {
          enabled: !1,
          html: !1,
          init() {
            this.opts.autosave &&
              ((this.autosave.enabled = !0),
              (this.autosave.name = this.opts.autosaveName
                ? this.opts.autosaveName
                : this.$textarea.attr("name")));
          },
          is() {
            return this.autosave.enabled;
          },
          send() {
            if (
              this.opts.autosave &&
              ((this.autosave.source = this.code.get()),
              this.autosave.html !== this.autosave.source)
            ) {
              let e = {};
              (e.name = this.autosave.name),
                (e[this.autosave.name] = this.autosave.source),
                (e = this.autosave.getHiddenFields(e));
              const i = t.ajax({
                url: this.opts.autosave,
                type: "post",
                data: e,
              });
              i.done(this.autosave.success);
            }
          },
          getHiddenFields(e) {
            return this.opts.autosaveFields === !1 ||
              typeof this.opts.autosaveFields !== "object"
              ? e
              : (t.each(
                  this.opts.autosaveFields,
                  t.proxy(function(i, o) {
                    o !== null &&
                      o.toString().indexOf("#") === 0 &&
                      (o = t(o).val()),
                      (e[i] = o);
                  }, this),
                ),
                e);
          },
          success(t) {
            let e;
            try {
              e = JSON.parse(t);
            } catch (i) {
              e = t;
            }
            const o =
              typeof e.error === "undefined" ? "autosave" : "autosaveError";
            this.core.callback(o, this.autosave.name, e),
              (this.autosave.html = this.autosave.source);
          },
          disable() {
            (this.autosave.enabled = !1), clearInterval(this.autosaveTimeout);
          },
        };
      },
      block() {
        return {
          format(e, i, o, r) {
            return (
              (e = e === "quote" ? "blockquote" : e),
              (this.block.tags = [
                "p",
                "blockquote",
                "pre",
                "h1",
                "h2",
                "h3",
                "h4",
                "h5",
                "h6",
                "div",
                "figure",
              ]),
              t.inArray(e, this.block.tags) !== -1
                ? (e === "p" && typeof i === "undefined" && (i = "class"),
                  this.placeholder.hide(),
                  this.buffer.set(),
                  this.utils.isCollapsed()
                    ? this.block.formatCollapsed(e, i, o, r)
                    : this.block.formatUncollapsed(e, i, o, r))
                : void 0
            );
          },
          formatCollapsed(e, i, o, r) {
            this.selection.save();
            const s = this.selection.block();
              const n = s.tagName.toLowerCase();
            if (t.inArray(n, this.block.tags) === -1)
              return void this.selection.restore();
            n === e && (e = "p");
            let a;
            if (n === "blockquote" && this.utils.isEndOfElement(s)) {
              this.marker.remove(),
                (a = document.createElement("p")),
                (a.innerHTML = this.opts.invisibleSpace),
                t(s).after(a),
                this.caret.start(a);
              const l = t(s)
                .children()
                .last();
              l.length !== 0 && l[0].tagName === "BR" && l.remove();
            } else a = this.utils.replaceToTag(s, e);
            if (typeof i === "object") {
              r = o;
              for (const c in i) a = this.block.setAttr(a, c, i[c], r);
            } else a = this.block.setAttr(a, i, o, r);
            return (
              e === "pre" && a.length === 1 && t(a).html(t.trim(t(a).html())),
              this.selection.restore(),
              this.block.removeInlineTags(a),
              a
            );
          },
          formatUncollapsed(e, i, o, r) {
            this.selection.save();
            let s = [];
              let n = this.selection.blocks();
            n[0] &&
              t(n[0]).hasClass("redactor-in") &&
              (n = t(n[0]).find(this.opts.blockTags.join(", ")));
            for (let a = n.length, l = 0; a > l; l++) {
              const c = n[l].tagName.toLowerCase();
              if (t.inArray(c, this.block.tags) !== -1 && c !== "figure") {
                let d = this.utils.replaceToTag(n[l], e);
                if (typeof i === "object") {
                  r = o;
                  for (const h in i) d = this.block.setAttr(d, h, i[h], r);
                } else d = this.block.setAttr(d, i, o, r);
                s.push(d), this.block.removeInlineTags(d);
              }
            }
            if ((this.selection.restore(), e === "pre" && s.length !== 0)) {
              const u = s[0];
              t.each(s, function(e, i) {
                e !== 0 &&
                  (t(u).append(`\n${  t.trim(i.html())}`), t(i).remove());
              }),
                (s = []),
                s.push(u);
            }
            return s;
          },
          removeInlineTags(e) {
            e = e[0] || e;
            const i = this.opts.inlineTags;
              const o = ["PRE", "H1", "H2", "H3", "H4", "H5", "H6"];
            if (t.inArray(e.tagName, o) !== -1) {
              if (e.tagName !== "PRE") {
                const r = i.indexOf("a");
                i.splice(r, 1);
              }
              t(e)
                .find(i.join(","))
                .not(".redactor-selection-marker")
                .contents()
                .unwrap();
            }
          },
          setAttr(t, e, i, o) {
            if (typeof e === "undefined") return t;
            const r = typeof o === "undefined" ? "replace" : o;
            return (t =
              e === "class"
                ? this.block[`${r  }Class`](i, t)
                : r === "remove"
                ? this.block[`${r  }Attr`](e, t)
                : r === "removeAll"
                ? this.block[`${r  }Attr`](e, t)
                : this.block[`${r  }Attr`](e, i, t));
          },
          getBlocks(t) {
            return typeof t === "undefined" ? this.selection.blocks() : t;
          },
          replaceClass(e, i) {
            return t(this.block.getBlocks(i))
              .removeAttr("class")
              .addClass(e)[0];
          },
          toggleClass(e, i) {
            return t(this.block.getBlocks(i)).toggleClass(e)[0];
          },
          addClass(e, i) {
            return t(this.block.getBlocks(i)).addClass(e)[0];
          },
          removeClass(e, i) {
            return t(this.block.getBlocks(i)).removeClass(e)[0];
          },
          removeAllClass(e) {
            return t(this.block.getBlocks(e)).removeAttr("class")[0];
          },
          replaceAttr(e, i, o) {
            return (o = this.block.removeAttr(e, o)), t(o).attr(e, i)[0];
          },
          toggleAttr(e, i, o) {
            o = this.block.getBlocks(o);
            const r = this;
              const s = [];
            return (
              t.each(o, function(o, n) {
                const a = t(n);
                a.attr(e)
                  ? s.push(r.block.removeAttr(e, n))
                  : s.push(r.block.addAttr(e, i, n));
              }),
              s
            );
          },
          addAttr(e, i, o) {
            return t(this.block.getBlocks(o)).attr(e, i)[0];
          },
          removeAttr(e, i) {
            return t(this.block.getBlocks(i)).removeAttr(e)[0];
          },
          removeAllAttr(e) {
            e = this.block.getBlocks(e);
            const i = [];
            return (
              t.each(e, function(e, o) {
                typeof o.attributes === "undefined" && i.push(o);
                for (var r = t(o), s = o.attributes.length, n = 0; s > n; n++)
                  r.removeAttr(o.attributes[n].name);
                i.push(r[0]);
              }),
              i
            );
          },
        };
      },
      buffer() {
        return {
          set(t) {
            typeof t === "undefined" && this.buffer.clear(),
              typeof t === "undefined" || t === "undo"
                ? this.buffer.setUndo()
                : this.buffer.setRedo();
          },
          setUndo() {
            const t = this.selection.saveInstant();
              const e = this.opts.buffer[this.opts.buffer.length - 1];
              const i = this.core.editor().html();
              const o = typeof e === "undefined" || e[0] !== i;
            o && this.opts.buffer.push([i, t]);
          },
          setRedo() {
            const t = this.selection.saveInstant();
            this.opts.rebuffer.push([this.core.editor().html(), t]);
          },
          add() {
            this.opts.buffer.push([this.core.editor().html(), 0]);
          },
          undo() {
            if (this.opts.buffer.length !== 0) {
              const t = this.opts.buffer.pop();
              this.buffer.set("redo"),
                this.core.editor().html(t[0]),
                this.selection.restoreInstant(t[1]);
            }
          },
          redo() {
            if (this.opts.rebuffer.length !== 0) {
              const t = this.opts.rebuffer.pop();
              this.buffer.set("undo"),
                this.core.editor().html(t[0]),
                this.selection.restoreInstant(t[1]);
            }
          },
          clear() {
            this.opts.rebuffer = [];
          },
        };
      },
      build() {
        return {
          start() {
            if (this.opts.type === "inline") this.opts.type = "inline";
            else if (this.opts.type === "div") {
              const e = t.trim(this.$editor.html());
              e === "" && this.$editor.html(this.opts.emptyHtml);
            } else this.opts.type === "textarea" && this.build.startTextarea();
            this.build.setIn(),
              this.build.setId(),
              this.build.enableEditor(),
              this.build.setOptions(),
              this.build.callEditor();
          },
          createContainerBox() {
            this.$box = t('<div class="redactor-box" role="application" />');
          },
          setIn() {
            this.core.editor().addClass("redactor-in");
          },
          setId() {
            const t =
              this.opts.type === "textarea"
                ? `redactor-uuid-${  this.uuid}`
                : this.$element.attr("id");
            this.core
              .editor()
              .attr(
                "id",
                typeof t === "undefined" ? `redactor-uuid-${  this.uuid}` : t,
              );
          },
          getName() {
            const t = this.$element.attr("name");
            return typeof t === "undefined" ? `content-${  this.uuid}` : t;
          },
          loadFromTextarea() {
            (this.$editor = t("<div />")),
              (this.$textarea = this.$element),
              this.$element.attr("name", this.build.getName()),
              this.$box
                .insertAfter(this.$element)
                .append(this.$editor)
                .append(this.$element),
              this.$editor.addClass("redactor-layer"),
              this.opts.overrideStyles &&
                this.$editor.addClass("redactor-styles"),
              this.$element.hide(),
              this.$box.prepend(
                `<span class="redactor-voice-label" id="redactor-voice-${ 
                  this.uuid 
                  }" aria-hidden="false">${ 
                  this.lang.get("accessibility-help-label") 
                  }</span>`,
              ),
              this.$editor.attr({
                "aria-labelledby": `redactor-voice-${  this.uuid}`,
                role: "presentation",
              });
          },
          startTextarea() {
            this.build.createContainerBox(),
              this.build.loadFromTextarea(),
              this.code.start(this.core.textarea().val()),
              this.core.textarea().val(this.clean.onSync(this.$editor.html()));
          },
          isTag(t) {
            return this.$element[0].tagName === t;
          },
          isInline() {
            return (
              !this.build.isTag("TEXTAREA") &&
              !this.build.isTag("DIV") &&
              !this.build.isTag("PRE")
            );
          },
          enableEditor() {
            this.core.editor().attr({ contenteditable: !0 });
          },
          setOptions() {
            this.opts.type === "inline" && (this.opts.enterKey = !1),
              (this.opts.type !== "inline" && this.opts.type !== "pre") ||
                ((this.opts.toolbarMobile = !1),
                (this.opts.toolbar = !1),
                (this.opts.air = !1),
                (this.opts.linkify = !1)),
              this.core.editor().attr("spellcheck", this.opts.spellcheck),
              this.opts.structure &&
                this.core.editor().addClass("redactor-structure"),
              this.opts.type === "textarea" &&
                (this.core.box().attr("dir", this.opts.direction),
                this.core.editor().attr("dir", this.opts.direction),
                this.opts.tabindex &&
                  this.core.editor().attr("tabindex", this.opts.tabindex),
                this.opts.minHeight
                  ? this.core.editor().css("min-height", this.opts.minHeight)
                  : this.core.editor().css("min-height", "40px"),
                this.opts.maxHeight &&
                  this.core.editor().css("max-height", this.opts.maxHeight),
                this.opts.maxWidth &&
                  this.core
                    .editor()
                    .css({ "max-width": this.opts.maxWidth, margin: "auto" }));
          },
          callEditor() {
            this.build.disableBrowsersEditing(),
              this.events.init(),
              this.build.setHelpers(),
              (this.opts.toolbar || this.opts.air) &&
                (this.toolbarsButtons = this.button.init()),
              this.opts.air
                ? this.air.build()
                : this.opts.toolbar && this.toolbar.build(),
              this.detect.isMobile() &&
                this.opts.toolbarMobile &&
                this.opts.air &&
                ((this.opts.toolbar = !0), this.toolbar.build()),
              (this.opts.air || this.opts.toolbar) &&
                (this.core
                  .editor()
                  .on(
                    `mouseup.redactor-observe.${ 
                      this.uuid 
                      } keyup.redactor-observe.${ 
                      this.uuid 
                      } focus.redactor-observe.${ 
                      this.uuid 
                      } touchstart.redactor-observe.${ 
                      this.uuid}`,
                    t.proxy(this.observe.toolbar, this),
                  ),
                this.core.element().on(
                  "blur.callback.redactor",
                  t.proxy(function() {
                    this.button.setInactiveAll();
                  }, this),
                )),
              this.modal.templates(),
              this.build.plugins(),
              this.autosave.init(),
              (this.code.html = this.code.cleaned(this.core.editor().html())),
              this.core.callback("init"),
              this.core.callback("initToEdit"),
              this.storage.observe(),
              (this.start = !1);
          },
          setHelpers() {
            this.opts.linkify && this.linkify.format(),
              this.placeholder.init(),
              this.opts.focus
                ? setTimeout(this.focus.start, 100)
                : this.opts.focusEnd && setTimeout(this.focus.end, 100);
          },
          disableBrowsersEditing() {
            try {
              document.execCommand("enableObjectResizing", !1, !1),
                document.execCommand("enableInlineTableEditing", !1, !1),
                document.execCommand("AutoUrlDetect", !1, !1);
            } catch (t) {}
          },
          plugins() {
            this.opts.plugins &&
              t.each(
                this.opts.plugins,
                t.proxy(function(i, o) {
                  const r =
                    typeof RedactorPlugins !== "undefined" &&
                    typeof RedactorPlugins[o] !== "undefined"
                      ? RedactorPlugins
                      : e.fn;
                  if (t.isFunction(r[o])) {
                    this[o] = r[o]();
                    for (
                      let s = this.getModuleMethods(this[o]),
                        n = s.length,
                        a = 0;
                      n > a;
                      a++
                    )
                      this[o][s[a]] = this[o][s[a]].bind(this);
                    if (typeof this[o].langs !== "undefined") {
                      let l = {};
                      typeof this[o].langs[this.opts.lang] !== "undefined"
                        ? (l = this[o].langs[this.opts.lang])
                        : typeof this[o].langs[this.opts.lang] === "undefined" &&
                          typeof this[o].langs.en !== "undefined" &&
                          (l = this[o].langs.en);
                      const c = this;
                      t.each(l, function(t, e) {
                        typeof c.opts.curLang[t] === "undefined" &&
                          (c.opts.curLang[t] = e);
                      });
                    }
                    t.isFunction(this[o].init) && this[o].init();
                  }
                }, this),
              );
          },
        };
      },
      button() {
        return {
          toolbar() {
            return typeof this.button.$toolbar !== "undefined" &&
              this.button.$toolbar
              ? this.button.$toolbar
              : this.$toolbar;
          },
          init() {
            return {
              format: {
                title: this.lang.get("format"),
                icon: !0,
                dropdown: {
                  p: {
                    title: this.lang.get("paragraph"),
                    func: "block.format",
                  },
                  blockquote: {
                    title: this.lang.get("quote"),
                    func: "block.format",
                  },
                  pre: { title: this.lang.get("code"), func: "block.format" },
                  h1: {
                    title: this.lang.get("heading1"),
                    func: "block.format",
                  },
                  h2: {
                    title: this.lang.get("heading2"),
                    func: "block.format",
                  },
                  h3: {
                    title: this.lang.get("heading3"),
                    func: "block.format",
                  },
                  h4: {
                    title: this.lang.get("heading4"),
                    func: "block.format",
                  },
                  h5: {
                    title: this.lang.get("heading5"),
                    func: "block.format",
                  },
                  h6: {
                    title: this.lang.get("heading6"),
                    func: "block.format",
                  },
                },
              },
              bold: {
                title: this.lang.get("bold-abbr"),
                icon: !0,
                label: this.lang.get("bold"),
                func: "inline.format",
              },
              italic: {
                title: this.lang.get("italic-abbr"),
                icon: !0,
                label: this.lang.get("italic"),
                func: "inline.format",
              },
              deleted: {
                title: this.lang.get("deleted-abbr"),
                icon: !0,
                label: this.lang.get("deleted"),
                func: "inline.format",
              },
              underline: {
                title: this.lang.get("underline-abbr"),
                icon: !0,
                label: this.lang.get("underline"),
                func: "inline.format",
              },
              lists: {
                title: this.lang.get("lists"),
                icon: !0,
                dropdown: {
                  unorderedlist: {
                    title: `&bull; ${  this.lang.get("unorderedlist")}`,
                    func: "list.toggle",
                  },
                  orderedlist: {
                    title: `1. ${  this.lang.get("orderedlist")}`,
                    func: "list.toggle",
                  },
                  outdent: {
                    title: `< ${  this.lang.get("outdent")}`,
                    func: "indent.decrease",
                    observe: {
                      element: "li",
                      out: {
                        attr: {
                          class: "redactor-dropdown-link-inactive",
                          "aria-disabled": !0,
                        },
                      },
                    },
                  },
                  indent: {
                    title: `> ${  this.lang.get("indent")}`,
                    func: "indent.increase",
                    observe: {
                      element: "li",
                      out: {
                        attr: {
                          class: "redactor-dropdown-link-inactive",
                          "aria-disabled": !0,
                        },
                      },
                    },
                  },
                },
              },
              ul: {
                title: `&bull; ${  this.lang.get("bulletslist")}`,
                icon: !0,
                func: "list.toggle",
              },
              ol: {
                title: `1. ${  this.lang.get("numberslist")}`,
                icon: !0,
                func: "list.toggle",
              },
              outdent: {
                title: this.lang.get("outdent"),
                icon: !0,
                func: "indent.decrease",
              },
              indent: {
                title: this.lang.get("indent"),
                icon: !0,
                func: "indent.increase",
              },
              image: {
                title: this.lang.get("image"),
                icon: !0,
                func: "image.show",
              },
              file: {
                title: this.lang.get("file"),
                icon: !0,
                func: "file.show",
              },
              link: {
                title: this.lang.get("link"),
                icon: !0,
                dropdown: {
                  link: {
                    title: this.lang.get("link-insert"),
                    func: "link.show",
                    observe: {
                      element: "a",
                      in: { title: this.lang.get("link-edit") },
                      out: { title: this.lang.get("link-insert") },
                    },
                  },
                  unlink: {
                    title: this.lang.get("unlink"),
                    func: "link.unlink",
                    observe: {
                      element: "a",
                      out: {
                        attr: {
                          class: "redactor-dropdown-link-inactive",
                          "aria-disabled": !0,
                        },
                      },
                    },
                  },
                },
              },
              horizontalrule: {
                title: this.lang.get("horizontalrule"),
                icon: !0,
                func: "line.insert",
              },
            };
          },
          setFormatting() {
            t.each(
              this.toolbarsButtons.format.dropdown,
              t.proxy(function(e, i) {
                t.inArray(e, this.opts.formatting) === -1 &&
                  delete this.toolbarsButtons.format.dropdown[e];
              }, this),
            );
          },
          hideButtons() {
            this.opts.buttonsHide.length !== 0 &&
              this.button.hideButtonsSlicer(this.opts.buttonsHide);
          },
          hideButtonsOnMobile() {
            this.detect.isMobile() &&
              this.opts.buttonsHideOnMobile.length !== 0 &&
              this.button.hideButtonsSlicer(this.opts.buttonsHideOnMobile);
          },
          hideButtonsSlicer(e) {
            t.each(
              e,
              t.proxy(function(t, e) {
                const i = this.opts.buttons.indexOf(e);
                i !== -1 && this.opts.buttons.splice(i, 1);
              }, this),
            );
          },
          load(e) {
            (this.button.buttons = []),
              t.each(
                this.opts.buttons,
                t.proxy(function(i, o) {
                  !this.toolbarsButtons[o] ||
                    (o === "file" && !this.file.is()) ||
                    (o === "image" && !this.image.is()) ||
                    e.append(
                      t("<li>").append(
                        this.button.build(o, this.toolbarsButtons[o]),
                      ),
                    );
                }, this),
              );
          },
          buildButtonTooltip(e, i) {
            if (!this.opts.air && !this.detect.isMobile()) {
              const o = t("<span>");
              o.addClass("re-button-tooltip"),
                o.html(i),
                e.append(o),
                e
                  .on("mouseover", function() {
                    t(this).hasClass("redactor-button-disabled") ||
                      (o.show(), o.css("margin-left", -(o.innerWidth() / 2)));
                  })
                  .on("mouseout", function() {
                    o.hide();
                  });
            }
          },
          build(e, i) {
            if (this.opts.toolbar !== !1) {
              const o = typeof i.label !== "undefined" ? i.label : i.title;
                const r = t(
                  `<a href="javascript:void(null);" alt="${ 
                    o 
                    }" rel="${ 
                    e 
                    }" />`,
                );
              if (
                (r.addClass(`re-button re-${  e}`),
                r.attr({ role: "button", "aria-label": o, tabindex: "-1" }),
                typeof i.icon !== "undefined")
              ) {
                const s = t("<i>");
                s.addClass(`re-icon-${  e}`),
                  r.append(s),
                  r.addClass("re-button-icon"),
                  this.button.buildButtonTooltip(r, o);
              } else r.html(i.title);
              if (
                ((i.func || i.command || i.dropdown) &&
                  this.button.setEvent(r, e, i),
                i.dropdown)
              ) {
                r.addClass("redactor-toolbar-link-dropdown").attr(
                  "aria-haspopup",
                  !0,
                );
                const n = t(
                  `<ul class="redactor-dropdown redactor-dropdown-${ 
                    this.uuid 
                    } redactor-dropdown-box-${ 
                    e 
                    }" style="display: none;">`,
                );
                r.data("dropdown", n), this.dropdown.build(e, n, i.dropdown);
              }
              return this.button.buttons.push(r), r;
            }
          },
          getButtons() {
            return this.button.toolbar().find("a.re-button");
          },
          getButtonsKeys() {
            return this.button.buttons;
          },
          setEvent(e, i, o) {
            e.on(
              "mousedown",
              t.proxy(function(t) {
                if (
                  (t.preventDefault(), e.hasClass("redactor-button-disabled"))
                )
                  return !1;
                let r = "func";
                  let s = o.func;
                return (
                  o.command
                    ? ((r = "command"), (s = o.command))
                    : o.dropdown && ((r = "dropdown"), (s = !1)),
                  this.button.toggle(t, i, r, s),
                  !1
                );
              }, this),
            );
          },
          toggle(t, e, i, o, r) {
            (!this.detect.isIe() && this.detect.isDesktop()) ||
              (this.utils.freezeScroll(), (t.returnValue = !1)),
              i === "command"
                ? this.inline.format(o)
                : i === "dropdown"
                ? this.dropdown.show(t, e)
                : this.button.clickCallback(t, o, e, r),
              i !== "dropdown" && this.dropdown.hideAll(!1),
              this.opts.air && i !== "dropdown" && this.air.hide(t),
              (!this.detect.isIe() && this.detect.isDesktop()) ||
                this.utils.unfreezeScroll();
          },
          clickCallback(e, i, o, r) {
            let s;
            if (((r = typeof r === "undefined" ? o : r), t.isFunction(i)))
              i.call(this, o);
            else if (i.search(/\./) !== "-1") {
              if (((s = i.split(".")), typeof this[s[0]] === "undefined"))
                return;
              typeof r === "object"
                ? this[s[0]][s[1]].apply(this, r)
                : this[s[0]][s[1]].call(this, r);
            } else
              typeof r === "object"
                ? this[i].apply(this, r)
                : this[i].call(this, r);
            this.observe.buttons(e, o);
          },
          all() {
            return this.button.buttons;
          },
          get(t) {
            return this.opts.toolbar !== !1
              ? this.button.toolbar().find(`a.re-${  t}`)
              : void 0;
          },
          set(t, e) {
            if (this.opts.toolbar !== !1) {
              const i = this.button.toolbar().find(`a.re-${  t}`);
              return i.html(e).attr("aria-label", e), i;
            }
          },
          add(e, i) {
            if (this.button.isAdded(e) !== !0) return t();
            const o = this.button.build(e, { title: i });
            return this.button.toolbar().append(t("<li>").append(o)), o;
          },
          addFirst(e, i) {
            if (this.button.isAdded(e) !== !0) return t();
            const o = this.button.build(e, { title: i });
            return this.button.toolbar().prepend(t("<li>").append(o)), o;
          },
          addAfter(e, i, o) {
            if (this.button.isAdded(i) !== !0) return t();
            const r = this.button.build(i, { title: o });
              const s = this.button.get(e);
            return (
              s.length !== 0
                ? s.parent().after(t("<li>").append(r))
                : this.button.toolbar().append(t("<li>").append(r)),
              r
            );
          },
          addBefore(e, i, o) {
            if (this.button.isAdded(i) !== !0) return t();
            const r = this.button.build(i, { title: o });
              const s = this.button.get(e);
            return (
              s.length !== 0
                ? s.parent().before(t("<li>").append(r))
                : this.button.toolbar().append(t("<li>").append(r)),
              r
            );
          },
          isAdded(t) {
            const e = this.opts.buttonsHideOnMobile.indexOf(t);
            return !(
              this.opts.toolbar === !1 ||
              (e !== -1 && this.detect.isMobile())
            );
          },
          setIcon(t, e) {
            t.html(e).addClass("re-button-icon"),
              this.button.buildButtonTooltip(t, t.attr("alt"));
          },
          changeIcon(t, e) {
            const i = this.button.get(t);
            i.length !== 0 &&
              i
                .find("i")
                .removeAttr("class")
                .addClass(`re-icon-${  e}`);
          },
          addCallback(e, i) {
            if (typeof e !== "undefined" && this.opts.toolbar !== !1) {
              const o = i === "dropdown" ? "dropdown" : "func";
                const r = e.attr("rel");
              e.on(
                "mousedown",
                t.proxy(function(t) {
                  return e.hasClass("redactor-button-disabled")
                    ? !1
                    : void this.button.toggle(t, r, o, i);
                }, this),
              );
            }
          },
          addDropdown(e, i) {
            if (this.opts.toolbar !== !1) {
              e.addClass("redactor-toolbar-link-dropdown").attr(
                "aria-haspopup",
                !0,
              );
              const o = e.attr("rel");
              this.button.addCallback(e, "dropdown");
              const r = t(
                `<div class="redactor-dropdown redactor-dropdown-${ 
                  this.uuid 
                  } redactor-dropdown-box-${ 
                  o 
                  }" style="display: none;">`,
              );
              return (
                e.data("dropdown", r), i && this.dropdown.build(o, r, i), r
              );
            }
          },
          setActive(t) {
            this.button.get(t).addClass("redactor-act");
          },
          setInactive(t) {
            this.button.get(t).removeClass("redactor-act");
          },
          setInactiveAll(t) {
            let e = this.button.toolbar().find("a.re-button");
            typeof t !== "undefined" && (e = e.not(`.re-${  t}`)),
              e.removeClass("redactor-act");
          },
          disable(t) {
            this.button.get(t).addClass("redactor-button-disabled");
          },
          enable(t) {
            this.button.get(t).removeClass("redactor-button-disabled");
          },
          disableAll(t) {
            let e = this.button.toolbar().find("a.re-button");
            typeof t !== "undefined" && (e = e.not(`.re-${  t}`)),
              e.addClass("redactor-button-disabled");
          },
          enableAll() {
            this.button
              .toolbar()
              .find("a.re-button")
              .removeClass("redactor-button-disabled");
          },
          remove(t) {
            this.button.get(t).remove();
          },
        };
      },
      caret() {
        return {
          set(t, e, i) {
            this.core.editor().focus(),
              (i = typeof i === "undefined" ? 0 : 1),
              (t = t[0] || t),
              (e = e[0] || e);
            const o = this.selection.get();
              const r = this.selection.range(o);
            try {
              r.setStart(t, 0), r.setEnd(e, i);
            } catch (s) {}
            this.selection.update(o, r);
          },
          prepare(t) {
            return (
              this.detect.isFirefox() &&
                typeof this.start !== "undefined" &&
                this.core.editor().focus(),
              t[0] || t
            );
          },
          start(e) {
            let i; let o;
            if ((e = this.caret.prepare(e))) {
              if (e.tagName === "BR") return this.caret.before(e);
              const r = t(e)
                  .children()
                  .first();
                const s = this.utils.isInlineTag(e.tagName);
              e.innerHTML === "" || s
                ? this.caret.setStartEmptyOrInline(e, s)
                : r &&
                  r.length !== 0 &&
                  this.utils.isInlineTag(r[0].tagName) &&
                  r.text() === ""
                ? this.caret.setStartEmptyOrInline(r[0], !0)
                : ((i = window.getSelection()),
                  i.removeAllRanges(),
                  (o = document.createRange()),
                  o.selectNodeContents(e),
                  o.collapse(!0),
                  i.addRange(o));
            }
          },
          setStartEmptyOrInline(e, i) {
            const o = window.getSelection();
              const r = document.createRange();
              const s = document.createTextNode("​");
            r.setStart(e, 0),
              r.insertNode(s),
              r.setStartAfter(s),
              r.collapse(!0),
              o.removeAllRanges(),
              o.addRange(r),
              i ||
                this.core
                  .editor()
                  .on("keydown.redactor-remove-textnode", function() {
                    t(s).remove(),
                      t(this).off("keydown.redactor-remove-textnode");
                  });
          },
          end(e) {
            let i; let o;
            if ((e = this.caret.prepare(e))) {
              if (e.tagName !== "BR" && e.innerHTML === "")
                return this.caret.start(e);
              if (e.tagName === "BR") {
                const r = document.createElement("span");
                return (
                  (r.className = "redactor-invisible-space"),
                  (r.innerHTML = "&#x200b;"),
                  t(e).after(r),
                  (i = window.getSelection()),
                  i.removeAllRanges(),
                  (o = document.createRange()),
                  o.setStartBefore(r),
                  o.setEndBefore(r),
                  i.addRange(o),
                  void t(r).replaceWith(function() {
                    return t(this).contents();
                  })
                );
              }
              if (e.lastChild && e.lastChild.nodeType === 1)
                return this.caret.after(e.lastChild);
              (i = window.getSelection()),
                i.removeAllRanges(),
                (o = document.createRange()),
                o.selectNodeContents(e),
                o.collapse(!1),
                i.addRange(o);
            }
          },
          after(e) {
            let i; let o;
            if ((e = this.caret.prepare(e))) {
              if (e.tagName === "BR") return this.caret.end(e);
              if (this.utils.isBlockTag(e.tagName)) {
                let r = this.caret.next(e);
                return void (typeof r === "undefined"
                  ? this.caret.end(e)
                  : (r.tagName === "TABLE"
                      ? (r = t(r)
                          .find("th, td")
                          .first()[0])
                      : (r.tagName !== "UL" && r.tagName !== "OL") ||
                        (r = t(r)
                          .find("li")
                          .first()[0]),
                    this.caret.start(r)));
              }
              const s = document.createTextNode("​");
              (i = window.getSelection()),
                i.removeAllRanges(),
                (o = document.createRange()),
                o.setStartAfter(e),
                o.insertNode(s),
                o.setStartAfter(s),
                o.collapse(!0),
                i.addRange(o);
            }
          },
          before(e) {
            let i; let o;
            if ((e = this.caret.prepare(e))) {
              if (this.utils.isBlockTag(e.tagName)) {
                let r = this.caret.prev(e);
                return void (typeof r === "undefined"
                  ? this.caret.start(e)
                  : (r.tagName === "TABLE"
                      ? (r = t(r)
                          .find("th, td")
                          .last()[0])
                      : (r.tagName !== "UL" && r.tagName !== "OL") ||
                        (r = t(r)
                          .find("li")
                          .last()[0]),
                    this.caret.end(r)));
              }
              (i = window.getSelection()),
                i.removeAllRanges(),
                (o = document.createRange()),
                o.setStartBefore(e),
                o.collapse(!0),
                i.addRange(o);
            }
          },
          next(e) {
            const i = t(e).next();
            return i.hasClass("redactor-script-tag, redactor-selection-marker")
              ? i.next()[0]
              : i[0];
          },
          prev(e) {
            const i = t(e).prev();
            return i.hasClass("redactor-script-tag, redactor-selection-marker")
              ? i.prev()[0]
              : i[0];
          },
          offset(t) {
            return this.offset.get(t);
          },
        };
      },
      clean() {
        return {
          onSet(e) {
            (e = this.clean.savePreCode(e)),
              (e = this.clean.saveFormTags(e)),
              this.opts.script &&
                (e = e.replace(
                  /<script(.*?[^>]?)>([\w\W]*?)<\/script>/gi,
                  '<pre class="redactor-script-tag" $1>$2</pre>',
                )),
              (e = e.replace(/\$/g, "&#36;")),
              (e = e.replace(/&amp;/g, "&")),
              (e = e.replace(
                /<a href="(.*?[^>]?)®(.*?[^>]?)">/gi,
                '<a href="$1&reg$2">',
              )),
              (e = e.replace(
                /<span id="selection-marker-1"(.*?[^>]?)>​<\/span>/gi,
                "###marker1###",
              )),
              (e = e.replace(
                /<span id="selection-marker-2"(.*?[^>]?)>​<\/span>/gi,
                "###marker2###",
              ));
            const i = this;
              const o = t("<div/>").html(t.parseHTML(e, document, !0));
              const r = this.opts.replaceTags;
            if (r) {
              const s = Object.keys(this.opts.replaceTags);
              o.find(s.join(",")).each(function(t, e) {
                i.utils.replaceToTag(e, r[e.tagName.toLowerCase()]);
              });
            }
            o
              .find("span, a")
              .attr("data-redactor-span", !0)
              .each(function() {
                const e = t(this);
                e.attr("style") &&
                  e.attr("data-redactor-style-cache", e.attr("style"));
              }),
              (e = o.html());
            const n = ["font", "html", "head", "link", "body", "meta", "applet"];
            return (
              this.opts.script || n.push("script"),
              (e = this.clean.stripTags(e, n)),
              this.opts.removeComments &&
                (e = e.replace(/<!--[\s\S]*?-->/gi, "")),
              (e = this.paragraphize.load(e)),
              (e = e.replace(
                "###marker1###",
                '<span id="selection-marker-1" class="redactor-selection-marker">​</span>',
              )),
              (e = e.replace(
                "###marker2###",
                '<span id="selection-marker-2" class="redactor-selection-marker">​</span>',
              )),
              e.search(/^(||\s||<br\s?\/?>||&nbsp;)$/i) !== -1
                ? this.opts.emptyHtml
                : e
            );
          },
          onGet(t) {
            return this.clean.onSync(t);
          },
          onSync(e) {
            if (
              ((e = e.replace(/\u200B/g, "")),
              (e = e.replace(/&#x200b;/gi, "")),
              e.search(/^<p>(||\s||<br\s?\/?>||&nbsp;)<\/p>$/i) !== -1)
            )
              return "";
            (e = e.replace(
              /<span(.*?)id="redactor-image-box"(.*?[^>])>([\w\W]*?)<img(.*?)><\/span>/gi,
              "$3<img$4>",
            )),
              (e = e.replace(
                /<span(.*?)id="redactor-image-resizer"(.*?[^>])>(.*?)<\/span>/gi,
                "",
              )),
              (e = e.replace(
                /<span(.*?)id="redactor-image-editter"(.*?[^>])>(.*?)<\/span>/gi,
                "",
              )),
              (e = e.replace(
                /<img(.*?)style="(.*?)opacity: 0\.5;(.*?)"(.*?)>/gi,
                '<img$1style="$2$3"$4>',
              ));
            const i = t("<div/>").html(t.parseHTML(e, document, !0));
            i.find('*[style=""]').removeAttr("style"),
              i.find('*[class=""]').removeAttr("class"),
              i.find('*[rel=""]').removeAttr("rel"),
              i
                .find(".redactor-invisible-space, .redactor-unlink")
                .each(function() {
                  t(this)
                    .contents()
                    .unwrap();
                }),
              i
                .find("span, a")
                .removeAttr("data-redactor-span data-redactor-style-cache")
                .each(function() {
                  this.attributes.length === 0 &&
                    t(this)
                      .contents()
                      .unwrap();
                }),
              i.find("img").removeAttr("rel"),
              i
                .find(".redactor-selection-marker, #redactor-insert-marker")
                .remove(),
              (e = i.html()),
              this.opts.script &&
                (e = e.replace(
                  /<pre class="redactor-script-tag"(.*?[^>]?)>([\w\W]*?)<\/pre>/gi,
                  "<script$1>$2</script>",
                )),
              (e = this.clean.restoreFormTags(e)),
              (e = e.replace(new RegExp("<br\\s?/?></h", "gi"), "</h")),
              (e = e.replace(new RegExp("<br\\s?/?></li>", "gi"), "</li>")),
              (e = e.replace(new RegExp("</li><br\\s?/?>", "gi"), "</li>")),
              (e = e.replace(/<pre>/gi, "<pre>\n")),
              this.opts.preClass &&
                (e = e.replace(
                  /<pre>/gi,
                  `<pre class="${  this.opts.preClass  }">`,
                )),
              this.opts.linkNofollow &&
                ((e = e.replace(
                  /<a(.*?)rel="nofollow"(.*?[^>])>/gi,
                  "<a$1$2>",
                )),
                (e = e.replace(/<a(.*?[^>])>/gi, '<a$1 rel="nofollow">')));
            const o = {
              "™": "&trade;",
              "©": "&copy;",
              "…": "&hellip;",
              "—": "&mdash;",
              "‐": "&dash;",
            };
            return (
              t.each(o, function(t, i) {
                e = e.replace(new RegExp(t, "g"), i);
              }),
              (e = e.replace(/&amp;/g, "&")),
              (e = e.replace(/<p><\/p>/gi, "")),
              (e = e.replace(/\n{2,}/g, "\n")),
              this.opts.removeNewlines && (e = e.replace(/\r?\n/g, "")),
              e
            );
          },
          onPaste(e, i, o) {
            if (o !== !0) {
              (e = e.replace(
                /<b\sid="internal-source-marker(.*?)">([\w\W]*?)<\/b>/gi,
                "$2",
              )),
                (e = e.replace(
                  /<b(.*?)id="docs-internal-guid(.*?)">([\w\W]*?)<\/b>/gi,
                  "$3",
                )),
                (e = e.replace(
                  /<span[^>]*(font-style: italic; font-weight: bold|font-weight: bold; font-style: italic)[^>]*>([\w\W]*?)<\/span>/gi,
                  "<b><i>$2</i></b>",
                )),
                (e = e.replace(
                  /<span[^>]*(font-style: italic; font-weight: 700|font-weight: 700; font-style: italic)[^>]*>([\w\W]*?)<\/span>/gi,
                  "<b><i>$2</i></b>",
                )),
                (e = e.replace(
                  /<span[^>]*font-style: italic[^>]*>([\w\W]*?)<\/span>/gi,
                  "<i>$1</i>",
                )),
                (e = e.replace(
                  /<span[^>]*font-weight: bold[^>]*>([\w\W]*?)<\/span>/gi,
                  "<b>$1</b>",
                )),
                (e = e.replace(
                  /<span[^>]*font-weight: 700[^>]*>([\w\W]*?)<\/span>/gi,
                  "<b>$1</b>",
                ));
              const r = this.clean.isHtmlMsWord(e);
              r && (e = this.clean.cleanMsWord(e));
            }
            return (
              (e = t.trim(e)),
              i.pre
                ? this.opts.preSpaces &&
                  (e = e.replace(
                    /\t/g,
                    new Array(this.opts.preSpaces + 1).join(" "),
                  ))
                : ((e = this.clean.replaceBrToNl(e)),
                  (e = this.clean.removeTagsInsidePre(e))),
              o !== !0 &&
                ((e = this.clean.removeEmptyInlineTags(e)),
                i.encode === !1 &&
                  ((e = e.replace(/&/g, "&amp;")),
                  (e = this.clean.convertTags(e, i)),
                  (e = this.clean.getPlainText(e)),
                  (e = this.clean.reconvertTags(e, i)))),
              i.text &&
                ((e = this.clean.replaceNbspToSpaces(e)),
                (e = this.clean.getPlainText(e))),
              i.lists && (e = e.replace("\n", "<br>")),
              i.encode && (e = this.clean.encodeHtml(e)),
              i.paragraphize && (e = this.paragraphize.load(e)),
              e
            );
          },
          getCurrentType(t, e) {
            const i = this.selection.blocks();
              const o = {
                text: !1,
                encode: !1,
                paragraphize: !0,
                line: this.clean.isHtmlLine(t),
                blocks: this.clean.isHtmlBlocked(t),
                pre: !1,
                lists: !1,
                block: !0,
                inline: !0,
                links: !0,
                images: !0,
              };
            return (
              i.length === 1 &&
              this.utils.isCurrentOrParent([
                "h1",
                "h2",
                "h3",
                "h4",
                "h5",
                "h6",
                "a",
                "figcaption",
              ])
                ? ((o.text = !0),
                  (o.paragraphize = !1),
                  (o.inline = !1),
                  (o.images = !1),
                  (o.links = !1),
                  (o.line = !0))
                : this.opts.type === "inline" || this.opts.enterKey === !1
                ? ((o.paragraphize = !1), (o.block = !1), (o.line = !0))
                : i.length === 1 && this.utils.isCurrentOrParent(["li"])
                ? ((o.lists = !0),
                  (o.block = !1),
                  (o.paragraphize = !1),
                  (o.images = !1))
                : i.length === 1 &&
                  this.utils.isCurrentOrParent(["th", "td", "blockquote"])
                ? ((o.block = !1), (o.paragraphize = !1))
                : (this.opts.type === "pre" ||
                    (i.length === 1 && this.utils.isCurrentOrParent("pre"))) &&
                  ((o.inline = !1),
                  (o.block = !1),
                  (o.encode = !0),
                  (o.pre = !0),
                  (o.paragraphize = !1),
                  (o.images = !1),
                  (o.links = !1)),
              o.line === !0 && (o.paragraphize = !1),
              e === !0 && (o.text = !1),
              o
            );
          },
          isHtmlBlocked(t) {
            const e = t.match(
                new RegExp(
                  `</(${  this.opts.blockTags.join("|").toUpperCase()  })>`,
                  "gi",
                ),
              );
              const i = t.match(new RegExp("<hr(.*?[^>])>", "gi"));
            return e !== null || i !== null;
          },
          isHtmlLine(t) {
            if (this.clean.isHtmlBlocked(t)) return !1;
            const e = t.match(/<br\s?\/?>/gi);
              const i = t.match(/\n/gi);
            return !e && !i;
          },
          isHtmlMsWord(t) {
            return t.match(
              /class="?Mso|style="[^"]*\bmso-|style='[^'']*\bmso-|w:WordDocument/i,
            );
          },
          removeEmptyInlineTags(e) {
            const i = this.opts.inlineTags;
              const o = t("<div/>").html(t.parseHTML(e, document, !0));
              const r = this;
              const s = o.find("span");
              const n = o.find(i.join(","));
            return (
              n.removeAttr("style"),
              n.each(function() {
                const e = t(this).html();
                this.attributes.length === 0 &&
                  r.utils.isEmpty(e) &&
                  t(this).replaceWith(function() {
                    return t(this).contents();
                  });
              }),
              s.each(function() {
                t(this).html();
                this.attributes.length === 0 &&
                  t(this).replaceWith(function() {
                    return t(this).contents();
                  });
              }),
              (e = o.html()),
              o.remove(),
              e
            );
          },
          cleanMsWord(e) {
            (e = e.replace(/<!--[\s\S]*?-->/g, "")),
              (e = e.replace(/<o:p>[\s\S]*?<\/o:p>/gi, "")),
              (e = e.replace(/\n/g, " ")),
              (e = e.replace(
                /<br\s?\/?>|<\/p>|<\/div>|<\/li>|<\/td>/gi,
                "\n\n",
              ));
            const i = t("<div/>").html(e);
              let o = !1;
              let r = 1;
              const s = [];
            return (
              i.find("p[style]").each(function() {
                const e = t(this)
                  .attr("style")
                  .match(/mso\-list\:l([0-9]+)\slevel([0-9]+)/);
                if (e) {
                  const n = parseInt(e[1]);
                    const a = parseInt(e[2]);
                    const l = t(this)
                      .html()
                      .match(/^[\w]+\./)
                      ? "ol"
                      : "ul";
                    const c = t("<li/>").html(t(this).html());
                  if (
                    (c.html(c.html().replace(/^([\w\.]+)</, "<")),
                    c.find("span:first").remove(),
                    a == 1 && t.inArray(n, s) == -1)
                  ) {
                    var d = t(`<${  l  }/>`)
                      .attr({ "data-level": a, "data-list": n })
                      .html(c);
                    t(this).replaceWith(d), (o = n), s.push(n);
                  } else {
                    if (a > r) {
                      for (
                        var h = i.find(
                            `[data-level="${  r  }"][data-list="${  o  }"]`,
                          ),
                          u = h,
                          p = r;
                        a > p;
                        p++
                      )
                        (d = t(`<${  l  }/>`)),
                          d.appendTo(u.find("li").last()),
                          (u = d);
                      u.attr({ "data-level": a, "data-list": n }).html(c);
                    } else {
                      var h = i
                        .find(`[data-level="${  a  }"][data-list="${  n  }"]`)
                        .last();
                      h.append(c);
                    }
                    (r = a), (o = n), t(this).remove();
                  }
                }
              }),
              i
                .find("[data-level][data-list]")
                .removeAttr("data-level data-list"),
              (e = i.html())
            );
          },
          replaceNbspToSpaces(t) {
            return t.replace("&nbsp;", " ");
          },
          replaceBrToNl(t) {
            return t.replace(/<br\s?\/?>/gi, "\n");
          },
          replaceNlToBr(t) {
            return t.replace(/\n/g, "<br />");
          },
          convertTags(e, i) {
            const o = t("<div>").html(e);
            o.find("iframe").remove();
            const r = o.find("a");
            if (
              (r.removeAttr("style"),
              this.opts.pasteLinkTarget !== !1 &&
                r.attr("target", this.opts.pasteLinkTarget),
              i.links &&
                this.opts.pasteLinks &&
                o.find("a").each(function(t, e) {
                  if (e.href) {
                    for (
                      var i,
                        o = `##%a href="${  e.href  }"`,
                        r = 0,
                        s = e.attributes.length;
                      s > r;
                      r++
                    )
                      (i = e.attributes.item(r)),
                        i.name !== "href" &&
                          (o += ` ${  i.name  }="${  i.value  }"`);
                    e.outerHTML = `${o  }%##${  e.innerHTML  }##%/a%##`;
                  }
                }),
              (e = o.html()),
              i.images &&
                this.opts.pasteImages &&
                (e = e.replace(
                  /<img(.*?)src="(.*?)"(.*?[^>])>/gi,
                  '##%img$1src="$2"$3%##',
                )),
              this.opts.pastePlainText)
            )
              return e;
            let s;
              const n = i.lists ? ["ul", "ol", "li"] : this.opts.pasteBlockTags;
            s =
              i.block || i.lists
                ? i.inline
                  ? n.concat(this.opts.pasteInlineTags)
                  : n
                : i.inline
                ? this.opts.pasteInlineTags
                : [];
            for (let a = s.length, l = 0; a > l; l++)
              (e = e.replace(
                new RegExp(`</${  s[l]  }>`, "gi"),
                `###/${  s[l]  }###`,
              )),
                (e =
                  s[l] === "td" || s[l] === "th"
                    ? e.replace(
                        new RegExp(
                          `<${ 
                            s[l] 
                            }(.*?[^>])((colspan|rowspan)="(.*?[^>])")?(.*?[^>])>`,
                          "gi",
                        ),
                        `###${  s[l]  } $2###`,
                      )
                    : s[l] === "span"
                    ? e.replace(
                        new RegExp(
                          `<${  s[l]  }(.*?[^>])class="(.*?[^>])"(.*?[^>])>`,
                          "gi",
                        ),
                        `###${  s[l]  } class="$2"###`,
                      )
                    : e.replace(
                        new RegExp(`<${  s[l]  }[^>]*>`, "gi"),
                        `###${  s[l]  }###`,
                      ));
            return e;
          },
          reconvertTags(t, e) {
            if (
              (((e.links && this.opts.pasteLinks) ||
                (e.images && this.opts.pasteImages)) &&
                ((t = t.replace(new RegExp("##%", "gi"), "<")),
                (t = t.replace(new RegExp("%##", "gi"), ">"))),
              this.opts.pastePlainText)
            )
              return t;
            let i;
              const o = e.lists ? ["ul", "ol", "li"] : this.opts.pasteBlockTags;
            i =
              e.block || e.lists
                ? e.inline
                  ? o.concat(this.opts.pasteInlineTags)
                  : o
                : e.inline
                ? this.opts.pasteInlineTags
                : [];
            for (var r = i.length, s = 0; r > s; s++)
              t = t.replace(
                new RegExp(`###/${  i[s]  }###`, "gi"),
                `</${  i[s]  }>`,
              );
            for (var s = 0; r > s; s++)
              t = t.replace(
                new RegExp(`###${  i[s]  }###`, "gi"),
                `<${  i[s]  }>`,
              );
            for (var s = 0; r > s; s++)
              (i[s] !== "td" && i[s] !== "th" && i[s] !== "span") ||
                (t = t.replace(
                  new RegExp(`###${  i[s]  }s?(.*?[^#])###`, "gi"),
                  `<${  i[s]  }$1>`,
                ));
            return t;
          },
          cleanPre(e) {
            (e =
              typeof e === "undefined"
                ? t(this.selection.block()).closest(
                    "pre",
                    this.core.editor()[0],
                  )
                : e),
              t(e)
                .find("br")
                .replaceWith(function() {
                  return document.createTextNode("\n");
                }),
              t(e)
                .find("p")
                .replaceWith(function() {
                  return t(this).contents();
                });
          },
          removeTagsInsidePre(e) {
            const i = t("<div />").append(e);
            return (
              i.find("pre").replaceWith(function() {
                let e = t(this).html();
                return (
                  (e = e.replace(
                    /<br\s?\/?>|<\/p>|<\/div>|<\/li>|<\/td>/gi,
                    "\n",
                  )),
                  (e = e.replace(/(<([^>]+)>)/gi, "")),
                  t("<pre />").append(e)
                );
              }),
              (e = i.html()),
              i.remove(),
              e
            );
          },
          getPlainText(e) {
            (e = e.replace(/<!--[\s\S]*?-->/gi, "")),
              (e = e.replace(/<style[\s\S]*?style>/gi, "")),
              (e = e.replace(/<\/p>|<\/div>|<\/li>|<\/td>/gi, "\n")),
              (e = e.replace(/<\/H[1-6]>/gi, "\n\n"));
            const i = document.createElement("div");
            return (
              (i.innerHTML = e), (e = i.textContent || i.innerText), t.trim(e)
            );
          },
          savePreCode(t) {
            return (
              (t = this.clean.savePreFormatting(t)),
              (t = this.clean.saveCodeFormatting(t)),
              (t = this.clean.restoreSelectionMarkers(t))
            );
          },
          savePreFormatting(e) {
            const i = e.match(/<pre(.*?)>([\w\W]*?)<\/pre>/gi);
            return i === null
              ? e
              : (t.each(
                  i,
                  t.proxy(function(t, i) {
                    let o;
                      let r;
                      let s;
                      let n = [];
                      let a = !1;
                    i.match(/<pre(.*?)>(([\n\r\s]+)?)<code(.*?)>/i)
                      ? ((n = i.match(
                          /<pre(.*?)>(([\n\r\s]+)?)<code(.*?)>([\w\W]*?)<\/code><\/pre>/i,
                        )),
                        (a = !0),
                        (o = n[5]),
                        (r = n[1]),
                        (s = n[4]))
                      : ((n = i.match(/<pre(.*?)>([\w\W]*?)<\/pre>/i)),
                        (o = n[2]),
                        (r = n[1])),
                      (o = o.replace(/<br\s?\/?>/g, "\n")),
                      (o = o.replace(/&nbsp;/g, " ")),
                      this.opts.preSpaces &&
                        (o = o.replace(
                          /\t/g,
                          new Array(this.opts.preSpaces + 1).join(" "),
                        )),
                      (o = this.clean.encodeEntities(o)),
                      (o = o.replace(/\$/g, "&#36;")),
                      (e = a
                        ? e.replace(
                            i,
                            `<pre${ 
                              r 
                              }><code${ 
                              s 
                              }>${ 
                              o 
                              }</code></pre>`,
                          )
                        : e.replace(i, `<pre${  r  }>${  o  }</pre>`));
                  }, this),
                ),
                e);
          },
          saveCodeFormatting(e) {
            const i = e.match(/<code(.*?)>([\w\W]*?)<\/code>/gi);
            return i === null
              ? e
              : (t.each(
                  i,
                  t.proxy(function(t, i) {
                    const o = i.match(/<code(.*?)>([\w\W]*?)<\/code>/i);
                    (o[2] = o[2].replace(/&nbsp;/g, " ")),
                      (o[2] = this.clean.encodeEntities(o[2])),
                      (o[2] = o[2].replace(/\$/g, "&#36;")),
                      (e = e.replace(
                        i,
                        `<code${  o[1]  }>${  o[2]  }</code>`,
                      ));
                  }, this),
                ),
                e);
          },
          restoreSelectionMarkers(t) {
            return (t = t.replace(
              /&lt;span id=&quot;selection-marker-([0-9])&quot; class=&quot;redactor-selection-marker&quot;&gt;​&lt;\/span&gt;/g,
              '<span id="selection-marker-$1" class="redactor-selection-marker">​</span>',
            ));
          },
          saveFormTags(t) {
            return t.replace(
              /<form(.*?)>([\w\W]*?)<\/form>/gi,
              '<section$1 rel="redactor-form-tag">$2</section>',
            );
          },
          restoreFormTags(t) {
            return t.replace(
              /<section(.*?) rel="redactor-form-tag"(.*?)>([\w\W]*?)<\/section>/gi,
              "<form$1$2>$3</form>",
            );
          },
          encodeHtml(t) {
            return (
              (t = t.replace(/”/g, '"')),
              (t = t.replace(/“/g, '"')),
              (t = t.replace(/‘/g, "'")),
              (t = t.replace(/’/g, "'")),
              (t = this.clean.encodeEntities(t))
            );
          },
          encodeEntities(t) {
            return (
              (t = String(t)
                .replace(/&amp;/g, "&")
                .replace(/&lt;/g, "<")
                .replace(/&gt;/g, ">")
                .replace(/&quot;/g, '"')),
              (t = t
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;"))
            );
          },
          stripTags(t, e) {
            if (typeof e === "undefined") return t.replace(/(<([^>]+)>)/gi, "");
            const i = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi;
            return t.replace(i, function(t, i) {
              return e.indexOf(i.toLowerCase()) === -1 ? t : "";
            });
          },
          removeMarkers(t) {
            return t.replace(
              /<span(.*?[^>]?)class="redactor-selection-marker"(.*?[^>]?)>([\w\W]*?)<\/span>/gi,
              "",
            );
          },
          removeSpaces(e) {
            return (
              (e = t.trim(e)),
              (e = e.replace(/\n/g, "")),
              (e = e.replace(/[\t]*/g, "")),
              (e = e.replace(/\n\s*\n/g, "\n")),
              (e = e.replace(/^[\s\n]*/g, " ")),
              (e = e.replace(/[\s\n]*$/g, " ")),
              (e = e.replace(/>\s{2,}</g, "> <")),
              (e = e.replace(/\n\n/g, "\n")),
              (e = e.replace(/\u200B/g, ""))
            );
          },
          removeSpacesHard(e) {
            return (
              (e = t.trim(e)),
              (e = e.replace(/\n/g, "")),
              (e = e.replace(/[\t]*/g, "")),
              (e = e.replace(/\n\s*\n/g, "\n")),
              (e = e.replace(/^[\s\n]*/g, "")),
              (e = e.replace(/[\s\n]*$/g, "")),
              (e = e.replace(/>\s{2,}</g, "><")),
              (e = e.replace(/\n\n/g, "\n")),
              (e = e.replace(/\u200B/g, ""))
            );
          },
          normalizeCurrentHeading() {
            const t = this.selection.block();
            this.utils.isCurrentOrParentHeader() && t && t.normalize();
          },
        };
      },
      code() {
        return {
          syncFire: !0,
          html: !1,
          start(e) {
            (e = t.trim(e)),
              (e = e.replace(
                /^(<span id="selection-marker-1" class="redactor-selection-marker">​<\/span>)/,
                "",
              )),
              this.opts.type === "textarea"
                ? (e = this.clean.onSet(e))
                : this.opts.type === "div" &&
                  e === "" &&
                  (e = this.opts.emptyHtml),
              (e = e.replace(
                /<p><span id="selection-marker-1" class="redactor-selection-marker">​<\/span><\/p>/,
                "",
              )),
              this.events.stopDetectChanges(),
              this.core.editor().html(e),
              this.observe.load(),
              this.events.startDetectChanges();
          },
          set(e, i) {
            (e = t.trim(e)),
              (i = i || {}),
              i.start && (this.start = i.start),
              this.opts.type === "textarea"
                ? (e = this.clean.onSet(e))
                : this.opts.type === "div" &&
                  e === "" &&
                  (e = this.opts.emptyHtml),
              this.core.editor().html(e),
              this.opts.type === "textarea" && this.code.sync(),
              this.placeholder.enable();
          },
          get() {
            if (this.opts.type === "textarea")
              return this.core.textarea().val();
            let t = this.core.editor().html();
            return (t = this.clean.onGet(t));
          },
          sync() {
            if (this.code.syncFire) {
              const e = this.core.editor().html();
                const i = this.code.cleaned(e);
              if (!this.code.isSync(i))
                return (
                  (this.code.html = i),
                  this.opts.type !== "textarea"
                    ? (this.core.callback("sync", e),
                      void this.core.callback("change", e))
                    : void (
                        this.opts.type === "textarea" &&
                        setTimeout(
                          t.proxy(function() {
                            this.code.startSync(e);
                          }, this),
                          10,
                        )
                      )
                );
            }
          },
          startSync(t) {
            (t = this.core.callback("syncBefore", t)),
              (t = this.clean.onSync(t)),
              this.core.textarea().val(t),
              this.core.callback("sync", t),
              this.start === !1 && this.core.callback("change", t),
              (this.start = !1);
          },
          isSync(t) {
            const e = this.code.html !== !1 ? this.code.html : !1;
            return e !== !1 && e === t;
          },
          cleaned(t) {
            return (t = t.replace(/\u200B/g, "")), this.clean.removeMarkers(t);
          },
        };
      },
      core() {
        return {
          id() {
            return this.$editor.attr("id");
          },
          element() {
            return this.$element;
          },
          editor() {
            return typeof this.$editor === "undefined" ? t() : this.$editor;
          },
          textarea() {
            return this.$textarea;
          },
          box() {
            return this.opts.type === "textarea" ? this.$box : this.$element;
          },
          toolbar() {
            return this.$toolbar ? this.$toolbar : !1;
          },
          air() {
            return this.$air ? this.$air : !1;
          },
          object() {
            return t.extend({}, this);
          },
          structure() {
            this.core.editor().toggleClass("redactor-structure");
          },
          addEvent(t) {
            this.core.event = t;
          },
          getEvent() {
            return this.core.event;
          },
          callback(e, i, o) {
            const r = "redactor";
              let s = !1;
              const n = t._data(this.core.element()[0], "events");
            if (typeof n !== "undefined" && typeof n[e] !== "undefined")
              for (let a = n[e].length, l = 0; a > l; l++) {
                const c = n[e][l].namespace;
                if (c === `callback.${  r}`) {
                  const d = n[e][l].handler;
                    const h = typeof o === "undefined" ? [i] : [i, o];
                  s =
                    typeof h === "undefined"
                      ? d.call(this, i)
                      : d.call(this, i, h);
                }
              }
            if (s) return s;
            if (typeof this.opts.callbacks[e] === "undefined")
              return typeof o === "undefined" ? i : o;
            const u = this.opts.callbacks[e];
            return t.isFunction(u)
              ? typeof o === "undefined"
                ? u.call(this, i)
                : u.call(this, i, o)
              : typeof o === "undefined"
              ? i
              : o;
          },
          destroy() {
            (this.opts.destroyed = !0),
              this.core.callback("destroy"),
              this.placeholder.destroy(),
              this.progress.destroy(),
              t(`#redactor-voice-${  this.uuid}`).remove(),
              this.core
                .editor()
                .removeClass(
                  "redactor-in redactor-styles redactor-structure redactor-layer-img-edit",
                ),
              this.core.editor().off("keydown.redactor-remove-textnode"),
              this.core.editor().off(`.redactor-observe.${  this.uuid}`),
              this.$element.off(".redactor").removeData("redactor"),
              this.core.editor().off(".redactor"),
              t(document).off(".redactor-dropdown"),
              t(document).off(`.redactor-air.${  this.uuid}`),
              t(document).off(`mousedown.redactor-blur.${  this.uuid}`),
              t(document).off(`mousedown.redactor.${  this.uuid}`),
              t(document).off(
                `touchstart.redactor.${ 
                  this.uuid 
                  } click.redactor.${ 
                  this.uuid}`,
              ),
              t(window).off(`.redactor-toolbar.${  this.uuid}`),
              t(window).off(`touchmove.redactor.${  this.uuid}`),
              t("body").off(`scroll.redactor.${  this.uuid}`),
              t(this.opts.toolbarFixedTarget).off(
                `scroll.redactor.${  this.uuid}`,
              );
            const e = this;
            this.opts.plugins !== !1 &&
              t.each(this.opts.plugins, function(i, o) {
                t(window).off(`.redactor-plugin-${  o}`),
                  t(document).off(`.redactor-plugin-${  o}`),
                  t("body").off(`.redactor-plugin-${  o}`),
                  e.core.editor().off(`.redactor-plugin-${  o}`);
              }),
              this.$element.off("click.redactor-click-to-edit"),
              this.$element.removeClass("redactor-click-to-edit"),
              this.core.editor().removeClass("redactor-layer"),
              this.core.editor().removeAttr("contenteditable");
            const i = this.code.get();
            this.opts.toolbar &&
              this.$toolbar &&
              this.$toolbar.find("a").each(function() {
                const e = t(this);
                e.data("dropdown") &&
                  (e.data("dropdown").remove(), e.data("dropdown", {}));
              }),
              this.opts.type === "textarea" &&
                (this.$box.after(this.$element),
                this.$box.remove(),
                this.$element.val(i).show()),
              this.opts.air && this.$air.remove(),
              this.opts.toolbar && this.$toolbar && this.$toolbar.remove(),
              this.$modalBox && this.$modalBox.remove(),
              this.$modalOverlay && this.$modalOverlay.remove(),
              t(".redactor-link-tooltip").remove(),
              clearInterval(this.autosaveTimeout);
          },
        };
      },
      detect() {
        return {
          isWebkit() {
            return /webkit/.test(this.opts.userAgent);
          },
          isFirefox() {
            return this.opts.userAgent.indexOf("firefox") > -1;
          },
          isIe(t) {
            if (document.documentMode || /Edge/.test(navigator.userAgent))
              return "edge";
            let e;
            return (
              (e = RegExp(`msie${  isNaN(t) ? "" : `\\s${  t}`}`, "i").test(
                navigator.userAgent,
              )),
              e || (e = !!navigator.userAgent.match(/Trident.*rv[ :]*11\./)),
              e
            );
          },
          isMobile() {
            return /(iPhone|iPod|BlackBerry|Android)/.test(navigator.userAgent);
          },
          isDesktop() {
            return !/(iPhone|iPod|iPad|BlackBerry|Android)/.test(
              navigator.userAgent,
            );
          },
          isIpad() {
            return /iPad/.test(navigator.userAgent);
          },
        };
      },
      dropdown() {
        return {
          active: !1,
          button: !1,
          key: !1,
          position: [],
          getDropdown() {
            return this.dropdown.active;
          },
          build(e, i, o) {
            (o = this.dropdown.buildFormatting(e, o)),
              t.each(
                o,
                t.proxy(function(t, o) {
                  const r = this.dropdown.buildItem(t, o);
                  this.observe.addDropdown(r, t, o), i.attr("rel", e).append(r);
                }, this),
              );
          },
          buildFormatting(e, i) {
            return e !== "format" || this.opts.formattingAdd === !1
              ? i
              : (t.each(
                  this.opts.formattingAdd,
                  t.proxy(function(t, e) {
                    const o = this.utils.isBlockTag(e.args[0])
                      ? "block"
                      : "inline";
                    i[t] = {
                      func: o === "block" ? "block.format" : "inline.format",
                      args: e.args,
                      title: e.title,
                    };
                  }, this),
                ),
                i);
          },
          buildItem(e, i) {
            const o = t("<li />");
            if (
              (typeof i.classname !== "undefined" && o.addClass(i.classname),
              e.search(/^divider/i) !== -1)
            )
              return o.addClass("redactor-dropdown-divider"), o;
            const r = t(
                `<a href="#" class="redactor-dropdown-${ 
                  e 
                  }" role="button" />`,
              );
              const s = t("<span />").html(i.title);
            return (
              r.append(s),
              r.on(
                "mousedown",
                t.proxy(function(t) {
                  t.preventDefault(), this.dropdown.buildClick(t, e, i);
                }, this),
              ),
              o.append(r),
              o
            );
          },
          buildClick(e, i, o) {
            if (!t(e.target).hasClass("redactor-dropdown-link-inactive")) {
              const r = this.dropdown.buildCommand(o);
              typeof o.args !== " undefined"
                ? this.button.toggle(e, i, r.type, r.callback, o.args)
                : this.button.toggle(e, i, r.type, r.callback);
            }
          },
          buildCommand(t) {
            const e = {};
            return (
              (e.type = "func"),
              (e.callback = t.func),
              t.command
                ? ((e.type = "command"), (e.callback = t.command))
                : t.dropdown &&
                  ((e.type = "dropdown"), (e.callback = t.dropdown)),
              e
            );
          },
          show(e, i) {
            return (
              this.detect.isDesktop() && this.core.editor().focus(),
              this.dropdown.hideAll(!1, i),
              (this.dropdown.key = i),
              (this.dropdown.button = this.button.get(this.dropdown.key)),
              this.dropdown.button.hasClass("dropact")
                ? void this.dropdown.hide()
                : ((this.dropdown.active = this.dropdown.button
                    .data("dropdown")
                    .appendTo(document.body)),
                  this.core.callback("dropdownShow", {
                    dropdown: this.dropdown.active,
                    key: this.dropdown.key,
                    button: this.dropdown.button,
                  }),
                  this.button.setActive(this.dropdown.key),
                  this.dropdown.button.addClass("dropact"),
                  this.dropdown.getButtonPosition(),
                  this.button.toolbar().hasClass("toolbar-fixed-box") &&
                  this.detect.isDesktop()
                    ? this.dropdown.showIsFixedToolbar()
                    : this.dropdown.showIsUnFixedToolbar(),
                  this.detect.isDesktop() &&
                    !this.detect.isFirefox() &&
                    (this.dropdown.active.on(
                      "mouseover.redactor-dropdown",
                      t.proxy(this.utils.disableBodyScroll, this),
                    ),
                    this.dropdown.active.on(
                      "mouseout.redactor-dropdown mousedown.redactor-dropdown",
                      t.proxy(this.utils.enableBodyScroll, this),
                    )),
                  void e.stopPropagation())
            );
          },
          showIsFixedToolbar() {
            let e =
                this.dropdown.button.position().top +
                this.dropdown.button.innerHeight() +
                this.opts.toolbarFixedTopOffset;
              let i = "fixed";
            this.opts.toolbarFixedTarget !== document &&
              ((e =
                this.dropdown.button.innerHeight() +
                this.$toolbar.offset().top +
                this.opts.toolbarFixedTopOffset),
              (i = "absolute")),
              this.dropdown.active
                .css({
                  position: i,
                  left: `${this.dropdown.position.left  }px`,
                  top: `${e  }px`,
                })
                .show(),
              this.dropdown.active.redactorAnimation(
                "slideDown",
                { duration: 0.2 },
                t.proxy(function() {
                  this.dropdown.enableCallback(), this.dropdown.enableEvents();
                }, this),
              );
          },
          showIsUnFixedToolbar() {
            this.dropdown.active
              .css({
                position: "absolute",
                left: `${this.dropdown.position.left  }px`,
                top:
                  `${this.dropdown.button.innerHeight() +
                  this.dropdown.position.top 
                  }px`,
              })
              .show(),
              this.dropdown.active.redactorAnimation(
                this.opts.animation ? "slideDown" : "show",
                { duration: 0.2 },
                t.proxy(function() {
                  this.dropdown.enableCallback(), this.dropdown.enableEvents();
                }, this),
              );
          },
          enableEvents() {
            t(document).on(
              "mousedown.redactor-dropdown",
              t.proxy(this.dropdown.hideAll, this),
            ),
              this.core
                .editor()
                .on(
                  "touchstart.redactor-dropdown",
                  t.proxy(this.dropdown.hideAll, this),
                ),
              t(document).on(
                "keyup.redactor-dropdown",
                t.proxy(this.dropdown.closeHandler, this),
              );
          },
          enableCallback() {
            this.core.callback("dropdownShown", {
              dropdown: this.dropdown.active,
              key: this.dropdown.key,
              button: this.dropdown.button,
            });
          },
          getButtonPosition() {
            this.dropdown.position = this.dropdown.button.offset();
            const e = this.dropdown.active.width();
            this.dropdown.position.left + e > t(document).width() &&
              (this.dropdown.position.left = Math.max(
                0,
                this.dropdown.position.left -
                  e +
                  parseInt(this.dropdown.button.innerWidth()),
              ));
          },
          closeHandler(t) {
            t.which === this.keyCode.ESC &&
              (this.dropdown.hideAll(t), this.core.editor().focus());
          },
          hideAll(e, i) {
            if (
              (this.detect.isDesktop() && this.utils.enableBodyScroll(),
              e === !1 ||
                t(e.target).closest(".redactor-dropdown").length === 0)
            ) {
              const o =
                  typeof i === "undefined"
                    ? this.button.toolbar().find("a.dropact")
                    : this.button
                        .toolbar()
                        .find("a.dropact")
                        .not(`.re-${  i}`);
                const r =
                  typeof i === "undefined"
                    ? t(`.redactor-dropdown-${  this.uuid}`)
                    : t(`.redactor-dropdown-${  this.uuid}`).not(
                        `.redactor-dropdown-box-${  i}`,
                      );
              r.length !== 0 &&
                (t(document).off(".redactor-dropdown"),
                this.core.editor().off(".redactor-dropdown"),
                t.each(
                  r,
                  t.proxy(function(e, i) {
                    const o = t(i);
                    this.core.callback("dropdownHide", o),
                      o.hide(),
                      o.off("mouseover mouseout").off(".redactor-dropdown");
                  }, this),
                ),
                o.removeClass("redactor-act dropact"));
            }
          },
          hide() {
            this.dropdown.active !== !1 &&
              (this.detect.isDesktop() && this.utils.enableBodyScroll(),
              this.dropdown.active.redactorAnimation(
                this.opts.animation ? "slideUp" : "hide",
                { duration: 0.2 },
                t.proxy(function() {
                  t(document).off(".redactor-dropdown"),
                    this.core.editor().off(".redactor-dropdown"),
                    this.dropdown.hideOut();
                }, this),
              ));
          },
          hideOut() {
            this.core.callback("dropdownHide", this.dropdown.active),
              this.dropdown.button.removeClass("redactor-act dropact"),
              this.dropdown.active
                .off("mouseover mouseout")
                .off(".redactor-dropdown"),
              (this.dropdown.button = !1),
              (this.dropdown.key = !1),
              (this.dropdown.active = !1);
          },
        };
      },
      events() {
        return {
          focused: !1,
          blured: !0,
          dropImage: !1,
          stopChanges: !1,
          stopDetectChanges() {
            this.events.stopChanges = !0;
          },
          startDetectChanges() {
            const t = this;
            setTimeout(function() {
              t.events.stopChanges = !1;
            }, 1);
          },
          dragover(e) {
            e.preventDefault(),
              e.stopPropagation(),
              e.target.tagName === "IMG" &&
                t(e.target).addClass("redactor-image-dragover");
          },
          dragleave(t) {
            this.core
              .editor()
              .find("img")
              .removeClass("redactor-image-dragover");
          },
          drop(t) {
            return (
              (t = t.originalEvent || t),
              this.core
                .editor()
                .find("img")
                .removeClass("redactor-image-dragover"),
              this.opts.type === "inline" || this.opts.type === "pre"
                ? (t.preventDefault(), !1)
                : void 0 !== window.FormData && t.dataTransfer
                ? t.dataTransfer.files.length === 0
                  ? this.events.onDrop(t)
                  : (this.events.onDropUpload(t),
                    void this.core.callback("drop", t))
                : !0
            );
          },
          click(t) {
            const e = this.core.getEvent();
              const i = e === "click" || e === "arrow" ? !1 : "click";
            this.core.addEvent(i),
              this.utils.disableSelectAll(),
              this.core.callback("click", t);
          },
          focus(t) {
            if (
              !this.rtePaste &&
              (this.events.isCallback("focus") &&
                this.core.callback("focus", t),
              (this.events.focused = !0),
              (this.events.blured = !1),
              this.selection.current() === !1)
            ) {
              const e = this.selection.get();
                const i = this.selection.range(e);
              i.setStart(this.core.editor()[0], 0),
                i.setEnd(this.core.editor()[0], 0),
                this.selection.update(e, i);
            }
          },
          blur(e) {
            this.start ||
              this.rtePaste ||
              (t(e.target).closest(
                  `#${ 
                    this.core.id() 
                    }, .redactor-toolbar, .redactor-dropdown, #redactor-modal-box`,
                ).length ===
                0 &&
                (!this.events.blured &&
                  this.events.isCallback("blur") &&
                  this.core.callback("blur", e),
                (this.events.focused = !1),
                (this.events.blured = !0)));
          },
          touchImageEditing() {
            let e = -1;
            (this.events.imageEditing = !1),
              t(window).on(
                `touchmove.redactor.${  this.uuid}`,
                t.proxy(function() {
                  (this.events.imageEditing = !0),
                    e !== -1 && clearTimeout(e),
                    (e = setTimeout(
                      t.proxy(function() {
                        this.events.imageEditing = !1;
                      }, this),
                      500,
                    ));
                }, this),
              );
          },
          init() {
            this.core
              .editor()
              .on(
                "dragover.redactor dragenter.redactor",
                t.proxy(this.events.dragover, this),
              ),
              this.core
                .editor()
                .on("dragleave.redactor", t.proxy(this.events.dragleave, this)),
              this.core
                .editor()
                .on("drop.redactor", t.proxy(this.events.drop, this)),
              this.core
                .editor()
                .on("click.redactor", t.proxy(this.events.click, this)),
              this.core
                .editor()
                .on("paste.redactor", t.proxy(this.paste.init, this)),
              this.core
                .editor()
                .on("keydown.redactor", t.proxy(this.keydown.init, this)),
              this.core
                .editor()
                .on("keyup.redactor", t.proxy(this.keyup.init, this)),
              this.core
                .editor()
                .on("focus.redactor", t.proxy(this.events.focus, this)),
              t(document).on(
                `mousedown.redactor-blur.${  this.uuid}`,
                t.proxy(this.events.blur, this),
              ),
              this.events.touchImageEditing(),
              this.events.createObserver(),
              this.events.setupObserver();
          },
          createObserver() {
            const e = this;
            this.events.observer = new MutationObserver(function(i) {
              i.forEach(t.proxy(e.events.iterateObserver, e));
            });
          },
          iterateObserver(t) {
            let e = !1;
            (((this.opts.type === "textarea" || this.opts.type === "div") &&
              !this.detect.isFirefox() &&
              t.target === this.core.editor()[0]) ||
              (t.attributeName === "class" &&
                t.target === this.core.editor()[0])) &&
              (e = !0),
              e || (this.observe.load(), this.events.changeHandler());
          },
          setupObserver() {
            this.events.observer.observe(this.core.editor()[0], {
              attributes: !0,
              subtree: !0,
              childList: !0,
              characterData: !0,
              characterDataOldValue: !0,
            });
          },
          changeHandler() {
            this.events.stopChanges ||
              (this.code.sync(),
              this.autosave.is() &&
                (clearTimeout(this.autosaveTimeout),
                (this.autosaveTimeout = setTimeout(
                  t.proxy(this.autosave.send, this),
                  300,
                ))));
          },
          onDropUpload(t) {
            if (
              (t.preventDefault(),
              t.stopPropagation(),
              (this.opts.dragImageUpload || this.opts.dragFileUpload) &&
                (this.opts.imageUpload !== null ||
                  this.opts.fileUpload !== null))
            ) {
              t.target.tagName === "IMG" && (this.events.dropImage = t.target);
              for (
                let e = t.dataTransfer.files, i = e.length, o = 0;
                i > o;
                o++
              )
                this.upload.directUpload(e[o], t);
            }
          },
          onDrop(t) {
            this.core.callback("drop", t);
          },
          isCallback(e) {
            return (
              typeof this.opts.callbacks[e] !== "undefined" &&
              t.isFunction(this.opts.callbacks[e])
            );
          },
          stopDetect() {
            this.events.stopDetectChanges();
          },
          startDetect() {
            this.events.startDetectChanges();
          },
        };
      },
      file() {
        return {
          is() {
            return !(
              !this.opts.fileUpload ||
              (!this.opts.fileUpload && !this.opts.s3)
            );
          },
          show() {
            this.modal.load("file", this.lang.get("file"), 700),
              this.upload.init(
                "#redactor-modal-file-upload",
                this.opts.fileUpload,
                this.file.insert,
              ),
              t("#redactor-filename").val(this.selection.get().toString()),
              this.modal.show();
          },
          insert(e, i, o) {
            if (typeof e.error !== "undefined")
              return (
                this.modal.close(),
                void this.core.callback("fileUploadError", e)
              );
            this.file.release(o, i), this.buffer.set(), this.air.collapsed();
            const r = this.file.text(e);
              let s = t("<a />")
                .attr("href", e.url)
                .text(r);
              const n = typeof e.id === "undefined" ? "" : e.id;
              const a = typeof e.s3 === "undefined" ? "file" : "s3";
            s.attr(`data-${  a}`, n),
              (s = t(this.insert.node(s))),
              this.caret.after(s),
              this.storage.add({ type: a, node: s[0], url: s[0].href, id: n }),
              i !== null && this.core.callback("fileUpload", s, e);
          },
          release(t, e) {
            e
              ? (this.marker.remove(),
                this.insert.nodeToPoint(t, this.marker.get()),
                this.selection.restore())
              : this.modal.close();
          },
          text(e) {
            const i = t("#redactor-filename").val();
            return typeof i === "undefined" || i === "" ? e.name : i;
          },
        };
      },
      focus() {
        return {
          start() {
            if ((this.core.editor().focus(), this.opts.type !== "inline")) {
              const t = this.focus.first();
              t !== !1 && this.caret.start(t);
            }
          },
          end() {
            this.core.editor().focus();
            const t = this.opts.inline ? this.core.editor() : this.focus.last();
            if (t.length !== 0) {
              const e = this.focus.lastChild(t);
              if (this.detect.isWebkit() || e === !1) {
                const i = this.selection.get();
                  const o = this.selection.range(i);
                o !== null
                  ? (o.selectNodeContents(t[0]),
                    o.collapse(!1),
                    this.selection.update(i, o))
                  : this.caret.end(t);
              } else this.caret.end(e);
            }
          },
          first() {
            const t = this.core
              .editor()
              .children()
              .first();
            return t.length !== 0 ||
              (t[0].length !== 0 &&
                t[0].tagName !== "BR" &&
                t[0].tagName !== "HR" &&
                t[0].nodeType !== 3)
              ? t[0].tagName === "UL" || t[0].tagName === "OL"
                ? t.find("li").first()
                : t
              : !1;
          },
          last() {
            return this.core
              .editor()
              .children()
              .last();
          },
          lastChild(t) {
            const e = t[0].lastChild;
            return e !== null && this.utils.isInlineTag(e.tagName) ? e : !1;
          },
          is() {
            return this.core.editor()[0] === document.activeElement;
          },
        };
      },
      image() {
        return {
          is() {
            return !(
              !this.opts.imageUpload ||
              (!this.opts.imageUpload && !this.opts.s3)
            );
          },
          show() {
            this.modal.load("image", this.lang.get("image"), 700),
              this.upload.init(
                "#redactor-modal-image-droparea",
                this.opts.imageUpload,
                this.image.insert,
              ),
              this.modal.show();
          },
          insert(e, i, o) {
            let r;
            if (typeof e.error !== "undefined")
              return (
                this.modal.close(),
                (this.events.dropImage = !1),
                void this.core.callback("imageUploadError", e, o)
              );
            if (this.events.dropImage !== !1)
              return (
                (r = t(this.events.dropImage)),
                this.core.callback("imageDelete", r[0].src, r),
                r.attr("src", e.url),
                (this.events.dropImage = !1),
                void this.core.callback("imageUpload", r, e)
              );
            this.placeholder.hide();
            const s = t(`<${  this.opts.imageTag  }>`);
            (r = t("<img>")), r.attr("src", e.url);
            const n = typeof e.id === "undefined" ? "" : e.id;
              const a = typeof e.s3 === "undefined" ? "image" : "s3";
            r.attr(`data-${  a}`, n), s.append(r);
            const l = this.utils.isTag(this.selection.current(), "pre");
            if (i) {
              this.air.collapsed(), this.marker.remove();
              const c = this.insert.nodeToPoint(o, this.marker.get());
                const d = t(c).next();
              this.selection.restore(),
                this.buffer.set(),
                typeof d !== "undefined" &&
                d.length !== 0 &&
                d[0].tagName === "IMG"
                  ? (this.core.callback("imageDelete", d[0].src, d),
                    d
                      .closest("figure, p", this.core.editor()[0])
                      .replaceWith(s),
                    this.caret.after(s))
                  : (l ? t(l).after(s) : this.insert.node(s),
                    this.caret.after(s));
            } else
              this.modal.close(),
                this.buffer.set(),
                this.air.collapsed(),
                l ? t(l).after(s) : this.insert.node(s),
                this.caret.after(s);
            (this.events.dropImage = !1),
              this.storage.add({ type: a, node: r[0], url: r[0].src, id: n }),
              i !== null
                ? this.core.callback("imageUpload", r, e)
                : this.core.callback("imageInserted", r, e);
          },
          setEditable(e) {
            if (
              (e.on("dragstart", function(t) {
                t.preventDefault();
              }),
              this.opts.imageResizable)
            ) {
              const i = t.proxy(function(i) {
                (this.observe.image = e),
                  (this.image.resizer = this.image.loadEditableControls(e)),
                  t(document).on(
                    `mousedown.redactor-image-resize-hide.${  this.uuid}`,
                    t.proxy(this.image.hideResize, this),
                  ),
                  this.image.resizer &&
                    this.image.resizer.on(
                      "mousedown.redactor touchstart.redactor",
                      t.proxy(function(t) {
                        this.image.setResizable(t, e);
                      }, this),
                    );
              }, this);
              e
                .off("mousedown.redactor")
                .on("mousedown.redactor", t.proxy(this.image.hideResize, this)),
                e
                  .off("click.redactor touchstart.redactor")
                  .on("click.redactor touchstart.redactor", i);
            } else
              e.off("click.redactor touchstart.redactor").on(
                "click.redactor touchstart.redactor",
                t.proxy(function(i) {
                  setTimeout(
                    t.proxy(function() {
                      this.image.showEdit(e);
                    }, this),
                    200,
                  );
                }, this),
              );
          },
          setResizable(t, e) {
            t.preventDefault(),
              (this.image.resizeHandle = {
                x: t.pageX,
                y: t.pageY,
                el: e,
                ratio: e.width() / e.height(),
                h: e.height(),
              }),
              (t = t.originalEvent || t),
              t.targetTouches &&
                ((this.image.resizeHandle.x = t.targetTouches[0].pageX),
                (this.image.resizeHandle.y = t.targetTouches[0].pageY)),
              this.image.startResize();
          },
          startResize() {
            t(document).on(
              "mousemove.redactor-image-resize touchmove.redactor-image-resize",
              t.proxy(this.image.moveResize, this),
            ),
              t(document).on(
                "mouseup.redactor-image-resize touchend.redactor-image-resize",
                t.proxy(this.image.stopResize, this),
              );
          },
          moveResize(t) {
            t.preventDefault(), (t = t.originalEvent || t);
            var e = this.image.resizeHandle.h;
            e += t.targetTouches
              ? t.targetTouches[0].pageY - this.image.resizeHandle.y
              : t.pageY - this.image.resizeHandle.y;
            const i = Math.round(e * this.image.resizeHandle.ratio);
            if (!(e < 50 || i < 100)) {
              var e = Math.round(
                this.image.resizeHandle.el.width() /
                  this.image.resizeHandle.ratio,
              );
              this.image.resizeHandle.el.attr({ width: i, height: e }),
                this.image.resizeHandle.el.width(i),
                this.image.resizeHandle.el.height(e),
                this.code.sync();
            }
          },
          stopResize() {
            (this.handle = !1),
              t(document).off(".redactor-image-resize"),
              this.image.hideResize();
          },
          hideResize(e) {
            if (
              !e ||
              t(e.target).closest("#redactor-image-box", this.$editor[0])
                  .length ===
                0
            ) {
              if (e && e.target.tagName == "IMG") {
                t(e.target);
              }
              const i = this.$editor.find("#redactor-image-box");
              i.length !== 0 &&
                (t("#redactor-image-editter").remove(),
                t("#redactor-image-resizer").remove(),
                i.find("img").css({
                  marginTop: i[0].style.marginTop,
                  marginBottom: i[0].style.marginBottom,
                  marginLeft: i[0].style.marginLeft,
                  marginRight: i[0].style.marginRight,
                }),
                i.css("margin", ""),
                i.find("img").css("opacity", ""),
                i.replaceWith(function() {
                  return t(this).contents();
                }),
                t(document).off(
                  `mousedown.redactor-image-resize-hide.${  this.uuid}`,
                ),
                typeof this.image.resizeHandle !== "undefined" &&
                  this.image.resizeHandle.el.attr(
                    "rel",
                    this.image.resizeHandle.el.attr("style"),
                  ));
            }
          },
          loadResizableControls(e, i) {
            if (this.opts.imageResizable && !this.detect.isMobile()) {
              const o = t(
                '<span id="redactor-image-resizer" data-redactor="verified"></span>',
              );
              return (
                this.detect.isDesktop() ||
                  o.css({ width: "15px", height: "15px" }),
                o.attr("contenteditable", !1),
                i.append(o),
                i.append(e),
                o
              );
            }
            return i.append(e), !1;
          },
          loadEditableControls(e) {
            const i = t(
              '<span id="redactor-image-box" data-redactor="verified">',
            );
            if (
              (i.css("float", e.css("float")).attr("contenteditable", !1),
              e[0].style.margin != "auto"
                ? (i.css({
                    marginTop: e[0].style.marginTop,
                    marginBottom: e[0].style.marginBottom,
                    marginLeft: e[0].style.marginLeft,
                    marginRight: e[0].style.marginRight,
                  }),
                  e.css("margin", ""))
                : i.css({ display: "block", margin: "auto" }),
              e.css("opacity", ".5").after(i),
              this.opts.imageEditable)
            ) {
              (this.image.editter = t(
                `<span id="redactor-image-editter" data-redactor="verified">${ 
                  this.lang.get("edit") 
                  }</span>`,
              )),
                this.image.editter.attr("contenteditable", !1),
                this.image.editter.on(
                  "click",
                  t.proxy(function() {
                    this.image.showEdit(e);
                  }, this),
                ),
                i.append(this.image.editter);
              const o = this.image.editter.innerWidth();
              this.image.editter.css("margin-left", `-${  o / 2  }px`);
            }
            return this.image.loadResizableControls(e, i);
          },
          showEdit(e) {
            if (!this.events.imageEditing) {
              this.observe.image = e;
              const i = e.closest("a", this.$editor[0]);
                const o = e.closest("figure", this.$editor[0]);
                const r = o.length !== 0 ? o : e;
              if (
                (this.modal.load("image-edit", this.lang.get("edit"), 705),
                (this.image.buttonDelete = this.modal
                  .getDeleteButton()
                  .text(this.lang.get("delete"))),
                (this.image.buttonSave = this.modal
                  .getActionButton()
                  .text(this.lang.get("save"))),
                this.image.buttonDelete.on(
                  "click",
                  t.proxy(this.image.remove, this),
                ),
                this.image.buttonSave.on(
                  "click",
                  t.proxy(this.image.update, this),
                ),
                this.opts.imageCaption === !1)
              )
                t("#redactor-image-caption")
                  .val("")
                  .hide()
                  .prev()
                  .hide();
              else {
                const s = e.closest(this.opts.imageTag, this.$editor[0]);
                  const n = s.find("figcaption");
                n !== 0 &&
                  t("#redactor-image-caption")
                    .val(n.text())
                    .show();
              }
              if (this.opts.imagePosition) {
                const a =
                    o.length !== 0
                      ? r.css("text-align") === "center"
                      : r.css("display") == "block" && r.css("float") == "none";
                  const l = a ? "center" : r.css("float");
                t("#redactor-image-align").val(l);
              } else t(".redactor-image-position-option").hide();
              t("#redactor-image-preview").html(
                t(`<img src="${  e.attr("src")  }" style="max-width: 100%;">`),
              ),
                t("#redactor-image-title").val(e.attr("alt"));
              const c = t("#redactor-image-link");
              c.attr("href", e.attr("src")),
                i.length !== 0 &&
                  (c.val(i.attr("href")),
                  i.attr("target") === "_blank" &&
                    t("#redactor-image-link-blank").prop("checked", !0)),
                t(".redactor-link-tooltip").remove(),
                this.modal.show(),
                this.detect.isDesktop() && t("#redactor-image-title").focus();
            }
          },
          update() {
            let e = this.observe.image;
              let i = e.closest("a", this.core.editor()[0]);
              const o = t("#redactor-image-title")
                .val()
                .replace(/(<([^>]+)>)/gi, "");
            e.attr("alt", o).attr("title", o), this.image.setFloating(e);
            let r = t
              .trim(t("#redactor-image-link").val())
              .replace(/(<([^>]+)>)/gi, "");
            if (r !== "") {
              const s = "((xn--)?[a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}";
                const n = new RegExp(`^(http|ftp|https)://${  s}`, "i");
                const a = new RegExp(`^${  s}`, "i");
              r.search(n) === -1 &&
                r.search(a) === 0 &&
                this.opts.linkProtocol &&
                (r = `${this.opts.linkProtocol  }://${  r}`);
              const l = !!t("#redactor-image-link-blank").prop("checked");
              if (i.length === 0) {
                const c = t(
                  `<a href="${ 
                    r 
                    }" id="redactor-img-tmp">${ 
                    this.utils.getOuterHtml(e) 
                    }</a>`,
                );
                l && c.attr("target", "_blank"),
                  (e = e.replaceWith(c)),
                  (i = this.core.editor().find("#redactor-img-tmp")),
                  i.removeAttr("id");
              } else
                i.attr("href", r),
                  l ? i.attr("target", "_blank") : i.removeAttr("target");
            } else i.length !== 0 && i.replaceWith(this.utils.getOuterHtml(e));
            this.image.addCaption(e, i), this.modal.close(), this.buffer.set();
          },
          setFloating(e) {
            const i = e.closest("figure", this.$editor[0]);
              const o = i.length !== 0 ? i : e;
              const r = t("#redactor-image-align").val();
              let s = "";
              let n = "";
              let a = "";
              let l = "";
            switch (r) {
              case "left":
                (s = "left"),
                  (a =
                    `0 ${ 
                    this.opts.imageFloatMargin 
                    } ${ 
                    this.opts.imageFloatMargin 
                    } 0`);
                break;
              case "right":
                (s = "right"),
                  (a =
                    `0 0 ${ 
                    this.opts.imageFloatMargin 
                    } ${ 
                    this.opts.imageFloatMargin}`);
                break;
              case "center":
                i.length !== 0 ? (l = "center") : ((n = "block"), (a = "auto"));
            }
            o.css({ float: s, display: n, margin: a, "text-align": l }),
              o.attr("rel", e.attr("style"));
          },
          addCaption(e, i) {
            const o = t("#redactor-image-caption").val();
              const r = i.length !== 0 ? i : e;
              let s = r.next();
            (s.length !== 0 && s[0].tagName === "FIGCAPTION") || (s = !1),
              o !== ""
                ? s === !1
                  ? ((s = t("<figcaption />").text(o)), r.after(s))
                  : s.text(o)
                : s !== !1 && s.remove();
          },
          remove(e, i, o) {
            (i = typeof i === "undefined" ? t(this.observe.image) : i),
              typeof e !== "boolean" && this.buffer.set(),
              this.events.stopDetectChanges();
            const r = i.closest("a", this.core.editor()[0]);
              const s = i.closest(this.opts.imageTag, this.core.editor()[0]);
              let n = i.parent();
              const a = this.core.callback("imageDelete", e, i[0]);
            if (a === !1) return e.preventDefault(), !1;
            t("#redactor-image-box").length !== 0 &&
              (n = t("#redactor-image-box").parent());
            let l; let c;
            s.length !== 0
              ? ((c = s.prev()), (l = s.next()), s.remove())
              : r.length !== 0
              ? ((n = r.parent()), r.remove())
              : i.remove(),
              t("#redactor-image-box").remove(),
              e !== !1 &&
                (l && l.length !== 0
                  ? this.caret.start(l)
                  : c && c.length !== 0 && this.caret.end(c)),
              typeof e !== "boolean" && this.modal.close(),
              this.utils.restoreScroll(),
              (this.observe.image = !1),
              this.events.startDetectChanges(),
              this.placeholder.enable(),
              this.code.sync();
          },
        };
      },
      indent() {
        return {
          increase() {
            if (this.list.get()) {
              const e = t(this.selection.current()).closest("li");
                const i = e.closest("ul, ol", this.core.editor()[0]);
                const o = e.closest("li");
                const r = o.prev();
              if (r.length !== 0 && r[0].tagName === "LI")
                if ((this.buffer.set(), this.utils.isCollapsed())) {
                  var s = i[0].tagName;
                    var n = t(`<${  s  } />`);
                  this.selection.save();
                  const a = r.find("ol").first();
                  if (a.length === 1) a.append(e);
                  else {
                    var s = i[0].tagName;
                      var n = t(`<${  s  } />`);
                    n.append(e), r.append(n);
                  }
                  this.selection.restore();
                } else
                  document.execCommand("indent"),
                    this.selection.save(),
                    this.indent.removeEmpty(),
                    this.indent.normalize(),
                    this.selection.restore();
            }
          },
          decrease() {
            if (this.list.get()) {
              const e = t(this.selection.current()).closest("li");
              e.closest("ul, ol", this.core.editor()[0]);
              this.buffer.set(), document.execCommand("outdent");
              let i = t(this.selection.current()).closest(
                "li",
                this.core.editor()[0],
              );
              if (
                (this.utils.isCollapsed() && this.indent.repositionItem(i),
                i.length === 0)
              ) {
                document.execCommand("formatblock", !1, "p"),
                  (i = t(this.selection.current()));
                const o = i.next();
                o.length !== 0 && o[0].tagName === "BR" && o.remove();
              }
              this.selection.save(),
                this.indent.removeEmpty(),
                this.indent.normalize(),
                this.selection.restore();
            }
          },
          repositionItem(t) {
            const e = t.next();
            e.length === 0 ||
              (e[0].tagName === "UL" && e[0].tagName === "OL") ||
              t.append(e);
            const i = t.prev();
            if (i.length !== 0 && i[0].tagName !== "LI") {
              this.selection.save();
              const o = t.parents("li", this.core.editor()[0]);
              o.after(t), this.selection.restore();
            }
          },
          normalize() {
            this.core
              .editor()
              .find("li")
              .each(
                t.proxy(function(e, i) {
                  const o = t(i);
                  o.find(this.opts.inlineTags.join(",")).each(function() {
                    t(this).removeAttr("style");
                  });
                  const r = o.parent();
                  if (r.length !== 0 && r[0].tagName === "LI")
                    return void r.after(o);
                  const s = o.next();
                  s.length === 0 ||
                    (s[0].tagName !== "UL" && s[0].tagName !== "OL") ||
                    o.append(s);
                }, this),
              );
          },
          removeEmpty(e) {
            const i = this.core.editor().find("ul, ol");
              const o = this.core.editor().find("li");
            o.each(
              t.proxy(function(t, e) {
                this.indent.removeItemEmpty(e);
              }, this),
            ),
              i.each(
                t.proxy(function(t, e) {
                  this.indent.removeItemEmpty(e);
                }, this),
              ),
              o.each(
                t.proxy(function(t, e) {
                  this.indent.removeItemEmpty(e);
                }, this),
              );
          },
          removeItemEmpty(e) {
            let i = e.innerHTML.replace(/[\t\s\n]/g, "");
            (i = i.replace(/<span><\/span>/g, "")), i === "" && t(e).remove();
          },
        };
      },
      inline() {
        return {
          getClearedNodes() {
            for (
              var e = this.selection.nodes(),
                i = [],
                o = e.length,
                r = 0,
                s = 0;
              o > s;
              s++
            )
              if (t(e[s]).hasClass("redactor-selection-marker")) {
                r = s + 2;
                break;
              }
            for (var s = 0; o > s; s++)
              s >= r && !this.utils.isBlockTag(e[s].tagName) && i.push(e[s]);
            return i;
          },
          isConvertableAttr(e, i, o) {
            const r = t(e).attr(i);
            if (r)
              if (i === "style") {
                o = t.trim(o).replace(/;$/, "");
                for (var s = o.split(";"), n = 0, a = 0; a < s.length; a++) {
                  const l = s[a].split(":");
                    const c = t.trim(l[0]);
                    const d = t.trim(l[1]);
                  if (c.search(/color/) !== -1) {
                    const h = t(e).css(c);
                    !h || (h !== d && this.utils.rgb2hex(h) !== d) || n++;
                  } else t(e).css(c) === d && n++;
                }
                if (n === s.length) return 1;
              } else if (r === o) return 1;
            return 0;
          },
          isConvertable(t, e, i, o) {
            if (e === i) {
              if (!o) return !0;
              let r = 0;
              for (const s in o) r += this.inline.isConvertableAttr(t, s, o[s]);
              if (r === Object.keys(o).length) return !0;
            }
            return !1;
          },
          setNodesStriked(e, i, o) {
            for (let r = 0; r < e.length; r++) {
              const s = e[r].tagName ? e[r].tagName.toLowerCase() : void 0;
                const n = e[r].parentNode;
                const a = n && n.tagName ? n.tagName.toLowerCase() : void 0;
                var l = this.inline.isConvertable(n, a, i, o);
              if (l) {
                var c = t(n).replaceWith(function() {
                  return t("<strike>").append(t(this).contents());
                });
                c.attr("data-redactor-inline-converted");
              }
              var l = this.inline.isConvertable(e[r], s, i, o);
              if (l)
                var c = t(e[r]).replaceWith(function() {
                  return t("<strike>").append(t(this).contents());
                });
            }
          },
          format(t, e, i, o) {
            if (typeof e !== "undefined" && typeof e !== "object") {
              const r = {};
              (r[e] = i), (e = r);
            }
            if (
              ((t = t.toLowerCase()),
              !this.utils.isCurrentOrParent(["PRE", "CODE"]))
            ) {
              for (
                let s = [
                    "b",
                    "bold",
                    "i",
                    "italic",
                    "underline",
                    "strikethrough",
                    "deleted",
                    "superscript",
                    "subscript",
                  ],
                  n = [
                    "strong",
                    "strong",
                    "em",
                    "em",
                    "u",
                    "del",
                    "del",
                    "sup",
                    "sub",
                  ],
                  a = 0;
                a < s.length;
                a++
              )
                t === s[a] && (t = n[a]);
              this.placeholder.hide(),
                this.buffer.set(),
                this.utils.isCollapsed()
                  ? this.inline.formatCollapsed(t, e, i, o)
                  : this.inline.formatUncollapsed(t, e, i, o);
            }
          },
          formatUncollapsed(t, e, i, o) {
            this.selection.save();
            const r = this.inline.getClearedNodes();
            this.inline.setNodesStriked(r, t, e),
              this.selection.restore(),
              document.execCommand("strikethrough"),
              this.selection.saveInstant();
            const s = this;
            this.core
              .editor()
              .find("strike")
              .each(function() {
                const i = s.utils.replaceToTag(this, t);
                for (var r in e) s.inline.setAttr(i, r, e[r], o);
                const n = i.find(t);
                if (n.length !== 0)
                  for (var r in e) s.inline.removeSpecificAttr(n, r, e[r]);
                const a = i.parent();
                if (a.html() == i[0].outerHTML)
                  for (var r in e) s.inline.removeSpecificAttr(a, r, e[r]);
                i.attr("data-redactor-style-cache", i.attr("style"));
              }),
              this.selection.restoreInstant();
          },
          formatCollapsed(e, i, o, r) {
            const s = this.selection.inline();
            if (s) {
              const n = s.tagName.toLowerCase();
              if (n === e)
                if (this.utils.isEmpty(s.innerHTML))
                  this.caret.after(s), t(s).remove();
                else {
                  const a = this.inline.insertBreakpoint(s, n);
                  this.caret.after(a);
                }
              else
                t(s).closest(e).length === 0
                  ? this.inline.insertInline(e, i, o, r)
                  : this.caret.start(s);
            } else this.inline.insertInline(e, i, o, r);
          },
          insertBreakpoint(e, i) {
            let o = document.createElement("span");
            (o.id = "redactor-inline-breakpoint"), (o = this.insert.node(o));
            const r = this.utils.isEndOfElement(e);
              let s = this.utils.getOuterHtml(e);
              const n = r ? "" : `<${  i  }>`;
            s = s.replace(
              /<span\sid="redactor-inline-breakpoint">​<\/span>/i,
              `</${  i  }>${  n}`,
            );
            const a = t(s);
            return (
              t(e).replaceWith(a),
              n !== "" && this.utils.cloneAttributes(e, a.last()),
              a.first()
            );
          },
          insertInline(t, e, i, o) {
            let r = document.createElement(t);
            (r = this.inline.setAttr(r, e, i, o)),
              this.insert.node(r),
              this.caret.start(r);
          },
          setAttr(e, i, o, r) {
            if (typeof i === "undefined") return e;
            const s = typeof r === "undefined" ? "toggle" : r;
            return (
              i === "class"
                ? (e = this.inline[`${s  }Class`](o, e))
                : s === "remove"
                ? (e = this.inline[`${s  }Attr`](i, e))
                : s === "removeAll"
                ? (e = this.inline[`${s  }Attr`](e))
                : ((e = this.inline[`${s  }Attr`](i, o, e)),
                  i === "style" &&
                    e[0].tagName === "SPAN" &&
                    t(e).attr("data-redactor-span", !0)),
              e
            );
          },
          getInlines(t) {
            return typeof t === "undefined" ? this.selection.inlines() : t;
          },
          update(e, i, o, r) {
            const s = this.selection.inlines();
              const n = [];
              const a = this;
            return (
              t.each(s, function(s, l) {
                if (t.isArray(e)) {
                  if (t.inArray(l.tagName.toLowerCase(), e) === -1) return;
                } else if (e !== "*" && l.tagName.toLowerCase() !== e) return;
                n.push(a.inline.setAttr(l, i, o, r));
              }),
              n
            );
          },
          replaceClass(e, i) {
            return t(this.inline.getInlines(i))
              .removeAttr("class")
              .addClass(e)[0];
          },
          toggleClass(e, i) {
            return t(this.inline.getInlines(i)).toggleClass(e)[0];
          },
          addClass(e, i) {
            return t(this.inline.getInlines(i)).addClass(e)[0];
          },
          removeClass(e, i) {
            return t(this.inline.getInlines(i)).removeClass(e)[0];
          },
          removeAllClass(e) {
            return t(this.inline.getInlines(e)).removeAttr("class")[0];
          },
          replaceAttr(e, i, o) {
            return (
              (e = this.inline.removeAttr(i, this.inline.getInlines(e))),
              t(e).attr(i, o)[0]
            );
          },
          toggleAttr(e, i, o) {
            o = this.inline.getInlines(o);
            const r = this;
              const s = [];
            return (
              t.each(o, function(o, n) {
                const a = t(n);
                a.attr(e)
                  ? s.push(r.inline.removeAttr(e, n))
                  : s.push(r.inline.addAttr(e, i, n));
              }),
              s
            );
          },
          addAttr(e, i, o) {
            return t(this.inline.getInlines(o)).attr(e, i)[0];
          },
          removeSpecificAttr(e, i, o) {
            if (i === "style") {
              const r = o.split(":");
                const s = r[0].trim();
              t(e).css(s, ""), this.utils.removeEmptyAttr(e, "style");
            } else t(e).removeAttr(i)[0];
          },
          removeAttr(e, i) {
            return t(this.inline.getInlines(i)).removeAttr(e)[0];
          },
          removeAllAttr(e) {
            e = this.inline.getInlines(e);
            const i = [];
            return (
              t.each(e, function(e, o) {
                typeof o.attributes === "undefined" && i.push(o);
                for (var r = t(o), s = o.attributes.length, n = 0; s > n; n++)
                  r.removeAttr(o.attributes[n].name);
                i.push(r[0]);
              }),
              i
            );
          },
          removeFormat() {
            document.execCommand("removeFormat");
          },
          removeStyleRule(e) {
            this.buffer.set();
            const i = this.selection.parent();
              const o = this.selection.inlines();
            if ((this.selection.save(), i && i.tagName === "SPAN")) {
              const r = t(i);
              r.css(e, ""),
                r.removeAttr("data-redactor-span"),
                this.utils.removeEmptyAttr(r, "style"),
                r[0].attributes.length === 0 && r.replaceWith(r.contents());
            }
            t.each(
              o,
              t.proxy(function(i, o) {
                const r = t(o);
                t.inArray(o.tagName.toLowerCase(), this.opts.inlineTags) ==
                  -1 ||
                  r.hasClass("redactor-selection-marker") ||
                  (r.css(e, ""),
                  this.utils.removeEmptyAttr(r, "style"),
                  r[0].attributes.length === 0 && r.replaceWith(r.contents()));
              }, this),
            ),
              this.selection.restore();
          },
        };
      },
      insert() {
        return {
          set(t) {
            this.placeholder.hide(),
              this.code.set(t),
              this.focus.end(),
              this.placeholder.enable();
          },
          html(e, i) {
            this.placeholder.hide(), this.core.editor().focus();
            const o = this.selection.block();
              const r = this.selection.inline();
            typeof i === "undefined" &&
              ((i = this.clean.getCurrentType(e, !0)),
              (e = this.clean.onPaste(e, i, !0))),
              (e = t.parseHTML(e));
            const s = this.selection.get();
              const n = this.selection.range(s);
            if ((n.deleteContents(), this.selection.update(s, n), i.lists)) {
              const a = t(e);
              if (
                a.length !== 0 &&
                (a[0].tagName === "UL" || a[0].tagName === "OL")
              )
                return void this.insert.appendLists(o, a);
            }
            if (i.blocks && o)
              if (this.utils.isSelectAll())
                this.core.editor().html(e), this.focus.end();
              else {
                const l = this.utils.breakBlockTag();
                if (l === !1) this.insert.placeHtml(e);
                else {
                  const c = t(e)
                    .children()
                    .last();
                  c.append(this.marker.get()),
                    l.type === "start" ? l.$block.before(e) : l.$block.after(e),
                    this.selection.restore(),
                    this.core
                      .editor()
                      .find("p")
                      .each(function() {
                        t.trim(this.innerHTML) === "" && t(this).remove();
                      });
                }
              }
            else {
              if (r) {
                const d = t("<div/>").html(e);
                d.find(r.tagName.toLowerCase()).each(function() {
                  t(this)
                    .contents()
                    .unwrap();
                }),
                  (e = d.html());
              }
              if (this.utils.isSelectAll()) {
                const h = t(this.opts.emptyHtml);
                this.core
                  .editor()
                  .html("")
                  .append(h),
                  h.html(e),
                  this.caret.end(h);
              } else this.insert.placeHtml(e);
            }
            this.utils.disableSelectAll(),
              this.linkify.format(),
              i.pre && this.clean.cleanPre();
          },
          text(e) {
            (e = e.toString()), (e = t.trim(e));
            const i = document.createElement("div");
            if (
              ((i.innerHTML = e),
              (e = i.textContent || i.innerText),
              typeof e !== "undefined")
            ) {
              this.placeholder.hide(), this.core.editor().focus();
              const o = this.selection.blocks();
              if (((e = e.replace(/\n/g, " ")), this.utils.isSelectAll())) {
                const r = t(this.opts.emptyHtml);
                this.core
                  .editor()
                  .html("")
                  .append(r),
                  r.html(e),
                  this.caret.end(r);
              } else {
                const s = this.selection.get();
                  const n = document.createTextNode(e);
                if (s.getRangeAt && s.rangeCount) {
                  const a = s.getRangeAt(0);
                  a.deleteContents(),
                    a.insertNode(n),
                    a.setStartAfter(n),
                    a.collapse(!0),
                    this.selection.update(s, a);
                }
                o.length > 1 && (t(n).wrap("<p>"), this.caret.after(n));
              }
              this.utils.disableSelectAll(),
                this.linkify.format(),
                this.clean.normalizeCurrentHeading();
            }
          },
          raw(t) {
            this.placeholder.hide(), this.core.editor().focus();
            const e = this.selection.get();
              let i = this.selection.range(e);
            i.deleteContents();
            const o = document.createElement("div");
            o.innerHTML = t;
            for (
              var r, s, n = document.createDocumentFragment();
              (r = o.firstChild);

            )
              s = n.appendChild(r);
            i.insertNode(n),
              s &&
                ((i = i.cloneRange()),
                i.setStartAfter(s),
                i.collapse(!0),
                e.removeAllRanges(),
                e.addRange(i));
          },
          node(e, i) {
            this.placeholder.hide(),
              typeof this.start !== "undefined" && this.core.editor().focus(),
              (e = e[0] || e);
            const o = this.selection.block();
              const r = this.utils.isBlockTag(e.tagName);
              let s = !0;
            if (this.utils.isSelectAll())
              r
                ? this.core.editor().html(e)
                : this.core.editor().html(t("<p>").html(e)),
                this.code.sync();
            else if (r && o) {
              const n = this.utils.breakBlockTag();
              n === !1
                ? this.insert.placeNode(e, i)
                : (n.type === "start" ? n.$block.before(e) : n.$block.after(e),
                  this.core
                    .editor()
                    .find("p:empty")
                    .remove());
            } else s = this.insert.placeNode(e, i);
            return this.utils.disableSelectAll(), s && this.caret.end(e), e;
          },
          appendLists(e, i) {
            let o;
              const r = t(e);
              const s = this.utils.isEmpty(e.innerHTML);
            if (s || this.utils.isEndOfElement(e))
              (o = r),
                i.find("li").each(function() {
                  o.after(this), (o = t(this));
                }),
                s && r.remove();
            else if (this.utils.isStartOfElement(e))
              i.find("li").each(function() {
                r.before(this), (o = t(this));
              });
            else {
              const n = this.selection.extractEndOfNode(e);
              r.after(t("<li>").append(n)), r.append(i), (o = i);
            }
            this.marker.remove(), o && this.caret.end(o), this.linkify.format();
          },
          placeHtml(e) {
            let i = document.createElement("span");
            (i.id = "redactor-insert-marker"),
              (i = this.insert.node(i)),
              t(i).before(e),
              this.selection.restore(),
              this.caret.after(i),
              t(i).remove();
          },
          placeNode(t, e) {
            const i = this.selection.get();
              const o = this.selection.range(i);
            return o == null
              ? !1
              : (e !== !1 && o.deleteContents(),
                o.insertNode(t),
                o.collapse(!1),
                void this.selection.update(i, o));
          },
          nodeToPoint(e, i) {
            if (
              (this.placeholder.hide(), (i = i[0] || i), this.utils.isEmpty())
            )
              return (
                (i = this.utils.isBlock(i) ? i : t("<p />").append(i)),
                this.core.editor().html(i),
                i
              );
            let o;
              const r = e.clientX;
              const s = e.clientY;
            if (document.caretPositionFromPoint) {
              const n = document.caretPositionFromPoint(r, s);
                const a = document.getSelection();
              (o = a.getRangeAt(0)),
                o.setStart(n.offsetNode, n.offset),
                o.collapse(!0),
                o.insertNode(i);
            } else if (document.caretRangeFromPoint)
              (o = document.caretRangeFromPoint(r, s)), o.insertNode(i);
            else if (typeof document.body.createTextRange !== "undefined") {
              (o = document.body.createTextRange()), o.moveToPoint(r, s);
              const l = o.duplicate();
              l.moveToPoint(r, s), o.setEndPoint("EndToEnd", l), o.select();
            }
            return i;
          },
          nodeToCaretPositionFromPoint(t, e) {
            this.insert.nodeToPoint(t, e);
          },
          marker() {
            this.marker.insert();
          },
        };
      },
      keydown() {
        return {
          init(e) {
            if (!this.rtePaste) {
              const i = e.which;
                const o = i >= 37 && i <= 40;
              (this.keydown.ctrl = e.ctrlKey || e.metaKey),
                (this.keydown.parent = this.selection.parent()),
                (this.keydown.current = this.selection.current()),
                (this.keydown.block = this.selection.block()),
                (this.keydown.pre = this.utils.isTag(
                  this.keydown.current,
                  "pre",
                )),
                (this.keydown.blockquote = this.utils.isTag(
                  this.keydown.current,
                  "blockquote",
                )),
                (this.keydown.figcaption = this.utils.isTag(
                  this.keydown.current,
                  "figcaption",
                )),
                (this.keydown.figure = this.utils.isTag(
                  this.keydown.current,
                  "figure",
                ));
              const r = this.core.callback("keydown", e);
              if (r === !1) return e.preventDefault(), !1;
              if (
                (this.shortcuts.init(e, i),
                this.keydown.checkEvents(o, i),
                this.keydown.setupBuffer(e, i),
                this.utils.isSelectAll() &&
                  (i === this.keyCode.ENTER ||
                    i === this.keyCode.BACKSPACE ||
                    i === this.keyCode.DELETE))
              )
                return (
                  e.preventDefault(), void this.code.set(this.opts.emptyHtml)
                );
              if (
                (this.keydown.addArrowsEvent(o),
                this.keydown.setupSelectAll(e, i),
                !this.opts.enterKey && i === this.keyCode.ENTER)
              ) {
                e.preventDefault();
                const s = this.selection.get();
                  const n = this.selection.range(s);
                return void (n.collapsed || n.deleteContents());
              }
              if (
                (this.opts.enterKey &&
                  i === this.keyCode.DOWN &&
                  this.keydown.onArrowDown(),
                this.opts.enterKey &&
                  i === this.keyCode.UP &&
                  this.keydown.onArrowUp(),
                (this.opts.type === "textarea" || this.opts.type === "div") &&
                  this.keydown.current &&
                  this.keydown.current.nodeType === 3 &&
                  t(this.keydown.parent).hasClass("redactor-in") &&
                  this.keydown.wrapToParagraph(),
                i === this.keyCode.SPACE && (e.ctrlKey || e.shiftKey))
              )
                return e.preventDefault(), this.keydown.onShiftSpace();
              if (i === this.keyCode.ENTER && (e.ctrlKey || e.shiftKey))
                return e.preventDefault(), this.keydown.onShiftEnter(e);
              if (
                i === this.keyCode.ENTER &&
                !e.shiftKey &&
                !e.ctrlKey &&
                !e.metaKey
              )
                return this.keydown.onEnter(e);
              if (
                i === this.keyCode.TAB ||
                (e.metaKey && i === 221) ||
                (e.metaKey && i === 219)
              )
                return this.keydown.onTab(e, i);
              if (i === this.keyCode.BACKSPACE || i === this.keyCode.DELETE) {
                if (
                  this.observe.image &&
                  typeof this.observe.image !== "undefined"
                ) {
                  e.preventDefault();
                  const a = this.observe.image.closest("figure, p").prev();
                  return (
                    this.image.remove(!1),
                    (this.observe.image = !1),
                    void (a && a.length !== 0
                      ? this.caret.end(a)
                      : this.core.editor().focus())
                  );
                }
                this.keydown.onBackspaceAndDeleteBefore();
              }
              if (i === this.keyCode.DELETE) {
                const l = t(this.keydown.block).next();
                if (
                  this.utils.isEndOfElement(this.keydown.block) &&
                  l.length !== 0 &&
                  l[0].tagName === "FIGURE"
                )
                  return l.remove(), !1;
                const c =
                  this.keydown.block && this.keydown.block.tagName === "LI"
                    ? this.keydown.block
                    : !1;
                if (c) {
                  const d = t(this.keydown.block)
                      .parents("ul, ol")
                      .last();
                    const h = d.next();
                  if (
                    this.utils.isRedactorParent(d) &&
                    this.utils.isEndOfElement(d) &&
                    h.length !== 0 &&
                    (h[0].tagName === "UL" || h[0].tagName === "OL")
                  )
                    return (
                      e.preventDefault(), d.append(h.contents()), h.remove(), !1
                    );
                }
                if (
                  this.utils.isEndOfElement(this.keydown.block) &&
                  l.length !== 0 &&
                  l[0].tagName === "PRE"
                )
                  return t(this.keydown.block).append(l.text()), l.remove(), !1;
              }
              if (
                (i === this.keyCode.DELETE &&
                  t("#redactor-image-box").length !== 0 &&
                  this.image.remove(),
                i === this.keyCode.BACKSPACE)
              ) {
                if (
                  (this.detect.isFirefox() && this.line.removeOnBackspace(e),
                  this.list.combineAfterAndBefore(this.keydown.block))
                )
                  return void e.preventDefault();
                const u = this.selection.block();
                if (
                  u &&
                  u.tagName === "LI" &&
                  this.utils.isCollapsed() &&
                  this.utils.isStartOfElement()
                )
                  return this.indent.decrease(), void e.preventDefault();
                this.keydown.removeInvisibleSpace(),
                  this.keydown.removeEmptyListInTable(e);
              }
              (i !== this.keyCode.BACKSPACE && i !== this.keyCode.DELETE) ||
                this.keydown.onBackspaceAndDeleteAfter(e);
            }
          },
          onShiftSpace() {
            return this.buffer.set(), this.insert.raw("&nbsp;"), !1;
          },
          onShiftEnter(t) {
            return (
              this.buffer.set(),
              this.keydown.pre
                ? this.keydown.insertNewLine(t)
                : this.insert.raw("<br>")
            );
          },
          onBackspaceAndDeleteBefore() {
            this.utils.saveScroll();
          },
          onBackspaceAndDeleteAfter(e) {
            setTimeout(
              t.proxy(function() {
                (this.code.syncFire = !1),
                  this.keydown.removeEmptyLists(),
                  this.core
                    .editor()
                    .find("*[style]")
                    .not(
                      "img, #redactor-image-box, #redactor-image-editter, [data-redactor-span]",
                    )
                    .removeAttr("style"),
                  this.keydown.formatEmpty(e),
                  (this.code.syncFire = !0);
              }, this),
              1,
            );
          },
          onEnter(e) {
            const i = this.core.callback("enter", e);
            if (i === !1) return e.preventDefault(), !1;
            if (
              this.keydown.blockquote &&
              this.keydown.exitFromBlockquote(e) === !0
            )
              return !1;
            if (this.keydown.pre) return this.keydown.insertNewLine(e);
            if (this.keydown.blockquote || this.keydown.figcaption)
              return this.keydown.insertBreakLine(e);
            if (this.keydown.figure)
              setTimeout(
                t.proxy(function() {
                  this.keydown.replaceToParagraph("FIGURE");
                }, this),
                1,
              );
            else if (this.keydown.block) {
              if (
                (setTimeout(
                  t.proxy(function() {
                    this.keydown.replaceToParagraph("DIV");
                  }, this),
                  1,
                ),
                this.keydown.block.tagName === "LI")
              ) {
                const o = this.selection.current();
                  const r = t(o).closest("li", this.$editor[0]);
                  const s = r.parents("ul,ol", this.$editor[0]).last();
                if (
                  r.length !== 0 &&
                  this.utils.isEmpty(r.html()) &&
                  s.next().length === 0 &&
                  this.utils.isEmpty(
                    s
                      .find("li")
                      .last()
                      .html(),
                  )
                ) {
                  s.find("li")
                    .last()
                    .remove();
                  const n = t(this.opts.emptyHtml);
                  return s.after(n), this.caret.start(n), !1;
                }
              }
            } else if (!this.keydown.block)
              return this.keydown.insertParagraph(e);
            return this.detect.isFirefox() &&
              this.utils.isInline(this.keydown.parent)
              ? void this.keydown.insertBreakLine(e)
              : void setTimeout(
                  t.proxy(function() {
                    const e = this.selection.inline();
                    if (e && this.utils.isEmpty(e.innerHTML)) {
                      const i = this.selection.block();
                      t(e).remove();
                      const o = document.createRange();
                      o.setStart(i, 0);
                      const r = document.createTextNode("​");
                      o.insertNode(r), o.setStartAfter(r), o.collapse(!0);
                      const s = window.getSelection();
                      s.removeAllRanges(), s.addRange(o);
                    }
                  }, this),
                  1,
                );
          },
          checkEvents(t, e) {
            t ||
              (this.core.getEvent() !== "click" &&
                this.core.getEvent() !== "arrow") ||
              (this.core.addEvent(!1),
              this.keydown.checkKeyEvents(e) && this.buffer.set());
          },
          checkKeyEvents(e) {
            const i = this.keyCode;
              const o = [
                i.BACKSPACE,
                i.DELETE,
                i.ENTER,
                i.ESC,
                i.TAB,
                i.CTRL,
                i.META,
                i.ALT,
                i.SHIFT,
              ];
            return t.inArray(e, o) === -1;
          },
          addArrowsEvent(t) {
            return t
              ? this.core.getEvent() === "click" ||
                this.core.getEvent() === "arrow"
                ? void this.core.addEvent(!1)
                : void this.core.addEvent("arrow")
              : void 0;
          },
          setupBuffer(t, e) {
            return this.keydown.ctrl &&
              e === 90 &&
              !t.shiftKey &&
              !t.altKey &&
              this.opts.buffer.length
              ? (t.preventDefault(), void this.buffer.undo())
              : this.keydown.ctrl &&
                e === 90 &&
                t.shiftKey &&
                !t.altKey &&
                this.opts.rebuffer.length !== 0
              ? (t.preventDefault(), void this.buffer.redo())
              : void (
                  this.keydown.ctrl ||
                  (e !== this.keyCode.SPACE &&
                    e !== this.keyCode.BACKSPACE &&
                    e !== this.keyCode.DELETE &&
                    (e !== this.keyCode.ENTER || t.ctrlKey || t.shiftKey)) ||
                  this.buffer.set()
                );
          },
          exitFromBlockquote(e) {
            if (this.utils.isEndOfElement(this.keydown.blockquote)) {
              const i = this.clean.removeSpacesHard(
                t(this.keydown.blockquote).html(),
              );
              if (i.search(/(<br\s?\/?>){3}$/i) !== -1) {
                e.preventDefault();
                const o = t(this.keydown.blockquote)
                  .children()
                  .last()
                  .prev();
                o
                  .prev()
                  .filter("br")
                  .remove(),
                  o.filter("br").remove(),
                  t(this.keydown.blockquote)
                    .children()
                    .last()
                    .filter("br")
                    .remove(),
                  t(this.keydown.blockquote)
                    .children()
                    .last()
                    .filter("span")
                    .remove();
                const r = t(this.opts.emptyHtml);
                return (
                  t(this.keydown.blockquote).after(r), this.caret.start(r), !0
                );
              }
            }
          },
          onArrowDown() {
            for (
              let t = [
                  this.keydown.blockquote,
                  this.keydown.pre,
                  this.keydown.figcaption,
                ],
                e = 0;
              e < t.length;
              e++
            )
              if (t[e]) return this.keydown.insertAfterLastElement(t[e]), !1;
          },
          onArrowUp() {
            for (
              let t = [
                  this.keydown.blockquote,
                  this.keydown.pre,
                  this.keydown.figcaption,
                ],
                e = 0;
              e < t.length;
              e++
            )
              if (t[e]) return this.keydown.insertBeforeFirstElement(t[e]), !1;
          },
          insertAfterLastElement(e) {
            if (this.utils.isEndOfElement(e)) {
              const i = this.core
                  .editor()
                  .contents()
                  .last();
                const o =
                  e.tagName === "FIGCAPTION"
                    ? t(this.keydown.block)
                        .parent()
                        .next()
                    : t(this.keydown.block).next();
              if (o.length === 0) {
                if (i.length === 0 && i[0] !== e)
                  return void this.caret.start(i);
                const r = t(this.opts.emptyHtml);
                e.tagName === "FIGCAPTION"
                  ? t(e)
                      .parent()
                      .after(r)
                  : t(e).after(r),
                  this.caret.start(r);
              }
            }
          },
          insertBeforeFirstElement(e) {
            if (
              this.utils.isStartOfElement() &&
              !(
                this.core.editor().contents().length > 1 &&
                this.core
                  .editor()
                  .contents()
                  .first()[0] !== e
              )
            ) {
              const i = t(this.opts.emptyHtml);
              t(e).before(i), this.caret.start(i);
            }
          },
          onTab(t, e) {
            if (!this.opts.tabKey) return !0;
            const i = this.keydown.block && this.keydown.block.tagName === "LI";
            if (
              this.utils.isEmpty(this.code.get()) ||
              (!i && !this.keydown.pre && this.opts.tabAsSpaces === !1)
            )
              return !0;
            t.preventDefault(), this.buffer.set();
            let o;
              const r = i && this.utils.isStartOfElement(this.keydown.block);
            return (
              this.keydown.pre && !t.shiftKey
                ? ((o = this.opts.preSpaces
                    ? document.createTextNode(
                        Array(this.opts.preSpaces + 1).join(" "),
                      )
                    : document.createTextNode("	")),
                  this.insert.node(o))
                : this.opts.tabAsSpaces === !1 || r
                ? t.metaKey && e === 219
                  ? this.indent.decrease()
                  : t.metaKey && e === 221
                  ? this.indent.increase()
                  : t.shiftKey
                  ? this.indent.decrease()
                  : this.indent.increase()
                : ((o = document.createTextNode(
                    Array(this.opts.tabAsSpaces + 1).join(" "),
                  )),
                  this.insert.node(o)),
              !1
            );
          },
          setupSelectAll(t, e) {
            this.keydown.ctrl && e === 65
              ? this.utils.enableSelectAll()
              : e === this.keyCode.LEFT_WIN ||
                this.keydown.ctrl ||
                this.utils.disableSelectAll();
          },
          insertNewLine(t) {
            t.preventDefault();
            const e = document.createTextNode("\n");
              const i = this.selection.get();
              const o = this.selection.range(i);
            return o.deleteContents(), o.insertNode(e), this.caret.after(e), !1;
          },
          insertParagraph(t) {
            t.preventDefault();
            const e = document.createElement("p");
            e.innerHTML = this.opts.invisibleSpace;
            const i = this.selection.get();
              const o = this.selection.range(i);
            return o.deleteContents(), o.insertNode(e), this.caret.start(e), !1;
          },
          insertBreakLine(t) {
            return this.keydown.insertBreakLineProcessing(t);
          },
          insertDblBreakLine(t) {
            return this.keydown.insertBreakLineProcessing(t, !0);
          },
          insertBreakLineProcessing(t, e) {
            t.stopPropagation();
            const i = document.createElement("br");
            if ((this.insert.node(i), e === !0)) {
              const o = document.createElement("br");
              this.insert.node(o);
            }
            return !1;
          },
          wrapToParagraph() {
            const e = t(this.keydown.current);
              const i = t("<p>").append(e.clone());
            e.replaceWith(i);
            const o = t(i).next();
            typeof o[0] !== "undefined" && o[0].tagName === "BR" && o.remove(),
              this.caret.end(i);
          },
          replaceToParagraph(e) {
            const i = this.selection.block();
              const o = t(i).prev();
              const r = i.innerHTML.replace(/<br\s?\/?>/gi, "");
            if (
              i.tagName === e &&
              this.utils.isEmpty(r) &&
              !t(i).hasClass("redactor-in")
            ) {
              var s = document.createElement("p");
              return (
                t(i).replaceWith(s), this.keydown.setCaretToParagraph(s), !1
              );
            }
            if (i.tagName === "P")
              return (
                t(i)
                  .removeAttr("class")
                  .removeAttr("style"),
                this.detect.isIe() &&
                  this.utils.isEmpty(r) &&
                  this.utils.isInline(this.keydown.parent) &&
                  t(i).on(
                    "input",
                    t.proxy(function() {
                      const e = this.selection.parent();
                      if (this.utils.isInline(e)) {
                        const o = t(e).html();
                        t(i).html(o), this.caret.end(i);
                      }
                      t(i).off("keyup");
                    }, this),
                  ),
                !1
              );
            if (o.hasClass(this.opts.videoContainerClass)) {
              o.removeAttr("class");
              var s = document.createElement("p");
              return o.replaceWith(s), this.keydown.setCaretToParagraph(s), !1;
            }
          },
          setCaretToParagraph(t) {
            const e = document.createRange();
            e.setStart(t, 0);
            const i = document.createTextNode("​");
            e.insertNode(i), e.setStartAfter(i), e.collapse(!0);
            const o = window.getSelection();
            o.removeAllRanges(), o.addRange(e);
          },
          removeInvisibleSpace() {
            const e = t(this.keydown.current);
            e.text().search(/^\u200B$/g) === 0 && e.remove();
          },
          removeEmptyListInTable(e) {
            const i = t(this.keydown.current);
              const o = t(this.keydown.parent);
              const r = i.closest("td", this.$editor[0]);
            if (
              r.length !== 0 &&
              i.closest("li", this.$editor[0]) &&
              o.children("li").length === 1
            ) {
              if (!this.utils.isEmpty(i.text())) return;
              e.preventDefault(), i.remove(), o.remove(), this.caret.start(r);
            }
          },
          removeEmptyLists() {
            const e = function() {
              const e = t.trim(this.innerHTML).replace(/\/t\/n/g, "");
              e === "" && t(this).remove();
            };
            this.core
              .editor()
              .find("li")
              .each(e),
              this.core
                .editor()
                .find("ul, ol")
                .each(e);
          },
          formatEmpty(e) {
            const i = t.trim(this.core.editor().html());
            if (this.utils.isEmpty(i))
              return (
                e.preventDefault(),
                this.opts.type === "inline" || this.opts.type === "pre"
                  ? (this.core.editor().html(this.marker.html()),
                    this.selection.restore())
                  : (this.core.editor().html(this.opts.emptyHtml),
                    this.focus.start()),
                !1
              );
          },
        };
      },
      keyup() {
        return {
          init(e) {
            if (!this.rtePaste) {
              const i = e.which;
              (this.keyup.block = this.selection.block()),
                (this.keyup.current = this.selection.current()),
                (this.keyup.parent = this.selection.parent());
              const o = this.core.callback("keyup", e);
              if (o === !1) return e.preventDefault(), !1;
              if (
                i === this.keyCode.ENTER &&
                this.keyup.block &&
                this.keyup.block.tagName === "FIGURE"
              ) {
                const r = t(this.keyup.block).prev();
                if (r.length !== 0 && r[0].tagName === "FIGURE") {
                  const s = this.utils.replaceToTag(r, "p");
                  return void this.caret.start(s);
                }
              }
              if (i === this.keyCode.BACKSPACE || i === this.keyCode.DELETE) {
                if (this.utils.isSelectAll()) return void this.focus.start();
                if (
                  this.keyup.block &&
                  this.keydown.block &&
                  this.keyup.block.tagName === "FIGURE" &&
                  this.utils.isStartOfElement(this.keydown.block)
                ) {
                  e.preventDefault(),
                    this.selection.save(),
                    t(this.keyup.block)
                      .find("figcaption")
                      .remove(),
                    t(this.keyup.block)
                      .find("img")
                      .first()
                      .remove(),
                    this.utils.replaceToTag(this.keyup.block, "p");
                  const n = this.marker.find();
                  return (
                    t("html, body").animate(
                      { scrollTop: n.position().top + 20 },
                      500,
                    ),
                    void this.selection.restore()
                  );
                }
                if (this.keyup.block && this.keyup.block.tagName === "P") {
                  const a = t(this.keyup.block).find("img").length;
                    const l = t(this.keyup.block)
                      .text()
                      .replace(/\u200B/g, "");
                  l === "" &&
                    a !== 0 &&
                    this.utils.replaceToTag(this.keyup.block, "figure");
                }
                this.keyup.block &&
                  this.keyup.block.tagName === "FIGURE" &&
                  t(this.keyup.block).find("img").length === 0 &&
                  (this.selection.save(),
                  this.utils.replaceToTag(this.keyup.block, "p"),
                  this.selection.restore());
              }
              this.linkify.isKey(i) && this.linkify.format();
            }
          },
        };
      },
      lang() {
        return {
          load() {
            this.opts.curLang = this.opts.langs[this.opts.lang];
          },
          get(t) {
            return typeof this.opts.curLang[t] !== "undefined"
              ? this.opts.curLang[t]
              : "";
          },
        };
      },
      line() {
        return {
          insert() {
            this.buffer.set(), this.insert.html(this.line.getLineHtml());
            const t = this.core.editor().find("#redactor-hr-tmp-id");
            return t.removeAttr("id"), this.core.callback("insertedLine", t), t;
          },
          getLineHtml() {
            let t = '<hr id="redactor-hr-tmp-id" />';
            return (
              !this.detect.isFirefox() &&
                this.utils.isEmpty() &&
                (t += `<p>${  this.opts.emptyHtml  }</p>`),
              t
            );
          },
          removeOnBackspace(e) {
            if (this.utils.isCollapsed()) {
              const i = t(this.selection.block());
              if (i.length !== 0 && this.utils.isStartOfElement(i)) {
                const o = i.prev();
                o &&
                  o.length !== 0 &&
                  o[0].tagName === "HR" &&
                  (e.preventDefault(), o.remove());
              }
            }
          },
        };
      },
      link() {
        return {
          get() {
            return t(this.selection.inlines("a"));
          },
          is() {
            const e = this.selection.nodes();
              const i = t(this.selection.current()).closest(
                "a",
                this.core.editor()[0],
              );
            return i.length === 0 || e.length > 1 ? !1 : i;
          },
          unlink(t) {
            typeof t !== "undefined" && t.preventDefault && t.preventDefault(),
              this.buffer.set();
            const e = this.selection.inlines("a");
            if (e.length !== 0) {
              const i = this.link.replaceLinksToText(e);
              this.observe.closeAllTooltip(),
                this.core.callback("deletedLink", i);
            }
          },
          insert(e, i) {
            let o = this.link.is();
            if (
              i !== !0 &&
              ((e = this.link.buildLinkFromObject(o, e)), e === !1)
            )
              return !1;
            if (
              (this.buffer.set(),
              (e = this.core.callback("beforeInsertingLink", e)),
              o === !1)
            ) {
              (o = t("<a />")),
                (o = this.link.update(o, e)),
                (o = t(this.insert.node(o)));
              const r = o.parent();
              this.utils.isRedactorParent(r) === !1 && o.wrap("<p>"),
                r.hasClass("redactor-unlink") &&
                  r.replaceWith(function() {
                    return t(this).contents();
                  }),
                this.caret.after(o),
                this.core.callback("insertedLink", o);
            } else (o = this.link.update(o, e)), this.caret.after(o);
          },
          update(t, e) {
            return (
              t.text(e.text),
              t.attr("href", e.url),
              this.link.target(t, e.target),
              t
            );
          },
          target(t, e) {
            return e ? t.attr("target", "_blank") : t.removeAttr("target");
          },
          show(e) {
            typeof e !== "undefined" && e.preventDefault && e.preventDefault(),
              this.observe.closeAllTooltip();
            const i = this.link.is();
            this.link.buildModal(i);
            const o = this.link.buildLinkFromElement(i);
            (o.url = this.link.removeSelfHostFromUrl(o.url)),
              this.opts.linkNewTab && !i && (o.target = !0),
              this.link.setModalValues(o),
              this.modal.show(),
              this.detect.isDesktop() && t("#redactor-link-url").focus();
          },
          setModalValues(e) {
            t("#redactor-link-blank").prop("checked", e.target),
              t("#redactor-link-url").val(e.url),
              t("#redactor-link-url-text").val(e.text);
          },
          buildModal(e) {
            this.modal.load(
              "link",
              this.lang.get(e === !1 ? "link-insert" : "link-edit"),
              600,
            );
            const i = this.modal.getActionButton();
            i.text(this.lang.get(e === !1 ? "insert" : "save")).on(
              "click",
              t.proxy(this.link.callback, this),
            );
          },
          callback() {
            const t = this.link.buildLinkFromModal();
            return t === !1
              ? !1
              : (this.modal.close(), void this.link.insert(t, !0));
          },
          cleanUrl(e) {
            return typeof e === "undefined"
              ? ""
              : t.trim(e.replace(/[^\W\w\D\d+&\'@#\/%?=~_|!:,.;\(\)]/gi, ""));
          },
          cleanText(e) {
            return typeof e === "undefined"
              ? ""
              : t.trim(e.replace(/(<([^>]+)>)/gi, ""));
          },
          getText(t) {
            return t.text === "" && t.url !== ""
              ? this.link.truncateUrl(t.url.replace(/<|>/g, ""))
              : t.text;
          },
          isUrl(t) {
            const e =
                "((xn--)?[\\W\\w\\D\\d]+(-[\\W\\w\\D\\d]+)*\\.)+[\\W\\w]{2,}";
              const i = new RegExp(`^(http|ftp|https)://${  e}`, "i");
              const o = new RegExp(`^${  e}`, "i");
              const r = new RegExp(".(html|php)$", "i");
              const s = new RegExp("^/", "i");
              const n = new RegExp("^tel:(.*?)", "i");
            return (
              t.search(i) === -1 &&
                t.search(o) !== -1 &&
                t.search(r) === -1 &&
                t.substring(0, 1) !== "/" &&
                (t = `http://${  t}`),
              t.search(i) !== -1 ||
              t.search(r) !== -1 ||
              t.search(s) !== -1 ||
              t.search(n) !== -1
                ? t
                : !1
            );
          },
          isMailto(t) {
            return (
              t.search("@") !== -1 && /(http|ftp|https):\/\//i.test(t) === !1
            );
          },
          isEmpty(t) {
            return t.url === "" || (t.text === "" && t.url === "");
          },
          truncateUrl(t) {
            return t.length > this.opts.linkSize
              ? `${t.substring(0, this.opts.linkSize)  }...`
              : t;
          },
          parse(t) {
            return (
              this.link.isMailto(t.url)
                ? (t.url = `mailto:${  t.url.replace("mailto:", "")}`)
                : t.url.search("#") !== 0 && (t.url = this.link.isUrl(t.url)),
              this.link.isEmpty(t) || t.url === !1 ? !1 : t
            );
          },
          buildLinkFromModal() {
            const e = {};
            return (
              (e.url = this.link.cleanUrl(t("#redactor-link-url").val())),
              (e.text = this.link.cleanText(
                t("#redactor-link-url-text").val(),
              )),
              (e.text = this.link.getText(e)),
              (e.target = !!t("#redactor-link-blank").prop("checked")),
              this.link.parse(e)
            );
          },
          buildLinkFromObject(t, e) {
            return (
              (e.url = this.link.cleanUrl(e.url)),
              (e.text =
                typeof e.text === "undefined" && this.selection.is()
                  ? this.selection.text()
                  : this.link.cleanText(e.text)),
              (e.text = this.link.getText(e)),
              (e.target = t === !1 ? e.target : this.link.buildTarget(t)),
              this.link.parse(e)
            );
          },
          buildLinkFromElement(t) {
            const e = {
              url: "",
              text: this.selection.is() ? this.selection.text() : "",
              target: !1,
            };
            return (
              t !== !1 &&
                ((e.url = t.attr("href")),
                (e.text = t.text()),
                (e.target = this.link.buildTarget(t))),
              e
            );
          },
          buildTarget(t) {
            return (
              typeof t.attr("target") !== "undefined" &&
              t.attr("target") === "_blank"
            );
          },
          removeSelfHostFromUrl(t) {
            const e = self.location.href.replace("#", "").replace(/\/$/i, "");
            return t
              .replace(/^\/\#/, "#")
              .replace(e, "")
              .replace("mailto:", "");
          },
          replaceLinksToText(e) {
            let i;
              const o = t.each(e, function(e, o) {
                const r = t(o);
                  const s = t('<span class="redactor-unlink" />').append(
                    r.contents(),
                  );
                return r.replaceWith(s), e === 0 && (i = s), r;
              });
            return (
              e.length === 1 &&
                this.selection.isCollapsed() &&
                this.caret.after(i),
              o
            );
          },
        };
      },
      linkify() {
        return {
          isKey(t) {
            return t === this.keyCode.ENTER || t === this.keyCode.SPACE;
          },
          isLink(t) {
            return (
              t.nodeValue.match(this.opts.regexps.linkyoutube) ||
              t.nodeValue.match(this.opts.regexps.linkvimeo) ||
              t.nodeValue.match(this.opts.regexps.linkimage) ||
              t.nodeValue.match(this.opts.regexps.url)
            );
          },
          isFiltered(e, i) {
            return (
              i.nodeType === 3 &&
              t.trim(i.nodeValue) !== "" &&
              !t(i)
                .parent()
                .is("pre") &&
              this.linkify.isLink(i)
            );
          },
          handler(e, i) {
            const o = t(i);
              const r = o.text();
              let s = r;
            (s =
              s.match(this.opts.regexps.linkyoutube) ||
              s.match(this.opts.regexps.linkvimeo)
                ? this.linkify.convertVideoLinks(s)
                : s.match(this.opts.regexps.linkimage)
                ? this.linkify.convertImages(s)
                : this.linkify.convertLinks(s)),
              o.before(r.replace(r, s)).remove();
          },
          format() {
            if (this.opts.linkify && !this.utils.isCurrentOrParent("pre")) {
              this.core
                .editor()
                .find(":not(iframe,img,a,pre,code,.redactor-unlink)")
                .addBack()
                .contents()
                .filter(t.proxy(this.linkify.isFiltered, this))
                .each(t.proxy(this.linkify.handler, this));
              const e = this.core
                .editor()
                .find(".redactor-linkify-object")
                .each(
                  t.proxy(function(e, i) {
                    const o = t(i);
                    return (
                      o.removeClass("redactor-linkify-object"),
                      o.attr("class") === "" && o.removeAttr("class"),
                      i.tagName === "DIV"
                        ? this.linkify.breakBlockTag(o, "video")
                        : i.tagName === "IMG"
                        ? this.linkify.breakBlockTag(o, "image")
                        : i.tagName === "A" &&
                          this.core.callback("insertedLink", o),
                      o
                    );
                  }, this),
                );
              setTimeout(
                t.proxy(function() {
                  this.code.sync(), this.core.callback("linkify", e);
                }, this),
                100,
              );
            }
          },
          breakBlockTag(e, i) {
            const o = this.utils.breakBlockTag();
            if (o !== !1) {
              let r = e;
              i === "image" && (r = t("<figure />").append(e)),
                o.type === "start" ? o.$block.before(r) : o.$block.after(r),
                i === "image" && this.caret.after(r);
            }
          },
          convertVideoLinks(t) {
            const e =
                `<div class="${ 
                this.opts.videoContainerClass 
                } redactor-linkify-object"><iframe class="redactor-linkify-object" width="500" height="281" src="`;
              const i = '" frameborder="0" allowfullscreen></iframe></div>';
            return (
              t.match(this.opts.regexps.linkyoutube) &&
                (t = t.replace(
                  this.opts.regexps.linkyoutube,
                  `${e  }//www.youtube.com/embed/$1${  i}`,
                )),
              t.match(this.opts.regexps.linkvimeo) &&
                (t = t.replace(
                  this.opts.regexps.linkvimeo,
                  `${e  }//player.vimeo.com/video/$2${  i}`,
                )),
              t
            );
          },
          convertImages(t) {
            const e = t.match(this.opts.regexps.linkimage);
            return e
              ? t.replace(
                  t,
                  `<img src="${  e  }" class="redactor-linkify-object" />`,
                )
              : t;
          },
          convertLinks(e) {
            let i = e.match(this.opts.regexps.url);
            if (!i) return e;
            i = t.grep(i, function(e, o) {
              return t.inArray(e, i) === o;
            });
            for (let o = i.length, r = 0; o > r; r++) {
              const s = i[r];
                let n = s;
                const a = s.match(/(https?|ftp):\/\//i) !== null ? "" : "http://";
              n.length > this.opts.linkSize &&
                (n = `${n.substring(0, this.opts.linkSize)  }...`),
                n.search("%") === -1 && (n = decodeURIComponent(n));
              let l = "\\b";
              t.inArray(s.slice(-1), ["/", "&", "="]) !== -1 && (l = "");
              const c = new RegExp(
                `(${ 
                  s.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&") 
                  }${l 
                  })`,
                "g",
              );
              e = e.replace(
                c,
                `<a href="${ 
                  a 
                  }${t.trim(s) 
                  }" class="redactor-linkify-object">${ 
                  t.trim(n) 
                  }</a>`,
              );
            }
            return e;
          },
        };
      },
      list() {
        return {
          toggle(e) {
            if (!this.utils.inBlocks(["table", "td", "th", "tr"])) {
              const i = e === "orderedlist" || e === "ol" ? "OL" : "UL";
              e = i === "OL" ? "orderedlist" : "unorderedlist";
              const o = t(this.selection.current())
                .parentsUntil(".redactor-in", "ul, ol")
                .first();
              if (
                (this.placeholder.hide(),
                this.buffer.set(),
                o.length !== 0 &&
                  o[0].tagName === i &&
                  this.utils.isRedactorParent(o))
              )
                return (
                  this.selection.save(),
                  o.find("ul, ol").each(function() {
                    const e = t(this).closest("li");
                    t(this)
                      .find("li")
                      .each(function() {
                        t(e).after(this);
                      });
                  }),
                  o.find("ul, ol").remove(),
                  o.find("li").each(function() {
                    return t(this).replaceWith(function() {
                      return t("<p />").append(t(this).contents());
                    });
                  }),
                  o.replaceWith(function() {
                    return t(this).contents();
                  }),
                  void this.selection.restore()
                );
              this.selection.save(),
                o.length !== 0 && o[0].tagName !== i
                  ? o.each(
                      t.proxy(function(t, e) {
                        this.utils.replaceToTag(e, i);
                      }, this),
                    )
                  : document.execCommand(`insert${  e}`),
                this.selection.restore();
              const r = this.list.get();
              if (!r)
                return void (
                  this.selection.block() ||
                  document.execCommand("formatblock", !1, "p")
                );
              r.find("span").replaceWith(function() {
                return t(this).contents();
              }),
                r.find(this.opts.inlineTags.join(",")).each(function() {
                  t(this).removeAttr("style");
                });
              const s = r.parent();
              this.utils.isRedactorParent(s) &&
                s[0].tagName !== "LI" &&
                this.utils.isBlock(s) &&
                (this.selection.save(),
                s.replaceWith(s.contents()),
                this.selection.restore());
            }
          },
          get() {
            const e = this.selection.current();
              const i = t(e).closest("ul, ol", this.core.editor()[0]);
            return i.length === 0 ? !1 : i;
          },
          combineAfterAndBefore(e) {
            const i = t(e).prev();
              const o = t(e).next();
              const r =
                e &&
                e.tagName === "P" &&
                (e.innerHTML === "<br>" || e.innerHTML === "");
              const s =
                i.closest("ol, ul", this.core.editor()[0]).length === 1 &&
                o.closest("ol, ul", this.core.editor()[0]).length === 1;
            return r && s
              ? (i
                  .children("li")
                  .last()
                  .append(this.marker.get()),
                i.append(o.contents()),
                this.selection.restore(),
                !0)
              : !1;
          },
        };
      },
      marker() {
        return {
          get(t) {
            t = typeof t === "undefined" ? 1 : t;
            const e = document.createElement("span");
            return (
              (e.id = `selection-marker-${  t}`),
              (e.className = "redactor-selection-marker"),
              (e.innerHTML = this.opts.invisibleSpace),
              e
            );
          },
          html(t) {
            return this.utils.getOuterHtml(this.marker.get(t));
          },
          find(t) {
            return (
              (t = typeof t === "undefined" ? 1 : t),
              this.core.editor().find(`span#selection-marker-${  t}`)
            );
          },
          insert() {
            const t = this.selection.get();
              const e = this.selection.range(t);
            this.marker.insertNode(e, this.marker.get(1), !0),
              e &&
                e.collapsed === !1 &&
                this.marker.insertNode(e, this.marker.get(2), !1);
          },
          remove() {
            this.core
              .editor()
              .find(".redactor-selection-marker")
              .each(this.marker.iterateRemove);
          },
          insertNode(e, i, o) {
            const r = this.selection.parent();
            if (e !== null && t(r).closest(".redactor-in").length !== 0) {
              e = e.cloneRange();
              try {
                e.collapse(o), e.insertNode(i);
              } catch (s) {
                this.focus.start();
              }
            }
          },
          iterateRemove(e, i) {
            const o = t(i);
              const r = o.text().replace(/\u200B/g, "");
            return r === ""
              ? o.remove()
              : o.replaceWith(function() {
                  return t(this).contents();
                });
          },
        };
      },
      modal() {
        return {
          callbacks: {},
          templates() {
            (this.opts.modal = {
              "image-edit":
                `${String() 
                }<div class="redactor-modal-tab redactor-group" data-title="General"><div id="redactor-image-preview" class="redactor-modal-tab-side"></div><div class="redactor-modal-tab-area"><section><label>${ 
                this.lang.get("title") 
                }</label><input type="text" id="redactor-image-title" /></section><section><label>${ 
                this.lang.get("caption") 
                }</label><input type="text" id="redactor-image-caption" aria-label="${ 
                this.lang.get("caption") 
                }" /></section><section><label>${ 
                this.lang.get("link") 
                }</label><input type="text" id="redactor-image-link" aria-label="${ 
                this.lang.get("link") 
                }" /></section><section><label class="redactor-image-position-option">${ 
                this.lang.get("image-position") 
                }</label><select class="redactor-image-position-option" id="redactor-image-align" aria-label="${ 
                this.lang.get("image-position") 
                }"><option value="none">${ 
                this.lang.get("none") 
                }</option><option value="left">${ 
                this.lang.get("left") 
                }</option><option value="center">${ 
                this.lang.get("center") 
                }</option><option value="right">${ 
                this.lang.get("right") 
                }</option></select></section><section><label class="checkbox"><input type="checkbox" id="redactor-image-link-blank" aria-label="${ 
                this.lang.get("link-in-new-tab") 
                }"> ${ 
                this.lang.get("link-in-new-tab") 
                }</label></section><section><button id="redactor-modal-button-action">${ 
                this.lang.get("insert") 
                }</button><button id="redactor-modal-button-cancel">${ 
                this.lang.get("cancel") 
                }</button><button id="redactor-modal-button-delete" class="redactor-modal-button-offset">${ 
                this.lang.get("delete") 
                }</button></section></div></div>`,
              image:
                `${String() 
                }<div class="redactor-modal-tab" data-title="Upload"><section><div id="redactor-modal-image-droparea"></div></section></div>`,
              file:
                `${String() 
                }<div class="redactor-modal-tab" data-title="Upload"><section><label>${ 
                this.lang.get("filename") 
                } <span class="desc">(${ 
                this.lang.get("optional") 
                })</span></label><input type="text" id="redactor-filename" aria-label="${ 
                this.lang.get("filename") 
                }" /><br><br></section><section><div id="redactor-modal-file-upload"></div></section></div>`,
              link:
                `${String() 
                }<div class="redactor-modal-tab" data-title="General"><section><label>URL</label><input type="url" id="redactor-link-url" aria-label="URL" /></section><section><label>${ 
                this.lang.get("text") 
                }</label><input type="text" id="redactor-link-url-text" aria-label="${ 
                this.lang.get("text") 
                }" /></section><section><label class="checkbox"><input type="checkbox" id="redactor-link-blank"> ${ 
                this.lang.get("link-in-new-tab") 
                }</label></section><section><button id="redactor-modal-button-action">${ 
                this.lang.get("insert") 
                }</button><button id="redactor-modal-button-cancel">${ 
                this.lang.get("cancel") 
                }</button></section></div>`,
            }),
              t.extend(this.opts, this.opts.modal);
          },
          addCallback(t, e) {
            this.modal.callbacks[t] = e;
          },
          addTemplate(t, e) {
            this.opts.modal[t] = e;
          },
          getTemplate(t) {
            return this.opts.modal[t];
          },
          getModal() {
            return this.$modalBody;
          },
          getActionButton() {
            return this.$modalBody.find("#redactor-modal-button-action");
          },
          getCancelButton() {
            return this.$modalBody.find("#redactor-modal-button-cancel");
          },
          getDeleteButton() {
            return this.$modalBody.find("#redactor-modal-button-delete");
          },
          load(t, e, i) {
            (typeof this.$modalBox !== "undefined" &&
              this.$modalBox.hasClass("open")) ||
              ((this.modal.templateName = t),
              (this.modal.width = i),
              this.modal.build(),
              this.modal.enableEvents(),
              this.modal.setTitle(e),
              this.modal.setDraggable(),
              this.modal.setContent(),
              typeof this.modal.callbacks[t] !== "undefined" &&
                this.modal.callbacks[t].call(this));
          },
          show() {
            this.detect.isDesktop() || document.activeElement.blur(),
              this.selection.save(),
              this.modal.buildTabber(),
              this.detect.isMobile() && (this.modal.width = "96%"),
              setTimeout(t.proxy(this.modal.buildWidth, this), 0),
              t(window).on(
                "resize.redactor-modal",
                t.proxy(this.modal.buildWidth, this),
              ),
              this.$modalOverlay.redactorAnimation("fadeIn", {
                duration: 0.25,
              }),
              this.$modalBox.addClass("open").show(),
              this.$modal.redactorAnimation(
                "fadeIn",
                { timing: "cubic-bezier(0.175, 0.885, 0.320, 1.105)" },
                t.proxy(function() {
                  this.utils.saveScroll(),
                    this.utils.disableBodyScroll(),
                    this.core.callback(
                      "modalOpened",
                      this.modal.templateName,
                      this.$modal,
                    ),
                    t(document).off("focusin.modal");
                  const e = this.$modal.find(
                    "input[type=text],input[type=url],input[type=email]",
                  );
                  e.on(
                    "keydown.redactor-modal",
                    t.proxy(this.modal.setEnter, this),
                  );
                }, this),
              );
          },
          buildWidth() {
            const e = t(window).height();
              const i = t(window).width();
              const o = typeof this.modal.width === "number";
            !o && this.modal.width.match(/%$/)
              ? this.$modal.css({
                  width: this.modal.width,
                  "margin-bottom": "16px",
                })
              : parseInt(this.modal.width) > i
              ? this.$modal.css({ width: "96%", "margin-bottom": "2%" })
              : (o && (this.modal.width += "px"),
                this.$modal.css({
                  width: this.modal.width,
                  "margin-bottom": "16px",
                }));
            const r = this.$modal.outerHeight();
              let s = `${e / 2 - r / 2  }px`;
            this.detect.isMobile() ? (s = "2%") : r > e && (s = "16px"),
              this.$modal.css("margin-top", s);
          },
          buildTabber() {
            (this.modal.tabs = this.$modal.find(".redactor-modal-tab")),
              this.modal.tabs.length < 2 ||
                ((this.modal.$tabsBox = t(
                  '<div id="redactor-modal-tabber" />',
                )),
                t.each(
                  this.modal.tabs,
                  t.proxy(function(e, i) {
                    const o = t(`<a href="#" rel="${  e  }" />`).text(
                      t(i).attr("data-title"),
                    );
                    o.on("click", t.proxy(this.modal.showTab, this)),
                      e === 0 && o.addClass("active"),
                      this.modal.$tabsBox.append(o);
                  }, this),
                ),
                this.$modalBody.prepend(this.modal.$tabsBox));
          },
          showTab(e) {
            e.preventDefault();
            const i = t(e.target);
              const o = i.attr("rel");
            return (
              this.modal.tabs.hide(),
              this.modal.tabs.eq(o).show(),
              t("#redactor-modal-tabber")
                .find("a")
                .removeClass("active"),
              i.addClass("active"),
              !1
            );
          },
          setTitle(t) {
            this.$modalHeader.html(t);
          },
          setContent() {
            this.$modalBody.html(
              this.modal.getTemplate(this.modal.templateName),
            ),
              this.modal
                .getCancelButton()
                .on("mousedown", t.proxy(this.modal.close, this));
          },
          setDraggable() {
            typeof t.fn.draggable !== "undefined" &&
              (this.$modal.draggable({ handle: this.$modalHeader }),
              this.$modalHeader.css("cursor", "move"));
          },
          setEnter(t) {
            t.which === 13 &&
              (t.preventDefault(), this.modal.getActionButton().click());
          },
          build() {
            this.modal.buildOverlay(),
              (this.$modalBox = t('<div id="redactor-modal-box"/>').hide()),
              (this.$modal = t('<div id="redactor-modal" role="dialog" />')),
              (this.$modalHeader = t('<div id="redactor-modal-header" />')),
              (this.$modalClose = t(
                `<button type="button" id="redactor-modal-close" aria-label="${ 
                  this.lang.get("close") 
                  }" />`,
              ).html("&times;")),
              (this.$modalBody = t('<div id="redactor-modal-body" />')),
              this.$modal.append(this.$modalHeader),
              this.$modal.append(this.$modalBody),
              this.$modal.append(this.$modalClose),
              this.$modalBox.append(this.$modal),
              this.$modalBox.appendTo(document.body);
          },
          buildOverlay() {
            (this.$modalOverlay = t(
              '<div id="redactor-modal-overlay">',
            ).hide()),
              t("body").prepend(this.$modalOverlay);
          },
          enableEvents() {
            this.$modalClose.on(
              "mousedown.redactor-modal",
              t.proxy(this.modal.close, this),
            ),
              t(document).on(
                "keyup.redactor-modal",
                t.proxy(this.modal.closeHandler, this),
              ),
              this.core
                .editor()
                .on(
                  "keyup.redactor-modal",
                  t.proxy(this.modal.closeHandler, this),
                ),
              this.$modalBox.on(
                "click.redactor-modal",
                t.proxy(this.modal.close, this),
              );
          },
          disableEvents() {
            this.$modalClose.off("mousedown.redactor-modal"),
              t(document).off("keyup.redactor-modal"),
              this.core.editor().off("keyup.redactor-modal"),
              this.$modalBox.off("click§.redactor-modal"),
              t(window).off("resize.redactor-modal");
          },
          closeHandler(t) {
            t.which === this.keyCode.ESC && this.modal.close(!1);
          },
          close(e) {
            if (e) {
              if (
                t(e.target).attr("id") !== "redactor-modal-button-cancel" &&
                e.target !== this.$modalClose[0] &&
                e.target !== this.$modalBox[0]
              )
                return;
              e.preventDefault();
            }
            this.$modalBox &&
              (this.selection.restore(),
              this.modal.disableEvents(),
              this.utils.enableBodyScroll(),
              this.utils.restoreScroll(),
              this.$modalOverlay.redactorAnimation(
                "fadeOut",
                { duration: 0.4 },
                t.proxy(function() {
                  this.$modalOverlay.remove();
                }, this),
              ),
              this.$modal.redactorAnimation(
                "fadeOut",
                {
                  duration: 0.3,
                  timing: "cubic-bezier(0.175, 0.885, 0.320, 1.175)",
                },
                t.proxy(function() {
                  typeof this.$modalBox !== "undefined" &&
                    (this.$modalBox.remove(), (this.$modalBox = void 0)),
                    t(document.body).css("overflow", this.modal.bodyOveflow),
                    this.core.callback("modalClosed", this.modal.templateName);
                }, this),
              ));
          },
        };
      },
      observe() {
        return {
          load() {
            typeof this.opts.destroyed === "undefined" &&
              (this.observe.links(), this.observe.images());
          },
          isCurrent(e, i) {
            return (
              typeof i === "undefined" && (i = t(this.selection.current())),
              i.is(e) || i.parents(e).length > 0
            );
          },
          toolbar() {
            this.observe.buttons(), this.observe.dropdowns();
          },
          buttons(e, i) {
            const o = this.selection.current();
              const r = this.selection.parent();
            return (
              e !== !1
                ? this.button.setInactiveAll()
                : this.button.setInactiveAll(i),
              e === !1 && i !== "html"
                ? void (
                    t.inArray(i, this.opts.activeButtons) !== -1 &&
                    this.button.toggleActive(i)
                  )
                : void (
                    this.utils.isRedactorParent(o) &&
                    (this.utils.isCurrentOrParentHeader() ||
                    this.utils.isCurrentOrParent([
                      "table",
                      "pre",
                      "blockquote",
                      "li",
                    ])
                      ? this.button.disable("horizontalrule")
                      : this.button.enable("horizontalrule"),
                    t.each(
                      this.opts.activeButtonsStates,
                      t.proxy(function(e, i) {
                        const s = t(r).closest(e, this.$editor[0]);
                          const n = t(o).closest(e, this.$editor[0]);
                        (s.length === 0 || this.utils.isRedactorParent(s)) &&
                          this.utils.isRedactorParent(n) &&
                          ((s.length === 0 &&
                            n.closest(e, this.$editor[0]).length === 0) ||
                            this.button.setActive(i));
                      }, this),
                    ))
                  )
            );
          },
          dropdowns() {
            const e = t("<div />")
                .html(this.selection.html())
                .find("a").length;
              const i = t(this.selection.current());
              const o = this.utils.isRedactorParent(i);
            t.each(
              this.opts.observe.dropdowns,
              t.proxy(function(t, r) {
                const s = r.observe;
                  const n = s.element;
                  const a = r.item;
                  const l = typeof s.in !== "undefined" ? s.in : !1;
                  const c = typeof s.out !== "undefined" ? s.out : !1;
                (i.closest(n).length > 0 && o) || (n === "a" && e !== 0)
                  ? this.observe.setDropdownProperties(a, l, c)
                  : this.observe.setDropdownProperties(a, c, l);
              }, this),
            );
          },
          setDropdownProperties(t, e, i) {
            i &&
              typeof i.attr !== "undefined" &&
              this.observe.setDropdownAttr(t, i.attr, !0),
              typeof e.attr !== "undefined" &&
                this.observe.setDropdownAttr(t, e.attr),
              typeof e.title !== "undefined" && t.find("span").text(e.title);
          },
          setDropdownAttr(e, i, o) {
            t.each(i, function(t, i) {
              t === "class"
                ? o
                  ? e.removeClass(i)
                  : e.addClass(i)
                : o
                ? e.removeAttr(t)
                : e.attr(t, i);
            });
          },
          addDropdown(t, e, i) {
            typeof i.observe !== "undefined" &&
              ((i.item = t), this.opts.observe.dropdowns.push(i));
          },
          images() {
            this.opts.imageEditable &&
              (this.core.editor().addClass("redactor-layer-img-edit"),
              this.core
                .editor()
                .find("img")
                .each(
                  t.proxy(function(e, i) {
                    const o = t(i);
                    o.closest("a", this.$editor[0]).on("click", function(t) {
                      t.preventDefault();
                    }),
                      this.image.setEditable(o);
                  }, this),
                ));
          },
          links() {
            this.opts.linkTooltip &&
              this.core
                .editor()
                .find("a")
                .each(
                  t.proxy(function(e, i) {
                    const o = t(i);
                    o.data("cached") !== !0 &&
                      (o.data("cached", !0),
                      o.on(
                        `touchstart.redactor.${ 
                          this.uuid 
                          } click.redactor.${ 
                          this.uuid}`,
                        t.proxy(this.observe.showTooltip, this),
                      ));
                  }, this),
                );
          },
          getTooltipPosition(t) {
            return t.offset();
          },
          showTooltip(e) {
            let i = t(e.target);
            if (
              i[0].tagName !== "IMG" &&
              (i[0].tagName !== "A" && (i = i.closest("a", this.$editor[0])),
              i[0].tagName === "A")
            ) {
              const o = i;
                const r = this.observe.getTooltipPosition(o);
                const s = t('<span class="redactor-link-tooltip"></span>');
                let n = o.attr("href");
              void 0 === n && (n = ""),
                n.length > 24 && (n = `${n.substring(0, 24)  }...`);
              const a = t(`<a href="${  o.attr("href")  }" target="_blank" />`)
                  .html(n)
                  .addClass("redactor-link-tooltip-action");
                const l = t('<a href="#" />')
                  .html(this.lang.get("edit"))
                  .on("click", t.proxy(this.link.show, this))
                  .addClass("redactor-link-tooltip-action");
                const c = t('<a href="#" />')
                  .html(this.lang.get("unlink"))
                  .on("click", t.proxy(this.link.unlink, this))
                  .addClass("redactor-link-tooltip-action");
              s.append(a)
                .append(" | ")
                .append(l)
                .append(" | ")
                .append(c);
              const d = parseInt(o.css("line-height"), 10);
                const h = Math.ceil((e.pageY - r.top) / d);
                const u = r.top + h * d;
              s.css({ top: `${u  }px`, left: `${r.left  }px` }),
                t(".redactor-link-tooltip").remove(),
                t("body").append(s),
                this.core
                  .editor()
                  .on(
                    `touchstart.redactor.${ 
                      this.uuid 
                      } click.redactor.${ 
                      this.uuid}`,
                    t.proxy(this.observe.closeTooltip, this),
                  ),
                t(document).on(
                  `touchstart.redactor.${ 
                    this.uuid 
                    } click.redactor.${ 
                    this.uuid}`,
                  t.proxy(this.observe.closeTooltip, this),
                );
            }
          },
          closeAllTooltip() {
            t(".redactor-link-tooltip").remove();
          },
          closeTooltip(e) {
            e = e.originalEvent || e;
            const i = e.target;
              const o = t(i).closest("a", this.$editor[0]);
            (o.length !== 0 && o[0].tagName === "A" && i.tagName !== "A") ||
              (i.tagName === "A" && this.utils.isRedactorParent(i)) ||
              t(i).hasClass("redactor-link-tooltip-action") ||
              (this.observe.closeAllTooltip(),
              this.core
                .editor()
                .off(
                  `touchstart.redactor.${ 
                    this.uuid 
                    } click.redactor.${ 
                    this.uuid}`,
                  t.proxy(this.observe.closeTooltip, this),
                ),
              t(document).off(
                `touchstart.redactor.${ 
                  this.uuid 
                  } click.redactor.${ 
                  this.uuid}`,
                t.proxy(this.observe.closeTooltip, this),
              ));
          },
        };
      },
      offset() {
        return {
          get(e) {
            const i = this.offset.clone(e);
            if (i === !1) return 0;
            const o = document.createElement("div");
            o.appendChild(i.cloneContents()),
              (o.innerHTML = o.innerHTML.replace(/<img(.*?[^>])>$/gi, "i"));
            const r = t
              .trim(t(o).text())
              .replace(/[\t\n\r\n]/g, "")
              .replace(/\u200B/g, "");
            return r.length;
          },
          clone(t) {
            const e = this.selection.get();
              const i = this.selection.range(e);
            if (i === null && typeof t === "undefined") return !1;
            if (((t = typeof t === "undefined" ? this.$editor : t), t === !1))
              return !1;
            t = t[0] || t;
            const o = i.cloneRange();
            return (
              o.selectNodeContents(t), o.setEnd(i.endContainer, i.endOffset), o
            );
          },
          set(t, e) {
            (e = typeof e === "undefined" ? t : e),
              this.focus.is() || this.focus.start();
            for (
              var i,
                o = this.selection.get(),
                r = this.selection.range(o),
                s = 0,
                n = document.createTreeWalker(
                  this.$editor[0],
                  NodeFilter.SHOW_TEXT,
                  null,
                  null,
                );
              (i = n.nextNode()) !== null;

            )
              if (
                ((s += i.nodeValue.length),
                s > t &&
                  (r.setStart(i, i.nodeValue.length + t - s), (t = 1 / 0)),
                s >= e)
              ) {
                r.setEnd(i, i.nodeValue.length + e - s);
                break;
              }
            r.collapse(!1), this.selection.update(o, r);
          },
        };
      },
      paragraphize() {
        return {
          load(e) {
            return this.opts.paragraphize === !1 ||
              this.opts.type === "inline" ||
              this.opts.type === "pre"
              ? e
              : e === "" || e === "<p></p>"
              ? this.opts.emptyHtml
              : ((e += "\n"),
                (this.paragraphize.safes = []),
                (this.paragraphize.z = 0),
                (e = e.replace(
                  /(<br\s?\/?>){1,}\n?<\/blockquote>/gi,
                  "</blockquote>",
                )),
                (e = e.replace(/<\/pre>/gi, "</pre>\n\n")),
                (e = e.replace(/<p>\s<br><\/p>/gi, "<p></p>")),
                (e = this.paragraphize.getSafes(e)),
                (e = e.replace("<br>", "\n")),
                (e = this.paragraphize.convert(e)),
                (e = this.paragraphize.clear(e)),
                (e = this.paragraphize.restoreSafes(e)),
                (e = e.replace(
                  new RegExp(
                    `<br\\s?/?>\n?<(${ 
                      this.opts.paragraphizeBlocks.join("|") 
                      })(.*?[^>])>`,
                    "gi",
                  ),
                  "<p><br /></p>\n<$1$2>",
                )),
                t.trim(e));
          },
          getSafes(e) {
            const i = t("<div />").append(e);
            return (
              i.find("blockquote p").replaceWith(function() {
                return t(this)
                  .append("<br />")
                  .contents();
              }),
              i.find(this.opts.paragraphizeBlocks.join(", ")).each(
                t.proxy(function(e, i) {
                  return (
                    this.paragraphize.z++,
                    (this.paragraphize.safes[this.paragraphize.z] =
                      i.outerHTML),
                    t(i).replaceWith(
                      `\n#####replace${  this.paragraphize.z  }#####\n\n`,
                    )
                  );
                }, this),
              ),
              i.find("span.redactor-selection-marker").each(
                t.proxy(function(e, i) {
                  return (
                    this.paragraphize.z++,
                    (this.paragraphize.safes[this.paragraphize.z] =
                      i.outerHTML),
                    t(i).replaceWith(
                      `\n#####replace${  this.paragraphize.z  }#####\n\n`,
                    )
                  );
                }, this),
              ),
              i.html()
            );
          },
          restoreSafes(e) {
            return (
              t.each(this.paragraphize.safes, function(t, i) {
                (i = typeof i !== "undefined" ? i.replace(/\$/g, "&#36;") : i),
                  (e = e.replace(`#####replace${  t  }#####`, i));
              }),
              e
            );
          },
          convert(e) {
            (e = e.replace(/\r\n/g, "xparagraphmarkerz")),
              (e = e.replace(/\n/g, "xparagraphmarkerz")),
              (e = e.replace(/\r/g, "xparagraphmarkerz"));
            const i = /\s+/g;
            (e = e.replace(i, " ")), (e = t.trim(e));
            const o = /xparagraphmarkerzxparagraphmarkerz/gi;
            e = e.replace(o, "</p><p>");
            const r = /xparagraphmarkerz/gi;
            return (
              (e = e.replace(r, "<br>")),
              (e = `<p>${  e  }</p>`),
              (e = e.replace("<p></p>", "")),
              (e = e.replace("\r\n\r\n", "")),
              (e = e.replace(/<\/p><p>/g, "</p>\r\n\r\n<p>")),
              (e = e.replace(new RegExp("<br\\s?/?></p>", "g"), "</p>")),
              (e = e.replace(new RegExp("<p><br\\s?/?>", "g"), "<p>")),
              (e = e.replace(new RegExp("<p><br\\s?/?>", "g"), "<p>")),
              (e = e.replace(new RegExp("<br\\s?/?></p>", "g"), "</p>")),
              (e = e.replace(/<p>&nbsp;<\/p>/gi, "")),
              (e = e.replace(/<p>\s?<br>&nbsp;<\/p>/gi, "")),
              (e = e.replace(/<p>\s?<br>/gi, "<p>"))
            );
          },
          clear(t) {
            return (
              (t = t.replace(
                /<p>(.*?)#####replace(.*?)#####\s?<\/p>/gi,
                "<p>$1</p>#####replace$2#####",
              )),
              (t = t.replace(/(<br\s?\/?>){2,}<\/p>/gi, "</p>")),
              (t = t.replace(
                new RegExp("</blockquote></p>", "gi"),
                "</blockquote>",
              )),
              (t = t.replace(
                new RegExp("<p></blockquote>", "gi"),
                "</blockquote>",
              )),
              (t = t.replace(
                new RegExp("<p><blockquote>", "gi"),
                "<blockquote>",
              )),
              (t = t.replace(
                new RegExp("<blockquote></p>", "gi"),
                "<blockquote>",
              )),
              (t = t.replace(new RegExp("<p><p ", "gi"), "<p ")),
              (t = t.replace(new RegExp("<p><p>", "gi"), "<p>")),
              (t = t.replace(new RegExp("</p></p>", "gi"), "</p>")),
              (t = t.replace(new RegExp("<p>\\s?</p>", "gi"), "")),
              (t = t.replace(new RegExp("\n</p>", "gi"), "</p>")),
              (t = t.replace(new RegExp("<p>	?	?\n?<p>", "gi"), "<p>")),
              (t = t.replace(new RegExp("<p>	*</p>", "gi"), ""))
            );
          },
        };
      },
      paste() {
        return {
          init(e) {
            this.rtePaste = !0;
            const i = !(
              this.opts.type !== "pre" && !this.utils.isCurrentOrParent("pre")
            );
            return this.detect.isDesktop() &&
              !this.paste.pre &&
              this.opts.clipboardImageUpload &&
              this.opts.imageUpload &&
              this.paste.detectClipboardUpload(e)
              ? void (
                  this.detect.isIe() &&
                  setTimeout(t.proxy(this.paste.clipboardUpload, this), 100)
                )
              : (this.utils.saveScroll(),
                this.selection.save(),
                this.paste.createPasteBox(i),
                t(window).on(
                  "scroll.redactor-freeze",
                  t.proxy(function() {
                    t(window).scrollTop(this.saveBodyScroll);
                  }, this),
                ),
                void setTimeout(
                  t.proxy(function() {
                    let e = this.paste.getPasteBoxCode(i);
                    this.buffer.set(),
                      this.selection.restore(),
                      this.utils.restoreScroll();
                    const o = this.clean.getCurrentType(e);
                    e = this.clean.onPaste(e, o);
                    const r = this.core.callback("paste", e);
                    (e = typeof r === "undefined" ? e : r),
                      this.paste.insert(e, o),
                      (this.rtePaste = !1),
                      i && this.clean.cleanPre(),
                      t(window).off("scroll.redactor-freeze");
                  }, this),
                  1,
                ));
          },
          getPasteBoxCode(t) {
            const e = t ? this.$pasteBox.val() : this.$pasteBox.html();
            return this.$pasteBox.remove(), e;
          },
          createPasteBox(e) {
            const i = {
              position: "fixed",
              width: "1px",
              top: 0,
              left: "-9999px",
            };
            (this.$pasteBox = e
              ? t("<textarea>").css(i)
              : t("<div>")
                  .attr("contenteditable", "true")
                  .css(i)),
              this.paste.appendPasteBox(),
              this.$pasteBox.focus();
          },
          appendPasteBox() {
            if (this.detect.isIe()) this.core.box().append(this.$pasteBox);
            else {
              const e = t(".modal-body:visible");
              e.length > 0
                ? e.append(this.$pasteBox)
                : t("body").prepend(this.$pasteBox);
            }
          },
          detectClipboardUpload(e) {
            e = e.originalEvent || e;
            const i = e.clipboardData;
            if (this.detect.isIe()) return !0;
            if (this.detect.isFirefox()) return !1;
            const o = i.types;
            if (o.indexOf("public.tiff") !== -1) return e.preventDefault(), !1;
            if (i.items && i.items.length) {
              const r = i.items[0].getAsFile();
              if (r === null) return !1;
              const s = new FileReader();
              return (
                s.readAsDataURL(r),
                (s.onload = t.proxy(this.paste.insertFromClipboard, this)),
                !0
              );
            }
          },
          clipboardUpload() {
            const e = this.$editor.find("img");
            t.each(
              e,
              t.proxy(function(e, i) {
                if (i.src.search(/^data\:image/i) !== -1) {
                  const o = window.FormData ? new FormData() : null;
                  if (window.FormData) {
                    this.buffer.set(),
                      (this.upload.direct = !0),
                      (this.upload.type = "image"),
                      (this.upload.url = this.opts.imageUpload),
                      (this.upload.callback = t.proxy(function(e) {
                        if (this.detect.isIe()) t(i).wrap(t("<figure />"));
                        else {
                          const o = t(i).parent();
                          this.utils.replaceToTag(o, "figure");
                        }
                        (i.src = e.url),
                          this.core.callback("imageUpload", t(i), e);
                      }, this));
                    const r = this.utils.dataURItoBlob(i.src);
                    o.append("clipboard", 1),
                      o.append(this.opts.imageUploadParam, r),
                      this.progress.show(),
                      this.upload.send(o, !1),
                      this.code.sync();
                  }
                }
              }, this),
            );
          },
          insertFromClipboard(t) {
            const e = window.FormData ? new FormData() : null;
            if (window.FormData) {
              this.buffer.set(),
                (this.upload.direct = !0),
                (this.upload.type = "image"),
                (this.upload.url = this.opts.imageUpload),
                (this.upload.callback = this.image.insert);
              const i = this.utils.dataURItoBlob(t.target.result);
              e.append("clipboard", 1),
                e.append(this.opts.imageUploadParam, i),
                this.progress.show(),
                this.upload.send(e, t);
            }
          },
          insert(e, i) {
            i.pre
              ? this.insert.raw(e)
              : i.text
              ? this.insert.text(e)
              : this.insert.html(e, i),
              this.detect.isFirefox() &&
                this.opts.clipboardImageUpload &&
                setTimeout(t.proxy(this.paste.clipboardUpload, this), 100);
          },
        };
      },
      placeholder() {
        return {
          enable() {
            setTimeout(
              t.proxy(function() {
                return this.placeholder.isEditorEmpty()
                  ? this.placeholder.show()
                  : this.placeholder.hide();
              }, this),
              5,
            );
          },
          show() {
            this.core.editor().addClass("redactor-placeholder");
          },
          update(t) {
            (this.opts.placeholder = t),
              this.core.editor().attr("placeholder", t);
          },
          hide() {
            this.core.editor().removeClass("redactor-placeholder");
          },
          is() {
            return this.core.editor().hasClass("redactor-placeholder");
          },
          init() {
            this.placeholder.enabled() &&
              (this.utils.isEditorRelative() || this.utils.setEditorRelative(),
              this.placeholder.build(),
              this.placeholder.buildPosition(),
              this.placeholder.enable(),
              this.placeholder.enableEvents());
          },
          enabled() {
            return this.opts.placeholder
              ? this.core.element().attr("placeholder", this.opts.placeholder)
              : this.placeholder.isAttr();
          },
          enableEvents() {
            this.core
              .editor()
              .on(
                `keydown.redactor-placeholder.${  this.uuid}`,
                t.proxy(this.placeholder.enable, this),
              );
          },
          disableEvents() {
            this.core.editor().off(`.redactor-placeholder.${  this.uuid}`);
          },
          build() {
            this.core
              .editor()
              .attr("placeholder", this.core.element().attr("placeholder"));
          },
          buildPosition() {
            const e = t("<style />");
            e.addClass("redactor-placeholder-style-tag"),
              e.html(
                `#${ 
                  this.core.id() 
                  }.redactor-placeholder::after ${ 
                  this.placeholder.getPosition()}`,
              ),
              t("head").append(e);
          },
          getPosition() {
            return (
              `{ top: ${ 
              this.core.editor().css("padding-top") 
              }; left: ${ 
              this.core.editor().css("padding-left") 
              }; }`
            );
          },
          isEditorEmpty() {
            const e = t.trim(this.core.editor().html()).replace(/[\t\n]/g, "");
              const i = ["", "<p>​</p>", "<p>​<br></p>"];
            return t.inArray(e, i) !== -1;
          },
          isAttr() {
            return (
              typeof this.core.element().attr("placeholder") !== "undefined" &&
              this.core.element().attr("placeholder") !== ""
            );
          },
          destroy() {
            this.core.editor().removeAttr("placeholder"),
              this.placeholder.hide(),
              this.placeholder.disableEvents(),
              t(".redactor-placeholder-style-tag").remove();
          },
        };
      },
      progress() {
        return {
          $box: null,
          $bar: null,
          target: document.body,
          show() {
            this.progress.is()
              ? this.progress.$box.show()
              : (this.progress.build(),
                this.progress.$box.redactorAnimation("fadeIn"));
          },
          hide() {
            this.progress.is() &&
              this.progress.$box.redactorAnimation(
                "fadeOut",
                { duration: 0.35 },
                t.proxy(this.progress.destroy, this),
              );
          },
          update(t) {
            this.progress.show(), this.progress.$bar.css("width", `${t  }%`);
          },
          is() {
            return this.progress.$box !== null;
          },
          build() {
            (this.progress.$bar = t("<span />")),
              (this.progress.$box = t('<div id="redactor-progress" />')),
              this.progress.$box.append(this.progress.$bar),
              t(this.progress.target).append(this.progress.$box);
          },
          destroy() {
            this.progress.is() && this.progress.$box.remove(),
              (this.progress.$box = null),
              (this.progress.$bar = null);
          },
        };
      },
      selection() {
        return {
          get() {
            return window.getSelection
              ? window.getSelection()
              : document.selection && document.selection.type !== "Control"
              ? document.selection
              : null;
          },
          range(t) {
            return (
              typeof t === "undefined" && (t = this.selection.get()),
              t.getRangeAt && t.rangeCount ? t.getRangeAt(0) : null
            );
          },
          is() {
            return !this.selection.isCollapsed();
          },
          isRedactor() {
            const e = this.selection.range();
            if (e !== null) {
              const i = e.startContainer.parentNode;
              if (
                t(i).hasClass("redactor-in") ||
                t(i).parents(".redactor-in").length !== 0
              )
                return !0;
            }
            return !1;
          },
          isCollapsed() {
            const t = this.selection.get();
            return t === null ? !1 : t.isCollapsed;
          },
          update(t, e) {
            e !== null && (t.removeAllRanges(), t.addRange(e));
          },
          current() {
            const t = this.selection.get();
            return t === null ? !1 : t.anchorNode;
          },
          parent() {
            const t = this.selection.current();
            return t === null ? !1 : t.parentNode;
          },
          block(e) {
            for (e = e || this.selection.current(); e; ) {
              if (this.utils.isBlockTag(e.tagName))
                return t(e).hasClass("redactor-in") ? !1 : e;
              e = e.parentNode;
            }
            return !1;
          },
          inline(e) {
            for (e = e || this.selection.current(); e; ) {
              if (this.utils.isInlineTag(e.tagName))
                return t(e).hasClass("redactor-in") ? !1 : e;
              e = e.parentNode;
            }
            return !1;
          },
          element(e) {
            for (e || (e = this.selection.current()); e; ) {
              if (e.nodeType === 1)
                return t(e).hasClass("redactor-in") ? !1 : e;
              e = e.parentNode;
            }
            return !1;
          },
          prev() {
            const t = this.selection.current();
            return t === null ? !1 : this.selection.current().previousSibling;
          },
          next() {
            const t = this.selection.current();
            return t === null ? !1 : this.selection.current().nextSibling;
          },
          blocks(e) {
            const i = [];
              const o = this.selection.nodes(e);
            t.each(
              o,
              t.proxy(function(t, e) {
                this.utils.isBlock(e) && i.push(e);
              }, this),
            );
            const r = this.selection.block();
            return i.length === 0 && r === !1
              ? []
              : i.length === 0 && r !== !1
              ? [r]
              : i;
          },
          inlines(e) {
            const i = [];
              const o = this.selection.nodes(e);
            t.each(
              o,
              t.proxy(function(t, e) {
                this.utils.isInline(e) && i.push(e);
              }, this),
            );
            const r = this.selection.inline();
            return i.length === 0 && r === !1
              ? []
              : i.length === 0 && r !== !1
              ? [r]
              : i;
          },
          nodes(e) {
            const i = typeof e === "undefined" ? [] : t.isArray(e) ? e : [e];
              const o = this.selection.get();
              const r = this.selection.range(o);
            if (this.utils.isCollapsed()) return [this.selection.current()];
            let s = r.startContainer;
              const n = r.endContainer;
            if (s === n) return [this.selection.parent()];
            for (var a = []; s && s !== n; )
              a.push((s = this.selection.nextNode(s)));
            for (s = r.startContainer; s && s !== r.commonAncestorContainer; )
              a.unshift(s), (s = s.parentNode);
            const l = [];
            return (
              t.each(a, function(e, o) {
                if (o) {
                  const r = o.nodeType !== 1 ? !1 : o.tagName.toLowerCase();
                  if (
                    t(o).hasClass(
                      "redactor-script-tag, redactor-selection-marker",
                    )
                  )
                    return;
                  if (r && i.length !== 0 && t.inArray(r, i) === -1) return;
                  l.push(o);
                }
              }),
              l.length === 0 ? [] : l
            );
          },
          nextNode(t) {
            if (t.hasChildNodes()) return t.firstChild;
            for (; t && !t.nextSibling; ) t = t.parentNode;
            return t ? t.nextSibling : null;
          },
          save() {
            this.marker.insert(), (this.savedSel = this.core.editor().html());
          },
          restore(t) {
            const e = this.marker.find(1);
              const i = this.marker.find(2);
            this.detect.isFirefox() && this.core.editor().focus(),
              e.length !== 0 && i.length !== 0
                ? this.caret.set(e, i)
                : e.length !== 0
                ? this.caret.start(e)
                : this.core.editor().focus(),
              t !== !1 && (this.marker.remove(), (this.savedSel = !1));
          },
          saveInstant() {
            const t = this.core.editor()[0];
              const e = t.ownerDocument;
              const i = e.defaultView;
              const o = i.getSelection();
            if (o.getRangeAt && o.rangeCount) {
              const r = o.getRangeAt(0);
                const s = r.cloneRange();
              s.selectNodeContents(t),
                s.setEnd(r.startContainer, r.startOffset);
              const n = s.toString().length;
              return (
                (this.saved = {
                  start: n,
                  end: n + r.toString().length,
                  node: r.startContainer,
                }),
                this.saved
              );
            }
          },
          restoreInstant(t) {
            if (typeof t !== "undefined" || this.saved) {
              this.saved = typeof t !== "undefined" ? t : this.saved;
              const e = this.core.editor().find(this.saved.node);
              if (
                e.length === 0 ||
                e
                    .text()
                    .trim()
                    .replace(/\u200B/g, "").length !==
                  0
              ) {
                const i = this.core.editor()[0];
                  const o = i.ownerDocument;
                  const r = o.defaultView;
                  let s = 0;
                  var n = o.createRange();
                n.setStart(i, 0), n.collapse(!0);
                for (var a, l = [i], c = !1, d = !1; !d && (a = l.pop()); )
                  if (a.nodeType == 3) {
                    const h = s + a.length;
                    !c &&
                      this.saved.start >= s &&
                      this.saved.start <= h &&
                      (n.setStart(a, this.saved.start - s), (c = !0)),
                      c &&
                        this.saved.end >= s &&
                        this.saved.end <= h &&
                        (n.setEnd(a, this.saved.end - s), (d = !0)),
                      (s = h);
                  } else
                    for (let u = a.childNodes.length; u--; )
                      l.push(a.childNodes[u]);
                var p = r.getSelection();
                p.removeAllRanges(), p.addRange(n);
              } else
                try {
                  var n = document.createRange();
                  n.setStart(e[0], 0);
                  var p = window.getSelection();
                  p.removeAllRanges(), p.addRange(n);
                } catch (f) {}
            }
          },
          node(e) {
            t(e).prepend(this.marker.get(1)),
              t(e).append(this.marker.get(2)),
              this.selection.restore();
          },
          all() {
            this.core.editor().focus();
            const t = this.selection.get();
              const e = this.selection.range(t);
            e.selectNodeContents(this.core.editor()[0]),
              this.selection.update(t, e);
          },
          remove() {
            this.selection.get().removeAllRanges();
          },
          replace(t) {
            this.insert.html(t);
          },
          text() {
            return this.selection.get().toString();
          },
          html() {
            let t = "";
              const e = this.selection.get();
            if (e.rangeCount) {
              for (
                var i = document.createElement("div"), o = e.rangeCount, r = 0;
                o > r;
                ++r
              )
                i.appendChild(e.getRangeAt(r).cloneContents());
              t = this.clean.onGet(i.innerHTML);
            }
            return t;
          },
          extractEndOfNode(t) {
            const e = this.selection.get();
              const i = this.selection.range(e);
              const o = i.cloneRange();
            return (
              o.selectNodeContents(t),
              o.setStart(i.endContainer, i.endOffset),
              o.extractContents()
            );
          },
          removeMarkers() {
            this.marker.remove();
          },
          marker(t) {
            return this.marker.get(t);
          },
          markerHtml(t) {
            return this.marker.html(t);
          },
        };
      },
      shortcuts() {
        return {
          hotkeysSpecialKeys: {
            8: "backspace",
            9: "tab",
            10: "return",
            13: "return",
            16: "shift",
            17: "ctrl",
            18: "alt",
            19: "pause",
            20: "capslock",
            27: "esc",
            32: "space",
            33: "pageup",
            34: "pagedown",
            35: "end",
            36: "home",
            37: "left",
            38: "up",
            39: "right",
            40: "down",
            45: "insert",
            46: "del",
            59: ";",
            61: "=",
            96: "0",
            97: "1",
            98: "2",
            99: "3",
            100: "4",
            101: "5",
            102: "6",
            103: "7",
            104: "8",
            105: "9",
            106: "*",
            107: "+",
            109: "-",
            110: ".",
            111: "/",
            112: "f1",
            113: "f2",
            114: "f3",
            115: "f4",
            116: "f5",
            117: "f6",
            118: "f7",
            119: "f8",
            120: "f9",
            121: "f10",
            122: "f11",
            123: "f12",
            144: "numlock",
            145: "scroll",
            173: "-",
            186: ";",
            187: "=",
            188: ",",
            189: "-",
            190: ".",
            191: "/",
            192: "`",
            219: "[",
            220: "\\",
            221: "]",
            222: "'",
          },
          hotkeysShiftNums: {
            "`": "~",
            1: "!",
            2: "@",
            3: "#",
            4: "$",
            5: "%",
            6: "^",
            7: "&",
            8: "*",
            9: "(",
            0: ")",
            "-": "_",
            "=": "+",
            ";": ": ",
            "'": '"',
            ",": "<",
            ".": ">",
            "/": "?",
            "\\": "|",
          },
          init(e, i) {
            return this.opts.shortcuts === !1
              ? ((!e.ctrlKey && !e.metaKey) ||
                  (i !== 66 && i !== 73) ||
                  e.preventDefault(),
                !1)
              : void t.each(
                  this.opts.shortcuts,
                  t.proxy(function(t, i) {
                    this.shortcuts.build(e, t, i);
                  }, this),
                );
          },
          build(e, i, o) {
            for (
              let r = t.proxy(function() {
                  this.shortcuts.buildHandler(o);
                }, this),
                s = i.split(","),
                n = s.length,
                a = 0;
              n > a;
              a++
            )
              typeof s[a] === "string" &&
                this.shortcuts.handler(e, t.trim(s[a]), r);
          },
          buildHandler(t) {
            let e;
            t.func.search(/\./) !== "-1"
              ? ((e = t.func.split(".")),
                typeof this[e[0]] !== "undefined" &&
                  this[e[0]][e[1]].apply(this, t.params))
              : this[t.func].apply(this, t.params);
          },
          handler(e, i, o) {
            i = i.toLowerCase().split(" ");
            const r = this.shortcuts.hotkeysSpecialKeys[e.keyCode];
              const s = String.fromCharCode(e.which).toLowerCase();
              let n = "";
              const a = {};
            t.each(["alt", "ctrl", "meta", "shift"], function(t, i) {
              e[`${i  }Key`] && r !== i && (n += `${i  }+`);
            }),
              r && (a[n + r] = !0),
              s &&
                ((a[n + s] = !0),
                (a[n + this.shortcuts.hotkeysShiftNums[s]] = !0),
                n === "shift+" && (a[this.shortcuts.hotkeysShiftNums[s]] = !0));
            for (let l = i.length, c = 0; l > c; c++)
              if (a[i[c]]) return e.preventDefault(), o.apply(this, arguments);
          },
        };
      },
      storage() {
        return {
          data: [],
          add(t) {
            (t.status = !0),
              (t.url = decodeURI(this.link.removeSelfHostFromUrl(t.url))),
              (this.storage.data[t.url] = t);
          },
          status(t, e) {
            this.storage.data[decodeURI(t)].status = e;
          },
          observe() {
            const e = this;
              const i = this.core.editor().find("[data-image]");
            i.each(function(i, o) {
              e.storage.add({
                type: "image",
                node: o,
                url: o.src,
                id: t(o).attr("data-image"),
              });
            });
            const o = this.core.editor().find("[data-file]");
            o.each(function(i, o) {
              e.storage.add({
                type: "file",
                node: o,
                url: o.href,
                id: t(o).attr("data-file"),
              });
            });
            const r = this.core.editor().find("[data-s3]");
            r.each(function(i, o) {
              const r = o.tagName === "IMG" ? o.src : o.href;
              e.storage.add({
                type: "s3",
                node: o,
                url: r,
                id: t(o).attr("data-s3"),
              });
            });
          },
          changes() {
            for (const t in this.storage.data) {
              const e = this.storage.data[t];
                const i = e.node.tagName === "IMG" ? "src" : "href";
                const o = this.core
                  .editor()
                  .find(`[data-${  e.type  }][${  i  }="${  e.url  }"]`);
              o.length === 0
                ? this.storage.status(e.url, !1)
                : this.storage.status(e.url, !0);
            }
            return this.storage.data;
          },
        };
      },
      toolbar() {
        return {
          build() {
            this.button.hideButtons(),
              this.button.hideButtonsOnMobile(),
              (this.$toolbar = this.toolbar.createContainer()),
              this.toolbar.append(),
              (this.button.$toolbar = this.$toolbar),
              this.button.setFormatting(),
              this.button.load(this.$toolbar),
              this.toolbar.setFixed();
          },
          createContainer() {
            return t("<ul>")
              .addClass("redactor-toolbar")
              .attr({ id: `redactor-toolbar-${  this.uuid}`, role: "toolbar" });
          },
          append() {
            this.opts.toolbarExternal
              ? (this.$toolbar.addClass("redactor-toolbar-external"),
                t(this.opts.toolbarExternal).html(this.$toolbar))
              : this.opts.type === "textarea"
              ? this.$box.prepend(this.$toolbar)
              : this.$element.before(this.$toolbar);
          },
          setFixed() {
            if (this.opts.toolbarFixed && !this.opts.toolbarExternal) {
              if (this.opts.toolbarFixedTarget !== document) {
                const e = t(this.opts.toolbarFixedTarget);
                this.toolbarOffsetTop =
                  e.length === 0
                    ? 0
                    : this.core.box().offset().top - e.offset().top;
              }
              const i =
                this.core.box().closest(".modal-body").length !== 0 ? 1e3 : 0;
              setTimeout(
                t.proxy(function() {
                  if ((this.toolbar.observeScroll(!1), this.detect.isDesktop()))
                    t(this.opts.toolbarFixedTarget).on(
                      `scroll.redactor.${  this.uuid}`,
                      t.proxy(this.toolbar.observeScroll, this),
                    );
                  else {
                    const e = this;
                    t(this.opts.toolbarFixedTarget).on(
                      `scroll.redactor.${  this.uuid}`,
                      function() {
                        e.core.toolbar().hide(),
                          clearTimeout(t.data(this, "scrollCheck")),
                          t.data(
                            this,
                            "scrollCheck",
                            setTimeout(function() {
                              e.core.toolbar().show(),
                                e.toolbar.observeScroll();
                            }, 250),
                          );
                      },
                    );
                  }
                }, this),
                i,
              );
            }
          },
          getBoxTop() {
            return this.opts.toolbarFixedTarget === document
              ? this.core.box().offset().top
              : this.toolbarOffsetTop;
          },
          observeScroll(e) {
            let i = 0;
            e !== !1 &&
              (i = this.opts.toolbarFixedTarget === document ? 20 : 0);
            const o = t(this.opts.toolbarFixedTarget).scrollTop();
              const r = this.toolbar.getBoxTop();
            o !== r &&
              (o + this.opts.toolbarFixedTopOffset + i > r
                ? this.toolbar.observeScrollEnable(o, r)
                : this.toolbar.observeScrollDisable());
          },
          observeScrollResize() {
            this.$toolbar.css({
              width: this.core.box().innerWidth(),
              left: this.core.box().offset().left,
            });
          },
          observeScrollEnable(e, i) {
            if (
              typeof this.fullscreen !== "undefined" &&
              this.fullscreen.isOpened === !1
            )
              return void this.toolbar.observeScrollDisable();
            const o = i + this.core.box().outerHeight() - 32;
              const r = this.core.box().innerWidth();
              let s = this.detect.isDesktop() ? "fixed" : "absolute";
              let n = this.detect.isDesktop()
                ? this.opts.toolbarFixedTopOffset
                : t(this.opts.toolbarFixedTarget).scrollTop() -
                  i +
                  this.opts.toolbarFixedTopOffset;
              let a = this.detect.isDesktop() ? this.core.box().offset().left : 0;
            this.opts.toolbarFixedTarget !== document &&
              ((s = "absolute"),
              (n =
                this.opts.toolbarFixedTopOffset +
                t(this.opts.toolbarFixedTarget).scrollTop() -
                i),
              (a = 0)),
              this.$toolbar.addClass("toolbar-fixed-box"),
              this.$toolbar.css({ position: s, width: r, top: n, left: a }),
              e > o && t(`.redactor-dropdown-${  this.uuid  }:visible`).hide(),
              this.toolbar.setDropdownsFixed(),
              this.$toolbar.css("visibility", o > e ? "visible" : "hidden"),
              t(window).on(
                `resize.redactor-toolbar.${  this.uuid}`,
                t.proxy(this.toolbar.observeScrollResize, this),
              );
          },
          observeScrollDisable() {
            this.$toolbar.css({
              position: "relative",
              width: "auto",
              top: 0,
              left: 0,
              visibility: "visible",
            }),
              this.toolbar.unsetDropdownsFixed(),
              this.$toolbar.removeClass("toolbar-fixed-box"),
              t(window).off(`resize.redactor-toolbar.${  this.uuid}`);
          },
          setDropdownsFixed() {
            const t =
              this.opts.toolbarFixedTarget === document &&
              this.detect.isDesktop()
                ? "fixed"
                : "absolute";
            this.toolbar.setDropdownPosition(t);
          },
          unsetDropdownsFixed() {
            this.toolbar.setDropdownPosition("absolute");
          },
          setDropdownPosition(e) {
            const i = this;
            t(`.redactor-dropdown-${  this.uuid}`).each(function() {
              const o = t(this);
                const r = i.button.get(o.attr("rel"));
                const s =
                  e === "fixed" ? i.opts.toolbarFixedTopOffset : r.offset().top;
              o.css({ position: e, top: `${r.innerHeight() + s  }px` });
            });
          },
        };
      },
      upload() {
        return {
          init(e, i, o) {
            (this.upload.direct = !1),
              (this.upload.callback = o),
              (this.upload.url = i),
              (this.upload.$el = t(e)),
              (this.upload.$droparea = t('<div id="redactor-droparea" />')),
              (this.upload.$placeholdler = t(
                '<div id="redactor-droparea-placeholder" />',
              ).text(this.lang.get("upload-label"))),
              (this.upload.$input = t('<input type="file" name="file" />')),
              this.upload.$placeholdler.append(this.upload.$input),
              this.upload.$droparea.append(this.upload.$placeholdler),
              this.upload.$el.append(this.upload.$droparea),
              this.upload.$droparea.off("redactor.upload"),
              this.upload.$input.off("redactor.upload"),
              this.upload.$droparea.on(
                "dragover.redactor.upload",
                t.proxy(this.upload.onDrag, this),
              ),
              this.upload.$droparea.on(
                "dragleave.redactor.upload",
                t.proxy(this.upload.onDragLeave, this),
              ),
              this.upload.$input.on(
                "change.redactor.upload",
                t.proxy(function(t) {
                  (t = t.originalEvent || t),
                    this.upload.traverseFile(this.upload.$input[0].files[0], t);
                }, this),
              ),
              this.upload.$droparea.on(
                "drop.redactor.upload",
                t.proxy(function(t) {
                  t.preventDefault(),
                    this.upload.$droparea
                      .removeClass("drag-hover")
                      .addClass("drag-drop"),
                    this.upload.onDrop(t);
                }, this),
              );
          },
          directUpload(t, e) {
            (this.upload.direct = !0), this.upload.traverseFile(t, e);
          },
          onDrop(t) {
            t = t.originalEvent || t;
            const e = t.dataTransfer.files;
            if (this.opts.multipleImageUpload)
              for (let i = e.length, o = 0; i > o; o++)
                this.upload.traverseFile(e[o], t);
            else this.upload.traverseFile(e[0], t);
          },
          traverseFile(t, e) {
            if (this.opts.s3)
              return this.upload.setConfig(t), void this.uploads3.send(t, e);
            const i = window.FormData ? new FormData() : null;
            if (window.FormData) {
              this.upload.setConfig(t);
              const o =
                this.upload.type === "image"
                  ? this.opts.imageUploadParam
                  : this.opts.fileUploadParam;
              i.append(o, t);
            }
            this.progress.show(),
              this.core.callback("uploadStart", e, i),
              this.upload.send(i, e);
          },
          setConfig(t) {
            this.upload.getType(t),
              this.upload.direct &&
                ((this.upload.url =
                  this.upload.type === "image"
                    ? this.opts.imageUpload
                    : this.opts.fileUpload),
                (this.upload.callback =
                  this.upload.type === "image"
                    ? this.image.insert
                    : this.file.insert));
          },
          getType(t) {
            (this.upload.type =
              this.opts.imageTypes.indexOf(t.type) === -1 ? "file" : "image"),
              this.opts.imageUpload === null &&
                this.opts.fileUpload !== null &&
                (this.upload.type = "file");
          },
          getHiddenFields(e, i) {
            return e === !1 || typeof e !== "object"
              ? i
              : (t.each(
                  e,
                  t.proxy(function(e, o) {
                    o !== null &&
                      o.toString().indexOf("#") === 0 &&
                      (o = t(o).val()),
                      i.append(e, o);
                  }, this),
                ),
                i);
          },
          send(e, i) {
            this.upload.type === "image"
              ? ((e = this.utils.appendFields(this.opts.imageUploadFields, e)),
                (e = this.utils.appendForms(this.opts.imageUploadForms, e)),
                (e = this.upload.getHiddenFields(this.upload.imageFields, e)))
              : ((e = this.utils.appendFields(this.opts.fileUploadFields, e)),
                (e = this.utils.appendForms(this.opts.fileUploadForms, e)),
                (e = this.upload.getHiddenFields(this.upload.fileFields, e)));
            const o = new XMLHttpRequest();
            o.open("POST", this.upload.url),
              o.setRequestHeader("X-Requested-With", "XMLHttpRequest"),
              (o.onreadystatechange = t.proxy(function() {
                if (o.readyState === 4) {
                  let t = o.responseText;
                  (t = t.replace(/^\[/, "")), (t = t.replace(/\]$/, ""));
                  let e;
                  try {
                    e = typeof t === "string" ? JSON.parse(t) : t;
                  } catch (r) {
                    e = { error: !0 };
                  }
                  this.progress.hide(),
                    this.upload.direct ||
                      this.upload.$droparea.removeClass("drag-drop"),
                    this.upload.callback(e, this.upload.direct, i);
                }
              }, this)),
              o.send(e);
          },
          onDrag(t) {
            t.preventDefault(), this.upload.$droparea.addClass("drag-hover");
          },
          onDragLeave(t) {
            t.preventDefault(), this.upload.$droparea.removeClass("drag-hover");
          },
          clearImageFields() {
            this.upload.imageFields = {};
          },
          addImageFields(t, e) {
            this.upload.imageFields[t] = e;
          },
          removeImageFields(t) {
            delete this.upload.imageFields[t];
          },
          clearFileFields() {
            this.upload.fileFields = {};
          },
          addFileFields(t, e) {
            this.upload.fileFields[t] = e;
          },
          removeFileFields(t) {
            delete this.upload.fileFields[t];
          },
        };
      },
      uploads3() {
        return {
          send(e, i) {
            this.uploads3.executeOnSignedUrl(
              e,
              t.proxy(function(t) {
                this.uploads3.sendToS3(e, t, i);
              }, this),
            );
          },
          executeOnSignedUrl(t, e) {
            const i = new XMLHttpRequest();
              const o = this.opts.s3.search(/\?/) === -1 ? "?" : "&";
            i.open(
              "GET",
              `${this.opts.s3 + o  }name=${  t.name  }&type=${  t.type}`,
              !0,
            ),
              i.overrideMimeType &&
                i.overrideMimeType("text/plain; charset=x-user-defined");
            const r = this;
            (i.onreadystatechange = function(t) {
              this.readyState === 4 &&
                this.status === 200 &&
                (r.progress.show(), e(decodeURIComponent(this.responseText)));
            }),
              i.send();
          },
          createCORSRequest(t, e) {
            let i = new XMLHttpRequest();
            return (
              "withCredentials" in i
                ? i.open(t, e, !0)
                : typeof XDomainRequest !== "undefined"
                ? ((i = new XDomainRequest()), i.open(t, e))
                : (i = null),
              i
            );
          },
          sendToS3(e, i, o) {
            const r = this.uploads3.createCORSRequest("PUT", i);
            r &&
              ((r.onload = t.proxy(function() {
                let t;
                if ((this.progress.hide(), r.status !== 200))
                  return (
                    (t = { error: !0 }),
                    void this.upload.callback(t, this.upload.direct, r)
                  );
                const e = i.split("?");
                if (!e[0]) return !1;
                if (
                  (this.upload.direct ||
                    this.upload.$droparea.removeClass("drag-drop"),
                  (t = { url: e[0], id: e[0], s3: !0 }),
                  this.upload.type === "file")
                ) {
                  const s = e[0].split("/");
                  t.name = s[s.length - 1];
                }
                this.upload.callback(t, this.upload.direct, o);
              }, this)),
              (r.onerror = function() {}),
              (r.upload.onprogress = function(t) {}),
              r.setRequestHeader("Content-Type", e.type),
              r.setRequestHeader("x-amz-acl", "public-read"),
              r.send(e));
          },
        };
      },
      utils() {
        return {
          isEmpty(e) {
            return (
              (e = typeof e === "undefined" ? this.core.editor().html() : e),
              (e = e.replace(/[\u200B-\u200D\uFEFF]/g, "")),
              (e = e.replace(/&nbsp;/gi, "")),
              (e = e.replace(/<\/?br\s?\/?>/g, "")),
              (e = e.replace(/\s/g, "")),
              (e = e.replace(/^<p>[^\W\w\D\d]*?<\/p>$/i, "")),
              (e = e.replace(/<iframe(.*?[^>])>$/i, "iframe")),
              (e = e.replace(/<source(.*?[^>])>$/i, "source")),
              (e = e.replace(/<[^\/>][^>]*><\/[^>]+>/gi, "")),
              (e = e.replace(/<[^\/>][^>]*><\/[^>]+>/gi, "")),
              (e = t.trim(e)),
              e === ""
            );
          },
          isElement(t) {
            try {
              return t instanceof HTMLElement;
            } catch (e) {
              return (
                typeof t === "object" &&
                t.nodeType === 1 &&
                typeof t.style === "object" &&
                typeof t.ownerDocument === "object"
              );
            }
          },
          strpos(t, e, i) {
            const o = t.indexOf(e, i);
            return o >= 0 ? o : !1;
          },
          dataURItoBlob(t) {
            let e;
            e =
              t.split(",")[0].indexOf("base64") >= 0
                ? atob(t.split(",")[1])
                : unescape(t.split(",")[1]);
            for (
              var i = t
                  .split(",")[0]
                  .split(":")[1]
                  .split(";")[0],
                o = new Uint8Array(e.length),
                r = 0;
              r < e.length;
              r++
            )
              o[r] = e.charCodeAt(r);
            return new Blob([o], { type: i });
          },
          getOuterHtml(e) {
            return t("<div>")
              .append(
                t(e)
                  .eq(0)
                  .clone(),
              )
              .html();
          },
          cloneAttributes(e, i) {
            (e = e[0] || e), (i = t(i));
            for (let o = e.attributes, r = o.length; r--; ) {
              const s = o[r];
              i.attr(s.name, s.value);
            }
            return i;
          },
          breakBlockTag() {
            const e = this.selection.block();
            if (!e) return !1;
            const i = this.utils.isEmpty(e.innerHTML);
              const o = e.tagName.toLowerCase();
            if (o === "pre" || o === "li" || o === "td" || o === "th")
              return !1;
            if (!i && this.utils.isStartOfElement(e))
              return { $block: t(e), $next: t(e).next(), type: "start" };
            if (!i && this.utils.isEndOfElement(e))
              return { $block: t(e), $next: t(e).next(), type: "end" };
            const r = this.selection.extractEndOfNode(e);
              let s = t(`<${  o  } />`).append(r);
            return (
              (s = this.utils.cloneAttributes(e, s)),
              t(e).after(s),
              { $block: t(e), $next: s, type: "break" }
            );
          },
          inBlocks(e) {
            e = t.isArray(e) ? e : [e];
            for (
              var i = this.selection.blocks(), o = i.length, r = !1, s = 0;
              o > s;
              s++
            )
              if (i[s] !== !1) {
                const n = i[s].tagName.toLowerCase();
                t.inArray(n, e) !== -1 && (r = !0);
              }
            return r;
          },
          inInlines(e) {
            e = t.isArray(e) ? e : [e];
            for (
              var i = this.selection.inlines(), o = i.length, r = !1, s = 0;
              o > s;
              s++
            ) {
              const n = i[s].tagName.toLowerCase();
              t.inArray(n, e) !== -1 && (r = !0);
            }
            return r;
          },
          isTag(e, i) {
            const o = t(e).closest(i, this.core.editor()[0]);
            return o.length === 1 ? o[0] : !1;
          },
          isBlock(t) {
            return t === null
              ? !1
              : ((t = t[0] || t), t && this.utils.isBlockTag(t.tagName));
          },
          isBlockTag(t) {
            return typeof t === "undefined" ? !1 : this.reIsBlock.test(t);
          },
          isInline(t) {
            return (t = t[0] || t), t && this.utils.isInlineTag(t.tagName);
          },
          isInlineTag(t) {
            return typeof t === "undefined" ? !1 : this.reIsInline.test(t);
          },
          isRedactorParent(e) {
            return e
              ? t(e).parents(".redactor-in").length === 0 ||
                t(e).hasClass("redactor-in")
                ? !1
                : e
              : !1;
          },
          isCurrentOrParentHeader() {
            return this.utils.isCurrentOrParent([
              "H1",
              "H2",
              "H3",
              "H4",
              "H5",
              "H6",
            ]);
          },
          isCurrentOrParent(e) {
            const i = this.selection.parent();
              const o = this.selection.current();
            if (t.isArray(e)) {
              let r = 0;
              return (
                t.each(
                  e,
                  t.proxy(function(t, e) {
                    this.utils.isCurrentOrParentOne(o, i, e) && r++;
                  }, this),
                ),
                r !== 0
              );
            }
            return this.utils.isCurrentOrParentOne(o, i, e);
          },
          isCurrentOrParentOne(t, e, i) {
            return (
              (i = i.toUpperCase()),
              e && e.tagName === i ? e : t && t.tagName === i ? t : !1
            );
          },
          isEditorRelative() {
            const e = this.core.editor().css("position");
              const i = ["absolute", "fixed", "relative"];
            return t.inArray(i, e) !== -1;
          },
          setEditorRelative() {
            this.core.editor().addClass("redactor-relative");
          },
          getScrollTarget() {
            const e = t(this.opts.scrollTarget);
            return e.length !== 0 ? e : t(document);
          },
          freezeScroll() {
            (this.freezeScrollTop = this.utils.getScrollTarget().scrollTop()),
              this.utils.getScrollTarget().scrollTop(this.freezeScrollTop);
          },
          unfreezeScroll() {
            typeof this.freezeScrollTop !== "undefined" &&
              this.utils.getScrollTarget().scrollTop(this.freezeScrollTop);
          },
          saveScroll() {
            this.tmpScrollTop = this.utils.getScrollTarget().scrollTop();
          },
          restoreScroll() {
            typeof this.tmpScrollTop !== "undefined" &&
              this.utils.getScrollTarget().scrollTop(this.tmpScrollTop);
          },
          isStartOfElement(t) {
            return typeof t !== "undefined" || (t = this.selection.block())
              ? this.offset.get(t) === 0
              : !1;
          },
          isEndOfElement(e) {
            if (typeof e === "undefined" && ((e = this.selection.block()), !e))
              return !1;
            const i = t
                .trim(t(e).text())
                .replace(/[\t\n\r\n]/g, "")
                .replace(/\u200B/g, "");
              const o = this.offset.get(e);
            return o === i.length;
          },
          removeEmptyAttr(e, i) {
            const o = t(e);
            return typeof o.attr(i) === "undefined"
              ? !0
              : o.attr(i) === ""
              ? (o.removeAttr(i), !0)
              : !1;
          },
          replaceToTag(e, i) {
            let o;
            return (
              t(e).replaceWith(function() {
                o = t(`<${  i  } />`).append(t(this).contents());
                for (let e = 0; e < this.attributes.length; e++)
                  o.attr(this.attributes[e].name, this.attributes[e].value);
                return o;
              }),
              o
            );
          },
          isSelectAll() {
            return this.selectAll;
          },
          enableSelectAll() {
            this.selectAll = !0;
          },
          disableSelectAll() {
            this.selectAll = !1;
          },
          disableBodyScroll() {
            const e = t("html");
              let i = window.innerWidth;
            if (!i) {
              const o = document.documentElement.getBoundingClientRect();
              i = o.right - Math.abs(o.left);
            }
            const r = document.body.clientWidth < i;
              const s = this.utils.measureScrollbar();
            e.css("overflow", "hidden"), r && e.css("padding-right", s);
          },
          measureScrollbar() {
            const e = t("body");
              const i = document.createElement("div");
            (i.className = "redactor-scrollbar-measure"), e.append(i);
            const o = i.offsetWidth - i.clientWidth;
            return e[0].removeChild(i), o;
          },
          enableBodyScroll() {
            t("html").css({ overflow: "", "padding-right": "" }),
              t("body").remove("redactor-scrollbar-measure");
          },
          appendFields(e, i) {
            if (!e) return i;
            if (typeof e === "object")
              return (
                t.each(e, function(e, o) {
                  o !== null &&
                    o.toString().indexOf("#") === 0 &&
                    (o = t(o).val()),
                    i.append(e, o);
                }),
                i
              );
            const o = t(e);
            if (o.length === 0) return i;
            return (
              o.each(function() {
                i.append(t(this).attr("name"), t(this).val());
              }),
              i
            );
          },
          appendForms(e, i) {
            if (!e) return i;
            const o = t(e);
            if (o.length === 0) return i;
            const r = o.serializeArray();
            return (
              t.each(r, function(t, e) {
                i.append(e.name, e.value);
              }),
              i
            );
          },
          isRgb(t) {
            return t.search(/^rgb/i) === 0;
          },
          rgb2hex(t) {
            return (
              (t = t.match(
                /^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i,
              )),
              t && t.length === 4
                ? `#${ 
                  (`0${  parseInt(t[1], 10).toString(16)}`).slice(-2) 
                  }${(`0${  parseInt(t[2], 10).toString(16)}`).slice(-2) 
                  }${(`0${  parseInt(t[3], 10).toString(16)}`).slice(-2)}`
                : ""
            );
          },
          isCollapsed() {
            return this.selection.isCollapsed();
          },
          isMobile() {
            return this.detect.isMobile();
          },
          isDesktop() {
            return this.detect.isDesktop();
          },
          isPad() {
            return this.detect.isIpad();
          },
        };
      },
      browser() {
        return {
          webkit() {
            return this.detect.isWebkit();
          },
          ff() {
            return this.detect.isFirefox();
          },
          ie() {
            return this.detect.isIe();
          },
        };
      },
    }),
    t(window).on("load.tools.redactor", function() {
      t('[data-tools="redactor"]').redactor();
    }),
    (e.prototype.init.prototype = e.prototype);
})(jQuery),
  (function(t) {
    function e(e, i, o, r) {
      const s = {
        duration: 0.5,
        iterate: 1,
        delay: 0,
        prefix: "redactor-",
        timing: "linear",
      };
      (this.animation = i),
        (this.slide =
          this.animation === "slideDown" || this.animation === "slideUp"),
        (this.$element = t(e)),
        (this.prefixes = ["", "-moz-", "-o-animation-", "-webkit-"]),
        (this.queue = []),
        typeof o === "function"
          ? ((r = o), (this.opts = s))
          : (this.opts = t.extend(s, o)),
        this.slide && this.$element.height(this.$element.height()),
        this.init(r);
    }
    (t.fn.redactorAnimation = function(t, i, o) {
      return this.each(function() {
        new e(this, t, i, o);
      });
    }),
      (e.prototype = {
        init(t) {
          this.queue.push(this.animation),
            this.clean(),
            this.animation === "show"
              ? ((this.opts.timing = "linear"),
                this.$element.removeClass("hide").show(),
                typeof t === "function" && t(this))
              : this.animation === "hide"
              ? ((this.opts.timing = "linear"),
                this.$element.hide(),
                typeof t === "function" && t(this))
              : this.animate(t);
        },
        animate(e) {
          this.$element
            .addClass("redactor-animated")
            .css("display", "")
            .removeClass("hide"),
            this.$element.addClass(this.opts.prefix + this.queue[0]),
            this.set(
              `${this.opts.duration  }s`,
              `${this.opts.delay  }s`,
              this.opts.iterate,
              this.opts.timing,
            );
          const i = this.queue.length > 1 ? null : e;
          this.complete(
            "AnimationEnd",
            t.proxy(function() {
              this.$element.hasClass(this.opts.prefix + this.queue[0]) &&
                (this.clean(),
                this.queue.shift(),
                this.queue.length && this.animate(e));
            }, this),
            i,
          );
        },
        set(t, e, i, o) {
          for (let r = this.prefixes.length; r--; )
            this.$element.css(`${this.prefixes[r]  }animation-duration`, t),
              this.$element.css(`${this.prefixes[r]  }animation-delay`, e),
              this.$element.css(
                `${this.prefixes[r]  }animation-iteration-count`,
                i,
              ),
              this.$element.css(
                `${this.prefixes[r]  }animation-timing-function`,
                o,
              );
        },
        clean() {
          this.$element.removeClass("redactor-animated"),
            this.$element.removeClass(this.opts.prefix + this.queue[0]),
            this.set("", "", "", "");
        },
        complete(e, i, o) {
          this.$element.one(
            `${e.toLowerCase()  } webkit${  e  } o${  e  } MS${  e}`,
            t.proxy(function() {
              typeof i === "function" && i(), typeof o === "function" && o(this);
              const e = [
                "fadeOut",
                "slideUp",
                "zoomOut",
                "slideOutUp",
                "slideOutRight",
                "slideOutLeft",
              ];
              t.inArray(this.animation, e) !== -1 &&
                this.$element.css("display", "none"),
                this.slide && this.$element.css("height", "");
            }, this),
          );
        },
      });
  })(jQuery);
